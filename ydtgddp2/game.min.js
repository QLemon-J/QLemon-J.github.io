var DNStateManager = (function() {
    function a(d, g, e, c) {
        var f = this;
        this.statesConstainer = new createjs.Container();
        this.mouseDown = false;
        this.timeDevider = 1;
        this.liveTime = 0;
        this.isLoading = true;
        this.lastTime = 0;
        this.lastMouseUpHandlerTime = -1;
        this.lastMouseDownHandlerTime = -1;
        this.lastMouseMoveHandlerTime = -1;
        DNGameConfig.loadAPI();
        a.g_instance = this;
        this.states = Array();
        this.canvas = document.getElementById("canvas");
        this.stage = new createjs.Stage(this.canvas);
        this.stage.autoClear = false;
        var b = navigator.userAgent.indexOf("Android") > -1 && !(navigator.userAgent.indexOf("Chrome") > -1);
        if (b && createjs.Touch.isSupported()) {
            this.stage.enableDOMEvents(false)
        }
        createjs.Touch.enable(this.stage);
        this.stage.enableMouseOver(5);
        createjs.Ticker.timingMode = createjs.Ticker.RAF;
        createjs.Ticker.setFPS(60);
        createjs.Ticker.addEventListener("tick", function(h) {
            return f.update(h)
        });
        if (Constants.DEBUG_MODE) {
            document.onkeydown = function(h) {
                return f.onKeyDown(h)
            };
            document.onkeyup = function(h) {
                return f.onKeyUp(h)
            }
        }
        this.pushState(new PreloaderState(d, g, e, c));
        this.stage.addChild(this.statesConstainer);
        Constants.PIXEL_RATIO = (window.devicePixelRatio ? window.devicePixelRatio : 1);
        if (Constants.g_isPC) {
            window.onresize = (function(h) {
                return f.onResize(h)
            });
            this.onResize(null)
        } else {
            if (viewporter.ACTIVE) {
                window.addEventListener("viewportready", function() {
                    return f.onOrientationChanged()
                });
                window.addEventListener("viewportchange", function() {
                    return f.onOrientationChanged()
                })
            } else {
                window.addEventListener("orientationchange", function() {
                    return f.onOrientationChanged()
                })
            }
            this.onOrientationChanged()
        }
        this.stage.addEventListener(Constants.MOUSE_MOVE, (function(h) {
            return f.handleMouse(h)
        }));
        this.stage.addEventListener(Constants.MOUSE_DOWN, (function(h) {
            return f.handleMouse(h)
        }));
        this.stage.addEventListener(Constants.MOUSE_UP, (function(h) {
            return f.handleMouse(h)
        }))
    }
    a.prototype.isLandscape = function() {
        return viewporter.isLandscape()
    };
    a.prototype.onOrientationChanged = function() {
        this.resizeTo(window.innerWidth, window.innerHeight);
        if (DNGameConfig.needShowRotateScreen && !this.isLoading) {
            if (this.states.length != 0) {
                this.states[this.states.length - 1].onOrientationChanged(this.isLandscape())
            }
        }
    };
    a.prototype.onResize = function(b) {
        this.resizeTo(window.innerWidth, window.innerHeight)
    };
    a.prototype.resizeTo = function(b, c) {
        if (b < c) {
            Constants.SCREEN_SCALE = b / Constants.ASSETS_WIDTH * Constants.PIXEL_RATIO
        } else {
            Constants.SCREEN_SCALE = Math.min(b / Constants.ASSETS_WIDTH, c / Constants.ASSETS_HEIGHT) * Constants.PIXEL_RATIO
        }
        Constants.SCREEN_HEIGHT = c / Constants.SCREEN_SCALE * Constants.PIXEL_RATIO;
        this.canvas.width = Constants.ASSETS_WIDTH * Constants.SCREEN_SCALE;
        this.canvas.height = c * Constants.PIXEL_RATIO;
        this.canvas.style.width = this.canvas.width / Constants.PIXEL_RATIO + "px";
        this.canvas.style.height = this.canvas.height / Constants.PIXEL_RATIO + "px";
        this.statesConstainer.scaleX = this.statesConstainer.scaleY = Constants.SCREEN_SCALE;
        this.canvas.style.marginLeft = (b - Constants.ASSETS_WIDTH * Constants.SCREEN_SCALE / Constants.PIXEL_RATIO) / 2 + "px";
        this.canvas.style.marginTop = "0px"
    };
    a.prototype.allAssetsLoaded = function() {
        var b = this;
        this.isLoading = false;
        if (window.onpagehide) {
            window.onpagehide = (function(c) {
                return b.onLostFocus(c)
            })
        }
        if (window.onblur) {
            window.onblur = (function(c) {
                return b.onLostFocus(c)
            })
        }
        if (window.onpageshow) {
            window.onpageshow = (function(c) {
                return b.onFocus(c)
            })
        }
        if (window.onfocus) {
            window.onfocus = (function(c) {
                return b.onFocus(c)
            })
        }
        GameData.getInstance().load();
        this.changeState(new MainMenuState());
        if (DNGameConfig.needShowRotateScreen) {
            if (this.isLandscape()) {
                this.pushState(new PortraitLockState())
            }
        }
    };
    a.prototype.update = function(f) {
        var c = createjs.Ticker.getTime();
        var g = (c - this.lastTime);
        this.lastTime = c;
        if (g > 500) {
            g = 500
        }
        var e = g * 0.001 / this.timeDevider;
        this.liveTime += e;
        DNSoundManager.g_instance.update();
        if (this.states.length != 0) {
            var b = this.states[this.states.length - 1];
            if (!b.isInitiliazed()) {
                b.init()
            }
            b.update(e)
        }
        for (var d = 0; d < this.states.length; d++) {
            this.states[d].alignByCenter(d == 0)
        }
        for (var d = 0; d < this.states.length; d++) {
            this.states[d].forceUpdate(e)
        }
        this.stage.update(f)
    };
    a.prototype.changeState = function(b) {
        while (this.states.length != 0) {
            this.popState()
        }
        this.pushState(b)
    };
    a.prototype.pushState = function(b) {
        this.states.push(b);
        this.statesConstainer.addChild(b)
    };
    a.prototype.popState = function() {
        if (this.states.length != 0) {
            this.states[this.states.length - 1].cleanup();
            this.statesConstainer.removeChild(this.states[this.states.length - 1]);
            this.states.pop();
            if (this.states.length != 0) {
                this.states[this.states.length - 1].resume()
            }
        }
    };
    a.prototype.onLostFocus = function(b) {
        DNSoundManager.g_instance.onLostFocus()
    };
    a.prototype.onFocus = function(b) {
        DNSoundManager.g_instance.onFocus()
    };
    a.prototype.handleMouse = function(c) {
        if (this.states.length == 0) {
            return
        }
        c.preventDefault();
        var b = this.states[this.states.length - 1];
        switch (c.type) {
            case Constants.MOUSE_DOWN:
                DNSoundManager.g_instance.init();
                DNSoundManager.g_instance.playMusic(0.2);
                if (this.liveTime == this.lastMouseDownHandlerTime) {
                    return
                }
                this.lastMouseDownHandlerTime = this.liveTime;
                this.mouseDown = true;
                b.onMouseDown(c.stageX / Constants.SCREEN_SCALE, c.stageY / Constants.SCREEN_SCALE);
                break;
            case Constants.MOUSE_UP:
                if (this.liveTime == this.lastMouseUpHandlerTime) {
                    return
                }
                this.lastMouseUpHandlerTime = this.liveTime;
                this.mouseDown = false;
                b.onMouseUp(c.stageX / Constants.SCREEN_SCALE, c.stageY / Constants.SCREEN_SCALE);
                break;
            case Constants.MOUSE_MOVE:
                if (this.liveTime == this.lastMouseMoveHandlerTime) {
                    return
                }
                this.lastMouseMoveHandlerTime = this.liveTime;
                if (this.mouseDown) {
                    b.onMouseMove(c.stageX / Constants.SCREEN_SCALE, c.stageY / Constants.SCREEN_SCALE)
                }
                break
        }
    };
    a.prototype.onKeyDown = function(b) {
        switch (b.keyCode) {
            case 65:
                this.timeDevider = 5;
                break;
            case 66:
                this.timeDevider = 0.2;
                break;
            case 68:
                this.timeDevider = 10;
                break
        }
        this.stage.update()
    };
    a.prototype.onKeyUp = function(b) {
        switch (b.keyCode) {
            case 66:
            case 65:
            case 68:
                this.timeDevider = 1;
                break;
            case 39:
                a.g_instance.changeState(new PlayState(PlayState.g_curLevel + 1, false, []));
                break;
            case 37:
                a.g_instance.changeState(new PlayState(PlayState.g_curLevel - 1, false, []));
                break
        }
    };
    a.prototype.onPause = function() {
        if (this.states.length != 0) {
            this.states[this.states.length - 1].onPause()
        }
    };
    a.prototype.onResume = function() {
        if (this.states.length != 0) {
            this.states[this.states.length - 1].onResume()
        }
    };
    a.prototype.onRestart = function() {
        if (this.states.length != 0) {
            this.states[this.states.length - 1].onRestart()
        }
    };
    a.prototype.isMouseDownNow = function() {
        return this.mouseDown
    };
    return a
})();
var __extends = this.__extends || function(f, a) {
    for (var e in a) {
        if (a.hasOwnProperty(e)) {
            f[e] = a[e]
        }
    }

    function c() {
        this.constructor = f
    }
    c.prototype = a.prototype;
    f.prototype = new c()
};
var DNGameState = (function(a) {
    __extends(b, a);

    function b() {
        a.call(this);
        this.liveTime = 0;
        this.gameObjects = new Array();
        this.gui = new Array();
        this.newGameObjects = new Array();
        this.initiliazed = false;
        this.consoleH = 200;
        this.haveFill = false
    }
    b.prototype.getShader = function() {
        return this.shaderShape
    };
    b.prototype.addShader = function(c) {
        this.shaderShape = new createjs.Shape();
        this.shaderShape.graphics.beginFill("#000000");
        this.shaderShape.graphics.drawRect(0, 0, Constants.ASSETS_WIDTH, Constants.ASSETS_HEIGHT);
        this.shaderShape.graphics.endFill();
        this.addChild(this.shaderShape);
        this.shaderShape.alpha = 0;
        createjs.Tween.get(this.shaderShape).wait(300).to({
            alpha: 0.75
        }, 800, createjs.Ease.linear)
    };
    b.prototype.consolePrint = function(d) {
        var c = new createjs.Text(d, "bold 35px Verdana", "#000000");
        this.addChild(c);
        c.x = 50;
        c.y = this.consoleH;
        this.consoleH += 40
    };
    b.prototype.isInitiliazed = function() {
        return this.initiliazed
    };
    b.prototype.onMouseDown = function(c, e) {
        DNGUIObject.wasHandlerThisFrame = false;
        for (var d = 0; d < this.gui.length; d++) {
            this.gui[d].onMouseDown(c, e)
        }
    };
    b.prototype.onMouseMove = function(c, e) {
        DNGUIObject.wasHandlerThisFrame = false;
        for (var d = 0; d < this.gui.length; d++) {
            this.gui[d].onMouseMove(c, e)
        }
    };
    b.prototype.onMouseUp = function(c, e) {
        DNGUIObject.wasHandlerThisFrame = false;
        for (var d = 0; d < this.gui.length; d++) {
            this.gui[d].onMouseUp(c, e)
        }
    };
    b.prototype.addGuiObject = function(c) {
        this.gui.push(c);
        this.addGameObject(c)
    };
    b.prototype.update = function(d) {
        this.liveTime += d;
        this.newGameObjects = new Array();
        for (var c = 0; c < this.gameObjects.length; c++) {
            var e = this.gameObjects[c];
            e.update(d);
            if (e.isDead()) {
                e.onDead()
            } else {
                this.newGameObjects.push(e)
            }
        }
        this.gameObjects = this.newGameObjects
    };
    b.prototype.forceUpdate = function(d) {
        for (var c = 0; c < this.gameObjects.length; c++) {
            this.gameObjects[c].forceUpdate(d)
        }
    };
    b.prototype.addGameObject = function(c) {
        this.gameObjects.push(c)
    };
    b.prototype.addGameObjectAt = function(d, c) {
        this.gameObjects.push(d);
        if (c) {
            c.addChild(d)
        }
    };
    b.prototype.addGameObjectAtPos = function(e, d, c, f) {
        this.gameObjects.push(e);
        if (d) {
            d.addChild(e);
            e.x = c;
            e.y = f
        }
    };
    b.prototype.cleanup = function() {};
    b.prototype.resume = function() {};
    b.prototype.init = function() {
        this.initiliazed = true
    };
    b.prototype.onOrientationChanged = function(c) {
        if (DNGameConfig.needShowRotateScreen) {
            if (c) {
                DNStateManager.g_instance.pushState(new PortraitLockState())
            }
        }
    };
    b.prototype.alignByCenter = function(d) {
        if (!Constants.g_isPC) {
            this.y = (Constants.SCREEN_HEIGHT - Constants.ASSETS_HEIGHT) / 2
        } else {
            return
        } if (d) {
            if (Constants.ASSETS_HEIGHT < Constants.SCREEN_HEIGHT && !this.haveFill) {
                this.haveFill = true;
                var g = DNAssetsManager.g_instance.getImage(Images.FILL_BOTTOM);
                this.addChild(g);
                var f = DNAssetsManager.g_instance.getImage(Images.FILL_TOP);
                this.addChild(f);
                var c = 150;
                var e = (Constants.SCREEN_HEIGHT - Constants.ASSETS_HEIGHT) / 2;
                g.y = Constants.ASSETS_HEIGHT - 1;
                f.y = -c + 1;
                if (e > c) {
                    g.scaleY = (e / c);
                    f.scaleY = (e / c)
                }
            }
        }
    };
    b.prototype.loadLayout = function(g, e) {
        for (var d = 0; d < g.length; d++) {
            var c = g[d];
            var f = this.loadGUIObject(c, e);
            if (c.children) {
                this.loadLayout(c.children, f)
            }
        }
    };
    b.prototype.loadGUIObject = function(g, f) {
        var c = g.x;
        var j = g.y;
        var e = g.rotation || 0;
        var d = g.name;
        var i = g.picture;
        var h;
        switch (g.type) {
            case Layouts.TYPE_LOGO_PLACEHOLDER:
                h = new DNLogoPlaceholder(g.max_width || 200, g.max_height || 100);
                break;
            case Layouts.TYPE_SKEW:
                h = new Skewer(i);
                break;
            case Layouts.TYPE_BUTTON:
                h = new DNButton(i);
                break;
            case Layouts.TYPE_STATIC_PICTURE:
                h = new DNStaticPicture(i);
                break;
            case Layouts.TYPE_PLACEHOLDER:
                h = new DNPlaceholder();
                break;
            case Layouts.TYPE_JELLY_BUTTON:
                h = new DNJellyButton(i);
                break;
            case Layouts.TYPE_TEXT_FIELD:
                h = new DNTextField(g.text, g.font);
                break;
            case Layouts.TYPE_FLAT_BUTTON:
                h = new DNFlatButton(i);
                break;
            case Layouts.TYPE_PROGRESS_BAR:
                h = new DNProgressBar(null, i);
                break
        }
        if (h) {
            h.name = d;
            h.x = c;
            h.y = j;
            h.rotation = e;
            this.addGuiObject(h);
            f.addChild(h);
            h.scaleX = h.scaleY = (g.scale || 1);
            h.alpha = g.alpha || 1
        } else {
            console.log("Parsing layout error. Cant find type: ", g.type)
        }
        return h
    };
    b.prototype.findGUIObject = function(c) {
        for (var d = 0; d < this.gui.length; d++) {
            if (this.gui[d].name == c) {
                return this.gui[d]
            }
        }
        return null
    };
    b.prototype.onPause = function() {};
    b.prototype.onResume = function() {};
    b.prototype.onRestart = function() {};
    return b
})(createjs.Container);
var DNGameObject = (function(b) {
    __extends(a, b);

    function a() {
        b.call(this);
        this.liveTime = 0;
        this.forceLiveTime = 0;
        this.killed = false
    }
    a.prototype.update = function(c) {
        this.liveTime += c
    };
    a.prototype.forceUpdate = function(c) {
        this.forceLiveTime += c
    };
    a.prototype.kill = function() {
        this.killed = true
    };
    a.prototype.isDead = function() {
        return this.killed
    };
    a.prototype.onDead = function() {
        if (this.parent) {
            this.parent.removeChild(this)
        }
    };
    return a
})(createjs.Container);
var MainMenuState = (function(b) {
    __extends(a, b);

    function a() {
        var c = this;
        b.call(this);
        this.someThing = true;
        this.loadLayout(CurLayouts.MAIN_MENU_LAYOUT, this);
        createjs.Tween.get(this.findGUIObject("play_holder"), {
            loop: true
        }).to({
            scaleX: +1.05,
            scaleY: +1.05
        }, 150, createjs.Ease.linear).to({
            scaleX: +0.95,
            scaleY: +0.95
        }, 300, createjs.Ease.linear).to({
            scaleX: 1,
            scaleY: 1
        }, 150, createjs.Ease.linear).wait(4000);
        this.findGUIObject(Layouts.NAME_BUTTON_PLAY).setHandler(function() {
            return DNStateManager.g_instance.pushState(new CoolTransitionInState(new SelectLevelState()))
        });
        this.findGUIObject(Layouts.NAME_BUTTON_MORE_GAMES).setHandler(function() {
            return c.onMoreGamesTouch()
        });
        this.title = this.findGUIObject("title");
        this.soundButtonPlace = this.findGUIObject(Layouts.NAME_SOUND_PLACE);
        this.setSoundButton();
        this.addGameObjectAtPos(new Cloud(false), this.findGUIObject("clouds_place"), 600, 50);
        this.addGameObjectAtPos(new Cloud(false), this.findGUIObject("clouds_place"), 300, 250);
        this.addGameObjectAtPos(new Cloud(false), this.findGUIObject("clouds_place"), 200, 550)
    }
    a.prototype.init = function() {
        var c = this;
        b.prototype.init.call(this);
        this.addGameObject(new Jellier(this.findGUIObject("title_cloud"), 8, 0.2, 0.2));
        createjs.Tween.get(this.findGUIObject("title_cloud")).wait(200).to({
            y: 300
        }, 800, createjs.Ease.cubicOut);
        createjs.Tween.get(this.findGUIObject("title")).wait(800).to({
            scaleX: 1,
            scaleY: 1,
            alpha: 1
        }, 450, createjs.Ease.backOut);
        createjs.Tween.get(this.findGUIObject("two")).wait(1100).to({
            scaleX: 1,
            scaleY: 1,
            alpha: 1,
            rotation: 360
        }, 450, createjs.Ease.backOut);
        createjs.Tween.get(this.findGUIObject(Layouts.NAME_BUTTON_MORE_GAMES)).wait(1300).to({
            x: 150
        }, 600, createjs.Ease.backOut);
        createjs.Tween.get(this.findGUIObject(Layouts.NAME_SOUND_PLACE)).wait(1300).to({
            x: 700 - 150
        }, 600, createjs.Ease.backOut);
        createjs.Tween.get(this.findGUIObject("play_holder")).wait(1100).to({
            y: 600
        }, 600, createjs.Ease.backOut);
        createjs.Tween.get(this.findGUIObject("rainbow")).wait(1500).to({
            alpha: 1
        }, 2000, createjs.Ease.linear);
        this.addGameObject(new DNTimer(0.3, 100000, function() {
            return c.addCandy()
        }))
    };
    a.prototype.addCandy = function() {
        if (this.liveTime > 0.9) {
            this.addGameObjectAtPos(new FallingCandy(), this.findGUIObject("clouds_place"), Utils.RandomRange(180, 570), 360)
        }
    };
    a.prototype.onSoundTouch = function() {
        DNSoundManager.g_instance.setSoundEnabled(!DNSoundManager.g_instance.isSoundEnabled());
        this.setSoundButton()
    };
    a.prototype.setSoundButton = function() {
        var e = this;
        this.soundButtonPlace.removeAllChildren();
        var c = DNSoundManager.g_instance.isSoundEnabled();
        var d = new DNFlatButton(c ? Images.BUTTON_SOUND_ON : Images.BUTTON_SOUND_OFF, function() {
            return e.onSoundTouch()
        });
        this.soundButtonPlace.addChild(d);
        this.addGuiObject(d)
    };
    a.prototype.onMoreGamesTouch = function() {
        //window.open("http://m.softgames.de", "_blank")
        SG.redirectToPortal();
    };
    return a
})(DNGameState);
var PopupState = (function(b) {
    __extends(a, b);

    function a() {
        b.call(this);
        this.panel = DNAssetsManager.g_instance.getCenteredImageWithProxy(Images.MESSAGE_WINDOW);
        this.hiddingNow = false;
        this.shader = new createjs.Shape();
        this.shader.graphics.beginFill("#000000");
        this.shader.graphics.drawRect(0, 0, Constants.ASSETS_WIDTH, Constants.ASSETS_HEIGHT);
        this.shader.graphics.endFill();
        this.addChild(this.shader);
        this.shader.alpha = 0;
        createjs.Tween.get(this.shader).wait(400).to({
            alpha: 0.4
        }, 800, createjs.Ease.linear);
        this.panel.alpha = 0;
        createjs.Tween.get(this.panel).to({
            alpha: 1
        }, 200, createjs.Ease.linear);
        this.addChild(this.panel);
        this.panel.x = Constants.ASSETS_WIDTH * 0.5;
        this.panel.y = Constants.ASSETS_HEIGHT * 0.5;
        this.panel.scaleX = 0.7;
        this.panel.scaleY = 0.7;
        createjs.Tween.get(this.panel).to({
            scaleX: 1,
            scaleY: 1
        }, 400, createjs.Ease.backOut)
    }
    a.prototype.hide = function() {
        if (!this.hiddingNow) {
            createjs.Tween.removeTweens(this.shader);
            createjs.Tween.removeTweens(this.panel);
            createjs.Tween.get(this.shader).to({
                alpha: 0
            }, 400, createjs.Ease.linear).call(function() {
                return DNStateManager.g_instance.popState()
            });
            createjs.Tween.get(this.panel).to({
                y: -300
            }, 300, createjs.Ease.backIn);
            createjs.Tween.get(this.panel).to({
                alpha: 0
            }, 300, createjs.Ease.linear);
            this.hiddingNow = true
        }
    };
    a.prototype.onRestartTouch = function() {
        DNStateManager.g_instance.pushState(new SelectBoosterState(PlayState.g_curLevel))
    };
    a.prototype.onExitTouch = function() {
        DNStateManager.g_instance.pushState(new CoolTransitionInState(new SelectLevelState()))
    };
    return a
})(DNGameState);
var DNTimer = (function(b) {
    __extends(a, b);

    function a(e, c, d) {
        b.call(this);
        this.count = 1000000;
        this.loop = false;
        this.time = e;
        this.count = c;
        this.action = d;
        if (!this.count) {
            this.loop = true
        }
    }
    a.prototype.update = function(c) {
        b.prototype.update.call(this, c);
        if (this.liveTime > this.time) {
            this.runAction();
            this.liveTime -= this.time;
            if (!this.loop) {
                this.count--;
                if (this.count <= 0) {
                    this.kill()
                }
            }
        }
    };
    a.prototype.runAction = function() {
        if (this.action) {
            this.action()
        }
    };
    return a
})(DNGameObject);
var DNGUIObject = (function(a) {
    __extends(b, a);

    function b() {
        a.apply(this, arguments)
    }
    b.prototype.onMouseDown = function(c, d) {};
    b.prototype.onMouseUp = function(c, d) {};
    b.prototype.onMouseMove = function(c, d) {};
    b.prototype.setHandler = function(c) {};
    b.wasHandlerThisFrame = false;
    return b
})(DNGameObject);
var DNFlatButton = (function(b) {
    __extends(a, b);

    function a(c, d) {
        b.call(this);
        this.func = null;
        this.enabled = true;
        this.wasHandlerThisFrame = false;
        this.setPicture(c);
        this.func = d
    }
    a.prototype.update = function(c) {
        b.prototype.update.call(this, c);
        this.wasHandlerThisFrame = false
    };
    a.prototype.setPicture = function(c) {
        if (this.picture && this.picture.parent) {
            this.picture.parent.removeChild(this.picture)
        }
        this.picture = DNAssetsManager.g_instance.getCenteredImageWithProxy(c);
        this.addChild(this.picture)
    };
    a.prototype.setHandler = function(c) {
        this.func = c
    };
    a.prototype.onMouseDown = function(c, d) {
        if (this.hitTestSmart(c, d)) {
            this.liveTime = 0;
            if (!DNGUIObject.wasHandlerThisFrame) {
                DNGUIObject.wasHandlerThisFrame = true;
                this.wasHandlerThisFrame = true;
                this.func();
                DNSoundManager.g_instance.play(DNSoundManager.SOUND_CLICK)
            }
        }
    };
    a.prototype.hitTestSmart = function(c, g) {
        if (!this.enabled) {
            return
        }
        if (!this.parent || !this.visible) {
            return false
        }
        var f = this.picture.localToGlobal(0, 0);
        f.x /= Constants.SCREEN_SCALE;
        f.y /= Constants.SCREEN_SCALE;
        var d = this.picture.getBounds().width * 0.6 * this.scaleX;
        var e = this.picture.getBounds().height * 0.6 * this.scaleY;
        return f.x < c + d && f.x > c - d && f.y < g + e && f.y > g - e
    };
    return a
})(DNGUIObject);
var DNButton = (function(a) {
    __extends(b, a);

    function b(c, d) {
        a.call(this);
        this.selected = false;
        this.func = null;
        this.enabled = true;
        this.picture = DNAssetsManager.g_instance.getCenteredImageWithProxy(c);
        this.addChild(this.picture);
        this.func = d;
        this.picWidth = this.picture.getBounds().width * 1.15;
        this.picHeight = this.picture.getBounds().height * 1.15
    }
    b.prototype.getPicture = function() {
        return this.picture
    };
    b.prototype.setHandler = function(c) {
        this.func = c
    };
    b.prototype.select = function() {
        if (!this.selected) {
            createjs.Tween.removeTweens(this.picture);
            createjs.Tween.get(this.picture).to({
                scaleX: 1.15,
                scaleY: 1.15
            }, 150, createjs.Ease.linear);
            this.selected = true
        }
    };
    b.prototype.deselect = function() {
        if (this.selected) {
            createjs.Tween.removeTweens(this.picture);
            createjs.Tween.get(this.picture).to({
                scaleX: 1,
                scaleY: 1
            }, 150, createjs.Ease.linear);
            this.selected = false
        }
    };
    b.prototype.onMouseDown = function(c, d) {
        if (this.hitTestSmart(c, d)) {
            this.liveTime = 0;
            this.select()
        }
    };
    b.prototype.onMouseUp = function(c, d) {
        if (this.hitTestSmart(c, d) && this.selected) {
            if (!DNGUIObject.wasHandlerThisFrame) {
                DNGUIObject.wasHandlerThisFrame = true;
                this.func();
                DNSoundManager.g_instance.play(DNSoundManager.SOUND_CLICK)
            }
        }
        this.deselect()
    };
    b.prototype.onMouseMove = function(c, d) {
        if (!this.hitTestSmart(c, d)) {
            this.deselect()
        }
    };
    b.prototype.hitTestSmart = function(c, g) {
        if (!this.enabled) {
            return
        }
        if (!this.parent || !this.visible) {
            return false
        }
        var f = this.picture.localToGlobal(0, 0);
        f.x /= Constants.SCREEN_SCALE;
        f.y /= Constants.SCREEN_SCALE;
        var d = this.picture.getBounds().width * 0.6 * this.scaleX;
        var e = this.picture.getBounds().height * 0.6 * this.scaleY;
        return f.x < c + d && f.x > c - d && f.y < g + e && f.y > g - e
    };
    b.prototype.setEnabled = function(c) {
        this.enabled = c
    };
    return b
})(DNGUIObject);
var DNJellyButton = (function(b) {
    __extends(a, b);

    function a(c, d) {
        b.call(this);
        this.selected = false;
        this.func = null;
        this.enabled = true;
        this.picName = c;
        this.picture = DNAssetsManager.g_instance.getCenteredImageWithProxy(c);
        this.addChild(this.picture);
        this.func = d
    }
    a.prototype.getPicture = function() {
        return this.picture
    };
    a.prototype.setHandler = function(c) {
        this.func = c
    };
    a.prototype.forceUpdate = function(c) {
        b.prototype.forceUpdate.call(this, c);
        if (this.jellier) {
            this.jellier.update(c);
            if (this.jellier.isDead()) {
                this.jellier = null
            }
        }
    };
    a.prototype.select = function() {
        if (!this.selected) {
            this.picture.scaleX = this.picture.scaleY = 1;
            this.jellier = new Jellier(this.picture, 15, 0);
            this.selected = true
        }
    };
    a.prototype.deselect = function() {
        if (this.selected) {
            this.selected = false
        }
    };
    a.prototype.onMouseDown = function(c, d) {
        if (this.hitTestSmart(c, d)) {
            this.liveTime = 0;
            this.select()
        }
    };
    a.prototype.onMouseUp = function(c, d) {
        if (this.hitTestSmart(c, d) && this.selected) {
            if (!DNGUIObject.wasHandlerThisFrame) {
                DNGUIObject.wasHandlerThisFrame = true;
                if (this.func) {
                    this.func()
                }
                DNSoundManager.g_instance.play(DNSoundManager.SOUND_CLICK)
            }
        }
        this.deselect()
    };
    a.prototype.onMouseMove = function(c, d) {
        if (!this.hitTestSmart(c, d)) {
            this.deselect()
        }
    };
    a.prototype.hitTestSmart = function(c, g) {
        if (!this.enabled) {
            return
        }
        if (!this.parent || !this.visible) {
            return false
        }
        var f = this.picture.localToGlobal(0, 0);
        f.x /= Constants.SCREEN_SCALE;
        f.y /= Constants.SCREEN_SCALE;
        var d = this.picture.getBounds().width * 0.6 * this.scaleX;
        var e = this.picture.getBounds().height * 0.6 * this.scaleY;
        return f.x < c + d && f.x > c - d && f.y < g + e && f.y > g - e
    };
    a.prototype.setEnabled = function(c) {
        this.enabled = c
    };
    return a
})(DNGUIObject);
var BoosterButtonBase = (function(b) {
    __extends(a, b);

    function a(d, c, e) {
        b.call(this, d, null);
        this.selectedPic = DNAssetsManager.g_instance.getCenteredImageWithProxy(Images.CHECK_ICON);
        this.plusIcon = DNAssetsManager.g_instance.getCenteredImageWithProxy(Images.PLUS_ICON);
        if (e) {
            this.setHandler(e)
        }
        this.boosterName = c;
        this.count = GameData.getInstance().getBoostersCount(c);
        this.counterCircle = new CounterCircle(this.count);
        this.getPicture().addChild(this.counterCircle);
        this.counterCircle.x = -40;
        this.counterCircle.y = -40;
        this.getPicture().addChild(this.selectedPic);
        this.selectedPic.x = 30;
        this.selectedPic.y = 30;
        this.selectedPic.visible = false;
        this.getPicture().addChild(this.plusIcon);
        this.plusIcon.x = 30;
        this.plusIcon.y = 30;
        this.updateCaption()
    }
    a.prototype.updateCaption = function() {
        this.count = GameData.getInstance().getBoostersCount(this.boosterName);
        this.counterCircle.setCount(this.count);
        this.plusIcon.visible = (this.count <= 0);
        this.counterCircle.visible = (this.count > 0)
    };
    return a
})(DNJellyButton);
var DNTextField = (function(b) {
    __extends(a, b);

    function a(d, c) {
        b.call(this);
        this.textWidth = 0;
        this.fontNamePrefix = "";
        this.letterDistance = 0;
        if (c) {
            this.fontNamePrefix = c.name;
            this.letterDistance = c.letterDist
        }
        if (d) {
            this.setText(d)
        }
    }
    a.prototype.setText = function(g) {
        if (this.text == g) {
            return
        }
        this.text = g;
        this.removeAllChildren();
        var c = 0;
        for (var e = 0; e < g.length; e++) {
            var d = g.charAt(e);
            var f = DNAssetsManager.g_instance.getImage(this.fontNamePrefix + d);
            if (!f.getBounds()) {
                continue
            }
            this.addChild(f);
            f.x = c;
            c += f.getBounds().width + this.letterDistance
        }
        this.textWidth = c
    };
    a.prototype.getWidth = function() {
        return this.textWidth
    };
    a.prototype.getText = function() {
        return this.text
    };
    return a
})(DNGUIObject);
var Constants = (function() {
    function a() {}
    a.LOAD_COMPLETE = "LOAD_COMPLETE";
    a.MOUSE_DOWN = "stagemousedown";
    a.MOUSE_UP = "stagemouseup";
    a.MOUSE_MOVE = "stagemousemove";
    a.CELL_SIZE = 85;
    a.FIELD_OFFSET_X = 9 - 85;
    a.FIELD_OFFSET_Y = 155;
    a.EXCHANGE_TIME = 0.22;
    a.MATCH_TIME = 0.25;
    a.GRAVITY_ACC = 2500;
    a.ASSETS_WIDTH = 700;
    a.ASSETS_HEIGHT = 900;
    a.PIXEL_RATIO = 1;
    a.SCREEN_HEIGHT = 900;
    a.SCREEN_SCALE = 1;
    a.DPI = -1;
    a.g_isPC = true;
    a.DEBUG_MODE = false;
    a.COOL_TRANSITION_SPEED = 650;
    return a
})();
var Layouts = (function() {
    function a() {}
    a.TYPE_SKEW = "skew";
    a.TYPE_STATIC_PICTURE = "static_picture";
    a.TYPE_BUTTON = "button";
    a.TYPE_PLACEHOLDER = "placeholder";
    a.TYPE_LOGO_PLACEHOLDER = "TYPE_LOGO_PLACEHOLDER";
    a.TYPE_FLAT_BUTTON = "flat_button";
    a.TYPE_JELLY_BUTTON = "jelly_button";
    a.TYPE_TEXT_FIELD = "textfield";
    a.TYPE_PROGRESS_BAR = "progress_bar";
    a.TYPE_LANGUAGE_SELECTOR = "language_selector";
    a.NAME_BUTTON_PLAY = "play";
    a.NAME_BUTTON_CREDITS = "credits";
    a.NAME_SOUND_PLACE = "sound";
    a.NAME_BUTTON_BACK = "back";
    a.NAME_SELECT_LEVEL_PANEL = "select_level_panel";
    a.NAME_BUTTON_CLOSE = "close";
    a.NAME_BUTTON_EXIT = "exit";
    a.NAME_BUTTON_RESTART = "restart";
    a.NAME_PANEL = "panel";
    a.NAME_CAPTION = "caption";
    a.NAME_BUTTON_MORE_GAMES = "more_games";
    a.NAME_PAUSE = "pause";
    a.NAME_SCORE = "score";
    a.NAME_STARS = "stars";
    a.NAME_HIGHSCORE = "highscore";
    a.NAME_MOVES = "moves";
    a.NAME_TITLE = "title";
    a.NAME_GOAL_LABEL = "goal";
    a.NAME_GOLD = "gold";
    return a
})();
var Images = (function() {
    function a() {}
    a.FILL_TOP = "fill_top";
    a.FILL_BOTTOM = "fill_bottom";
    a.MAIN_MENU_HILLS = "main_menu_hills";
    a.MAIN_MENU_BACK = "main_menu_back";
    a.CLOUD_LOGO = "cloud_logo";
    a.BUTTON_CLOSE = "button_close";
    a.BUTTON_SOUND_ON = "button_sound_on";
    a.BUTTON_SOUND_OFF = "button_sound_off";
    a.BUTTON_EXIT = "button_exit";
    a.BUTTON_PAUSE = "button_pause";
    a.BUTTON_RESTART = "button_restart";
    a.BUTTON_PLAY = "button_play";
    a.BUTTON_MORE_GAMES = "button_more_games";
    a.TITLE = "title";
    a.TWO = "two";
    a.MAIN_MENU_WHITE_FRONT = "main_menu_white_front";
    a.MAIN_MENU_RAINBOW = "main_menu_rainbow";
    a.STAR_MINI = "star_mini";
    a.STAR_MINI_EMPTY = "star_mini_empty";
    a.TRANSITION_BALL = "transition_ball";
    a.SELECT_LEVEL_BACK = "select_level_back";
    a.BOTTOM_PANEL = "bottom_panel";
    a.TOP_PANEL = "top_panel";
    a.STRAWBERRY = "strawberry";
    a.DIRT_1 = "dirt_1";
    a.DIRT_2 = "dirt_2";
    a.BOMB_TIMER = "bomb_timer";
    a.CAGE = "cage";
    a.CHOCOLATE = "chocolate";
    a.STONE_HEART = "stone_heart";
    a.SCORE_ICON = "score_icon";
    a.MOVES_ICON = "moves_icon";
    a.TIME_ICON = "time_icon";
    a.LOSE_MOVES = "lose_moves";
    a.LOSE_BOMB = "lose_bomb";
    a.LOSE_TIME = "lose_time";
    a.BOOSTER_MOVES = "booster_moves";
    a.BOOSTER_BOMB = "booster_bomb";
    a.BOOSTER_TIME = "booster_time";
    a.BOOSTER_4 = "booster_4";
    a.BOOSTER_5 = "booster_5";
    a.BOOSTER_LOLIPOP = "booster_lolipop";
    a.AWESOME = "awesome";
    a.SUPERB = "superb";
    a.SHINING = "shining";
    a.DROP = "drop";
    a.DONUT = "donut";
    a.ARROW_BONUS_VERT = "arrow_bonus_vert";
    a.ARROW_BONUS_HOR = "arrow_bonus_hor";
    a.BOMB = "bomb_bonus";
    a.MESSAGE_WINDOW = "message_window";
    a.HINT_ARROW = "hint_arrow";
    a.GAMEOVER_CAPTION = "gameover_caption";
    a.SICKLE = "sickle";
    a.ROTATE = "rotate";
    a.LEVEL_BUTTON = "level_button";
    a.TASK_PANEL = "task_panel";
    a.HEART_PARTICLE = "heart_particle";
    a.CELL = "cell";
    a.BORDER_SIDE = "border_side";
    a.BORDER_CORNER = "border_corner";
    a.CHECK_ICON = "check_icon";
    a.GOLD_ICON = "gold_icon";
    a.PLUS_ICON = "plus_icon";
    a.BUTTON_BUY = "button_buy";
    a.PERFECT_STAR_ON = "perfect_star_on_1";
    a.PERFECT_STAR_OFF = "perfect_star_off_1";
    a.LEVEL_SHINING = "level_shining";
    a.LIGHTING = "lighting";
    a.ALL_PNG = [a.PERFECT_STAR_ON, a.PERFECT_STAR_OFF, a.MAIN_MENU_HILLS, a.CLOUD_LOGO, a.TITLE, a.MAIN_MENU_WHITE_FRONT, a.MAIN_MENU_RAINBOW, a.SELECT_LEVEL_BACK, a.TOP_PANEL, a.MESSAGE_WINDOW, a.ROTATE, a.TASK_PANEL, a.LIGHTING];
    a.ALL_JPG = [a.MAIN_MENU_BACK, a.FILL_BOTTOM, a.FILL_TOP, "map_1", "map_2", "map_3", "map_4"];
    return a
})();
var DNFontDef = (function() {
    function a() {}
    a.FLYING_POINTS = {
        name: "",
        letterDist: -10
    };
    a.FONT = {
        name: "font_",
        letterDist: -3
    };
    a.MAP_FONT = {
        name: "map_font/",
        letterDist: -11
    };
    return a
})();
var CurLayouts = (function() {
    function a() {}
    a.MAIN_MENU_LAYOUT = [{
        type: Layouts.TYPE_STATIC_PICTURE,
        picture: Images.MAIN_MENU_BACK,
        x: Constants.ASSETS_WIDTH / 2,
        y: Constants.ASSETS_HEIGHT / 2
    }, {
        type: Layouts.TYPE_STATIC_PICTURE,
        picture: Images.MAIN_MENU_RAINBOW,
        x: Constants.ASSETS_WIDTH / 2,
        y: 235,
        alpha: 0.00001,
        name: "rainbow"
    }, {
        type: Layouts.TYPE_PLACEHOLDER,
        x: 0,
        y: 0,
        name: "clouds_place"
    }, {
        type: Layouts.TYPE_SKEW,
        picture: Images.MAIN_MENU_HILLS,
        x: Constants.ASSETS_WIDTH / 2,
        y: Constants.ASSETS_HEIGHT - 336 / 2,
        name: "hills"
    }, {
        type: Layouts.TYPE_STATIC_PICTURE,
        picture: Images.CLOUD_LOGO,
        x: Constants.ASSETS_WIDTH / 2,
        y: -300,
        name: "title_cloud",
        children: [{
            type: Layouts.TYPE_STATIC_PICTURE,
            picture: Images.TITLE,
            x: -10,
            y: 0,
            alpha: 0.00001,
            scale: 0.5,
            name: "title"
        }, {
            type: Layouts.TYPE_STATIC_PICTURE,
            picture: Images.TWO,
            x: 250,
            y: -25,
            alpha: 0.00001,
            scale: 0.5,
            name: "two"
        }]
    }, {
        type: Layouts.TYPE_PLACEHOLDER,
        x: Constants.ASSETS_WIDTH / 2,
        y: 600 + 400,
        name: "play_holder",
        children: [{
            type: Layouts.TYPE_JELLY_BUTTON,
            picture: Images.BUTTON_PLAY,
            x: 0,
            y: 0,
            scale: 1.3,
            name: Layouts.NAME_BUTTON_PLAY
        }]
    }, {
        type: Layouts.TYPE_PLACEHOLDER,
        name: Layouts.NAME_SOUND_PLACE,
        x: 700 + 150,
        y: 700
    }, {
        type: Layouts.TYPE_JELLY_BUTTON,
        picture: Images.BUTTON_MORE_GAMES,
        x: -150,
        y: 700,
        name: Layouts.NAME_BUTTON_MORE_GAMES
    }, {
        type: Layouts.TYPE_STATIC_PICTURE,
        picture: Images.MAIN_MENU_WHITE_FRONT,
        x: Constants.ASSETS_WIDTH / 2,
        y: Constants.ASSETS_HEIGHT - 215 / 2
    }];
    a.SELECT_LEVEL_LAYOUT = [{
        type: Layouts.TYPE_STATIC_PICTURE,
        picture: Images.SELECT_LEVEL_BACK,
        x: Constants.ASSETS_WIDTH / 2,
        y: 147 / 2,
        children: [{
            type: Layouts.TYPE_TEXT_FIELD,
            x: -120,
            y: 0,
            name: Layouts.NAME_SCORE,
            font: DNFontDef.FONT,
            text: "000000"
        }, {
            type: Layouts.TYPE_TEXT_FIELD,
            x: -120,
            y: -53,
            name: Layouts.NAME_STARS,
            font: DNFontDef.FONT,
            text: "180"
        }, {
            type: Layouts.TYPE_TEXT_FIELD,
            x: 155,
            y: -29,
            name: Layouts.NAME_GOLD,
            font: DNFontDef.FONT,
            text: ""
        }, {
            type: Layouts.TYPE_STATIC_PICTURE,
            x: 127,
            y: -12,
            picture: Images.GOLD_ICON
        }]
    }, {
        type: Layouts.TYPE_JELLY_BUTTON,
        picture: Images.BUTTON_EXIT,
        x: 75,
        y: 65,
        name: Layouts.NAME_BUTTON_BACK,
        scale: 0.85
    }];
    a.PLAYSTATE_LAYOUT = [{
        type: Layouts.TYPE_STATIC_PICTURE,
        picture: Images.TOP_PANEL,
        x: Constants.ASSETS_WIDTH / 2,
        y: 133 / 2,
        children: [{
            type: Layouts.TYPE_JELLY_BUTTON,
            picture: Images.BUTTON_PAUSE,
            x: -295,
            y: -15,
            scale: 0.74,
            name: Layouts.NAME_PAUSE
        }, {
            type: Layouts.TYPE_TEXT_FIELD,
            x: 190,
            y: -33,
            name: Layouts.NAME_GOAL_LABEL,
            font: DNFontDef.FONT
        }, {
            type: Layouts.TYPE_TEXT_FIELD,
            x: 12,
            y: -32,
            name: Layouts.NAME_MOVES,
            font: DNFontDef.FONT
        }, {
            type: Layouts.TYPE_TEXT_FIELD,
            x: -180,
            y: -33,
            name: Layouts.NAME_SCORE,
            font: DNFontDef.FONT,
            text: "00000"
        }, {
            type: Layouts.TYPE_PLACEHOLDER,
            x: 141,
            y: -17,
            name: "goal_placeholder"
        }, {
            type: Layouts.TYPE_PLACEHOLDER,
            x: -13,
            y: -15,
            name: "moves_or_time_place"
        }]
    }, {
        type: Layouts.TYPE_STATIC_PICTURE,
        picture: Images.BOTTOM_PANEL,
        x: Constants.ASSETS_WIDTH / 2,
        y: Constants.ASSETS_HEIGHT - 60,
        children: [{
            type: Layouts.TYPE_PLACEHOLDER,
            x: -70,
            y: 14,
            scale: 0.9,
            name: "booster_1"
        }, {
            type: Layouts.TYPE_PLACEHOLDER,
            x: +70,
            y: 14,
            scale: 0.9,
            name: "booster_2"
        }]
    }];
    a.MAP_EDITOR_LAYOUT = [{
        type: Layouts.TYPE_JELLY_BUTTON,
        picture: Images.MOVES_ICON,
        x: 50,
        y: 50,
        name: "moves"
    }, {
        type: Layouts.TYPE_JELLY_BUTTON,
        picture: Images.TIME_ICON,
        x: 50,
        y: 50,
        name: "time"
    }, {
        type: Layouts.TYPE_TEXT_FIELD,
        x: 100,
        y: 35,
        name: "lose_counter",
        font: DNFontDef.FONT,
        text: "30"
    }, {
        type: Layouts.TYPE_JELLY_BUTTON,
        picture: Images.PLUS_ICON,
        x: 230,
        y: 50,
        name: "plus"
    }, {
        type: Layouts.TYPE_JELLY_BUTTON,
        picture: Images.CHECK_ICON,
        x: 300,
        y: 50,
        name: "minus"
    }, {
        type: Layouts.TYPE_JELLY_BUTTON,
        picture: Images.SCORE_ICON,
        x: 420,
        y: 50,
        name: "goal_score"
    }, {
        type: Layouts.TYPE_JELLY_BUTTON,
        picture: Images.STRAWBERRY,
        x: 420,
        y: 50,
        scale: 0.7,
        name: "goal_strawberry"
    }, {
        type: Layouts.TYPE_JELLY_BUTTON,
        picture: Images.DIRT_1,
        x: 420,
        y: 50,
        scale: 0.7,
        name: "goal_dirt"
    }, {
        type: Layouts.TYPE_JELLY_BUTTON,
        picture: "cake_1",
        x: 420,
        y: 50,
        scale: 0.7,
        name: "goal_chip_1"
    }, {
        type: Layouts.TYPE_JELLY_BUTTON,
        picture: "cake_2",
        x: 420,
        y: 50,
        scale: 0.7,
        name: "goal_chip_2"
    }, {
        type: Layouts.TYPE_JELLY_BUTTON,
        picture: "cake_3",
        x: 420,
        y: 50,
        scale: 0.7,
        name: "goal_chip_3"
    }, {
        type: Layouts.TYPE_JELLY_BUTTON,
        picture: "cake_4",
        x: 420,
        y: 50,
        scale: 0.7,
        name: "goal_chip_4"
    }, {
        type: Layouts.TYPE_JELLY_BUTTON,
        picture: "cake_5",
        x: 420,
        y: 50,
        scale: 0.7,
        name: "goal_chip_5"
    }, {
        type: Layouts.TYPE_JELLY_BUTTON,
        picture: "cake_6",
        x: 420,
        y: 50,
        scale: 0.7,
        name: "goal_chip_6"
    }, {
        type: Layouts.TYPE_JELLY_BUTTON,
        picture: "cake_7",
        x: 420,
        y: 50,
        scale: 0.7,
        name: "goal_chip_7"
    }, {
        type: Layouts.TYPE_TEXT_FIELD,
        x: 450,
        y: 35,
        name: "goal_counter",
        font: DNFontDef.FONT,
        text: "30"
    }, {
        type: Layouts.TYPE_JELLY_BUTTON,
        picture: Images.PLUS_ICON,
        x: 610,
        y: 50,
        name: "goal_plus"
    }, {
        type: Layouts.TYPE_JELLY_BUTTON,
        picture: Images.CHECK_ICON,
        x: 670,
        y: 50,
        name: "goal_minus"
    }, {
        type: Layouts.TYPE_STATIC_PICTURE,
        picture: Images.BOTTOM_PANEL,
        x: Constants.ASSETS_WIDTH / 2,
        y: Constants.ASSETS_HEIGHT - 60,
        name: "panel",
        children: [{
            type: Layouts.TYPE_JELLY_BUTTON,
            picture: Images.BUTTON_RESTART,
            x: 270,
            y: 5,
            scale: 0.74,
            name: Layouts.NAME_BUTTON_RESTART
        }, {
            type: Layouts.TYPE_JELLY_BUTTON,
            picture: Images.BUTTON_PLAY,
            x: -295,
            y: 5,
            scale: 0.74,
            name: Layouts.NAME_BUTTON_PLAY
        }, {
            type: Layouts.TYPE_JELLY_BUTTON,
            picture: Images.BUTTON_RESTART,
            x: -200,
            y: 5,
            scale: 0.74,
            name: "shuffle"
        }, {
            type: Layouts.TYPE_JELLY_BUTTON,
            picture: Images.BUTTON_RESTART,
            x: -100,
            y: 5,
            scale: 0.74,
            name: "colors_count"
        }, {
            type: Layouts.TYPE_TEXT_FIELD,
            x: -105,
            y: -5,
            name: "colors_count_label",
            font: DNFontDef.FONT,
            text: "4"
        }, {
            type: Layouts.TYPE_JELLY_BUTTON,
            picture: "bomb_5",
            x: -10,
            y: 5,
            scale: 0.85,
            name: "bomb_counter"
        }, {
            type: Layouts.TYPE_TEXT_FIELD,
            x: -30,
            y: 0,
            name: "bomb_counter_label",
            font: DNFontDef.FONT,
            text: "10"
        }, {
            type: Layouts.TYPE_JELLY_BUTTON,
            picture: "bomb_6",
            x: 50,
            y: 5,
            scale: 0.85,
            name: "bomb_prob"
        }, {
            type: Layouts.TYPE_TEXT_FIELD,
            x: 30,
            y: 0,
            name: "bomb_prob_label",
            font: DNFontDef.FONT,
            text: "0"
        }]
    }];
    return a
})();

function init() {
    var d = [];
    var e = [{
        images: ["all"],
        frames: [
            [547, 691, 260, 112],
            [772, 944, 39, 39],
            [813, 926, 48, 48],
            [704, 110, 85, 8],
            [2, 2, 700, 121],
            [437, 890, 85, 84],
            [350, 890, 85, 85],
            [885, 387, 55, 55],
            [263, 890, 85, 85],
            [176, 890, 85, 85],
            [89, 890, 85, 85],
            [699, 914, 71, 30],
            [547, 390, 336, 185],
            [887, 904, 50, 52],
            [772, 914, 29, 28],
            [699, 946, 66, 34],
            [812, 288, 96, 97],
            [547, 805, 150, 150],
            [2, 390, 543, 263],
            [2, 655, 543, 233],
            [2, 125, 543, 263],
            [885, 500, 54, 54],
            [809, 712, 139, 133],
            [809, 577, 139, 133],
            [887, 847, 55, 55],
            [885, 444, 54, 54],
            [699, 805, 107, 107],
            [704, 2, 172, 106],
            [910, 288, 32, 31],
            [878, 76, 32, 31],
            [2, 890, 85, 85],
            [808, 847, 77, 77],
            [547, 577, 260, 112],
            [878, 2, 69, 72],
            [547, 125, 263, 263],
            [812, 110, 134, 176]
        ],
        animations: {
            awesome: [0],
            bomb_timer: [1],
            border_corner: [2],
            border_side: [3],
            bottom_panel: [4],
            cage: [5],
            cell: [6],
            check_icon: [7],
            chocolate: [8],
            dirt_1: [9],
            dirt_2: [10],
            drop: [11],
            gameover_caption: [12],
            gold_icon: [13],
            heart_particle: [14],
            hint_arrow: [15],
            level_button: [16],
            level_shining: [17],
            lose_bomb: [18],
            lose_moves: [19],
            lose_time: [20],
            moves_icon: [21],
            perfect_star_off: [22],
            perfect_star_on: [23],
            plus_icon: [24],
            score_icon: [25],
            shining: [26],
            sickle: [27],
            star_mini: [28],
            star_mini_empty: [29],
            stone_heart: [30],
            strawberry: [31],
            superb: [32],
            time_icon: [33],
            transition_ball: [34],
            two: [35]
        }
    }, {
        images: ["candies"],
        frames: [
            [2, 90, 82, 82],
            [90, 2, 82, 86],
            [699, 89, 85, 85],
            [696, 2, 85, 85],
            [612, 89, 85, 85],
            [609, 2, 85, 85],
            [525, 89, 85, 85],
            [522, 2, 85, 85],
            [438, 89, 85, 85],
            [86, 90, 89, 74],
            [435, 2, 85, 85],
            [351, 89, 85, 85],
            [348, 2, 85, 85],
            [264, 89, 85, 85],
            [261, 2, 85, 85],
            [177, 89, 85, 85],
            [174, 2, 85, 85],
            [2, 2, 86, 86]
        ],
        animations: {
            arrow_bonus_hor: [0],
            arrow_bonus_vert: [1],
            bomb_1: [2],
            bomb_2: [3],
            bomb_3: [4],
            bomb_4: [5],
            bomb_5: [6],
            bomb_6: [7],
            bomb_7: [8],
            bomb_bonus: [9],
            cake_1: [10],
            cake_2: [11],
            cake_3: [12],
            cake_4: [13],
            cake_5: [14],
            cake_6: [15],
            cake_7: [16],
            donut: [17]
        }
    }, {
        images: ["clouds"],
        frames: [
            [445, 243, 408, 232],
            [2, 2, 351, 265],
            [355, 2, 384, 239],
            [2, 269, 441, 240],
            [445, 477, 373, 212]
        ],
        animations: {
            cloud_1: [0],
            cloud_2: [1],
            cloud_3: [2],
            cloud_4: [3],
            cloud_5: [4]
        }
    }, {
        images: ["buttons"],
        frames: [
            [386, 202, 97, 98],
            [386, 102, 97, 98],
            [386, 2, 97, 98],
            [299, 389, 97, 98],
            [200, 389, 97, 98],
            [101, 389, 97, 98],
            [2, 389, 97, 98],
            [258, 260, 126, 127],
            [258, 131, 126, 127],
            [258, 2, 126, 127],
            [130, 260, 126, 127],
            [130, 131, 126, 127],
            [130, 2, 126, 127],
            [2, 260, 126, 127],
            [2, 131, 126, 127],
            [2, 2, 126, 127]
        ],
        animations: {
            booster_4: [0],
            booster_5: [1],
            booster_back: [2],
            booster_bomb: [3],
            booster_lolipop: [4],
            booster_moves: [5],
            booster_time: [6],
            button_buy: [7],
            button_close: [8],
            button_exit: [9],
            button_more_games: [10],
            button_pause: [11],
            button_play: [12],
            button_restart: [13],
            button_sound_off: [14],
            button_sound_on: [15]
        }
    }, {
        images: ["boom"],
        frames: [
            [512, 2, 100, 100],
            [410, 104, 100, 100],
            [410, 2, 100, 100],
            [308, 104, 100, 100],
            [308, 2, 100, 100],
            [206, 104, 100, 100],
            [206, 2, 100, 100],
            [104, 104, 100, 100],
            [104, 2, 100, 100],
            [2, 104, 100, 100],
            [2, 2, 100, 100]
        ],
        animations: {
            boom_1: [0],
            boom_10: [1],
            boom_11: [2],
            boom_2: [3],
            boom_3: [4],
            boom_4: [5],
            boom_5: [6],
            boom_6: [7],
            boom_7: [8],
            boom_8: [9],
            boom_9: [10]
        }
    }, {
        images: ["score_font"],
        frames: [
            [342, 2, 32, 41],
            [308, 2, 32, 41],
            [274, 2, 32, 41],
            [240, 2, 32, 41],
            [206, 2, 32, 41],
            [172, 2, 32, 41],
            [138, 2, 32, 41],
            [104, 2, 32, 41],
            [70, 2, 32, 41],
            [36, 2, 32, 41],
            [2, 2, 32, 41]
        ],
        animations: {
            "0": [0],
            "1": [1],
            "2": [2],
            "3": [3],
            "4": [4],
            "5": [5],
            "6": [6],
            "7": [7],
            "8": [8],
            "9": [9],
            p: [10]
        }
    }, {
        images: ["map_font"],
        frames: [
            [335, 2, 35, 35],
            [298, 2, 35, 35],
            [261, 2, 35, 35],
            [224, 2, 35, 35],
            [187, 2, 35, 35],
            [150, 2, 35, 35],
            [113, 2, 35, 35],
            [76, 2, 35, 35],
            [39, 2, 35, 35],
            [2, 2, 35, 35]
        ],
        animations: {
            "map_font/0": [0],
            "map_font/1": [1],
            "map_font/2": [2],
            "map_font/3": [3],
            "map_font/4": [4],
            "map_font/5": [5],
            "map_font/6": [6],
            "map_font/7": [7],
            "map_font/8": [8],
            "map_font/9": [9]
        }
    }, {
        images: ["gui_font"],
        frames: [
            [2, 342, 25, 32],
            [2, 308, 25, 32],
            [2, 274, 25, 32],
            [2, 240, 25, 32],
            [2, 206, 25, 32],
            [2, 172, 25, 32],
            [2, 138, 25, 32],
            [2, 104, 25, 32],
            [2, 70, 25, 32],
            [2, 36, 25, 32],
            [2, 2, 25, 32]
        ],
        animations: {
            font_0: [0],
            font_1: [1],
            font_2: [2],
            font_3: [3],
            font_4: [4],
            font_5: [5],
            font_6: [6],
            font_7: [7],
            font_8: [8],
            font_9: [9],
            font_d: [10]
        }
    }];
    var c = [];
    var f = [];
    for (var b = 0; b < Images.ALL_PNG.length; b++) {
        f.push(Images.ALL_PNG[b])
    }
    for (var b = 0; b < Images.ALL_JPG.length; b++) {
        c.push(Images.ALL_JPG[b])
    }
    var a = [DNSoundManager.SOUND_MUSIC, DNSoundManager.SOUND_CLICK, DNSoundManager.SOUND_MATCH_1, DNSoundManager.SOUND_MATCH_2, DNSoundManager.SOUND_MATCH_3, DNSoundManager.SOUND_MATCH_4, DNSoundManager.SOUND_MATCH_5, DNSoundManager.SOUND_DROP_1, DNSoundManager.SOUND_DROP_2, DNSoundManager.SOUND_DROP_3, DNSoundManager.SOUND_LINE, DNSoundManager.SOUND_KILL_COLOR, DNSoundManager.SOUND_BOOM, DNSoundManager.SOUND_AWESOME, DNSoundManager.SOUND_EXCHANGE, DNSoundManager.SOUND_WIN, DNSoundManager.SOUND_LOSE, DNSoundManager.SOUND_LIGHTING];
    for (var b = 0; b < e.length; b++) {
        f.push(e[b]["images"][0])
    }
    for (var b = 0; b < f.length; b++) {
        d.push({
            src: "assets/art/" + f[b] + ".png",
            id: f[b]
        })
    }
    for (var b = 0; b < c.length; b++) {
        d.push({
            src: "assets/art/" + c[b] + ".jpg",
            id: c[b]
        })
    }
    createjs.Sound.alternateExtensions = ["mp3"];
    var g = [];
    for (var b = 0; b < a.length; b++) {
        g.push({
            src: a[b] + ".ogg",
            id: a[b]
        })
    }
    Constants.g_isPC = !Utils.IsMobileBrowser();
    new DNStateManager(d, g, e, [])
}
var ActivateBoosterButton = (function(b) {
    __extends(a, b);

    function a(d, c) {
        var e = this;
        b.call(this, d, c);
        this.setHandler(function() {
            return e.onTouch()
        })
    }
    a.prototype.onTouch = function() {
        if (PlayState.g_instance.isLolipop() && this.boosterName == GameData.BOOSTER_LOLIPOP) {
            this.count++;
            this.counterCircle.setCount(this.count);
            PlayState.g_instance.stopLolipop();
            GameData.getInstance().addBooster(this.boosterName);
            this.updateCaption();
            return
        }
        if (this.count > 0) {
            PlayState.g_instance.activateBooster(this.boosterName);
            this.updateCaption()
        } else {
            DNStateManager.g_instance.pushState(new BuyMoreBoostersState(this))
        }
    };
    return a
})(BoosterButtonBase);
var AutoreleaseEffect = (function(b) {
    __extends(a, b);

    function a() {
        b.call(this);
        this.frames = new Array();
        this.frame = 0;
        for (var c = 1; c <= 11; c++) {
            this.frames.push(DNAssetsManager.g_instance.getCenteredImageWithProxy("boom_" + c))
        }
        this.update(10)
    }
    a.prototype.update = function(d) {
        b.prototype.update.call(this, d);
        if (this.liveTime > 0.045) {
            this.liveTime = 0;
            this.frame++;
            if (this.frame >= this.frames.length) {
                this.frame = this.frames.length - 1;
                this.kill()
            }
            this.removeAllChildren();
            var c = this.frames[this.frame];
            this.addChild(c);
            c.y = -19;
            this.scaleX = this.scaleY = 2
        }
    };
    return a
})(DNGameObject);
var BonusSplasher = (function(a) {
    __extends(b, a);

    function b(c) {
        a.call(this);
        this.bonuses = c
    }
    b.prototype.update = function(d) {
        a.prototype.update.call(this, d);
        if (this.liveTime >= 0.8) {
            for (var c = 0; c < this.bonuses.length; c++) {
                PlayState.g_instance.forcedMatchBonus(this.bonuses[c])
            }
            PlayState.g_instance.setInpunState(PlayState.INPUT_STATE_MATCHING);
            PlayState.g_instance.setNegateInpunStateTime();
            this.kill()
        }
    };
    return b
})(DNGameObject);
var BuyMoreBoostersState = (function(a) {
    __extends(b, a);

    function b(d) {
        var j = this;
        a.call(this);
        this.notEnouthLabel = new createjs.Text(DNStringManager.getInstance().getString(DNStringManager.NOT_ENOUGH_GOLD), "bold 27px Times New Roman", "#6f6aa4");
        this.externalBooster = d;
        var f = d.picName;
        var e = d.boosterName;
        var c = new DNJellyButton(Images.BUTTON_CLOSE, function() {
            return j.hide()
        });
        this.panel.addChild(c);
        this.addGuiObject(c);
        c.x = +230;
        c.y = -190;
        this.booster = new SelectBoosterButton(f, e);
        this.panel.addChild(this.booster);
        this.booster.x = +0;
        this.booster.y = -40 - 30 - 10;
        var i = DNAssetsManager.g_instance.getCenteredImageWithProxy(Images.GOLD_ICON);
        this.panel.addChild(i);
        i.x = -80 - 100;
        i.y = -130 - 30;
        this.goldLabel = new DNTextField(GameData.getInstance().getGold().toString(), DNFontDef.FONT);
        this.panel.addChild(this.goldLabel);
        this.goldLabel.x = -40 - 100;
        this.goldLabel.y = -150 - 20 - 10;
        var h = new createjs.Text(DNStringManager.getInstance().getString(DNStringManager.PRICE) + ": " + GameData.getInstance().getBoostPrice(e), "bold 33px Times New Roman", "#6f6aa4");
        h.textAlign = "center";
        h.lineWidth = 400;
        h.y = -10;
        this.panel.addChild(h);
        this.panel.addChild(this.notEnouthLabel);
        this.notEnouthLabel.y = 35;
        this.notEnouthLabel.textAlign = "center";
        this.notEnouthLabel.lineWidth = 430;
        this.notEnouthLabel.alpha = 0;
        var g = new DNJellyButton(Images.BUTTON_BUY, function() {
            return j.onBuyTouch()
        });
        this.panel.addChild(g);
        this.addGuiObject(g);
        g.y = 140;
        g.scaleX = g.scaleY = 0.85
    }
    b.prototype.onBuyTouch = function() {
        var c = GameData.getInstance().getBoostPrice(this.booster.boosterName);
        if (GameData.getInstance().getGold() >= c) {
            GameData.getInstance().addBooster(this.booster.boosterName);
            GameData.getInstance().addGold(-c);
            this.booster.updateCaption();
            this.goldLabel.setText(GameData.getInstance().getGold().toString());
            this.externalBooster.updateCaption()
        } else {
            createjs.Tween.removeTweens(this.notEnouthLabel);
            createjs.Tween.get(this.notEnouthLabel).to({
                alpha: 1
            }, 400, createjs.Ease.linear).wait(800).to({
                alpha: 0
            }, 400, createjs.Ease.linear)
        }
    };
    return b
})(PopupState);
var Chip = (function(a) {
    __extends(b, a);

    function b(h, e, g, f, c) {
        a.call(this);
        this.STATE_NORMAL = "STATE_NORMAL";
        this.STATE_EXCHANGE = "STATE_EXCHANGE";
        this.STATE_SHIFT_DOWN = "STATE_SHIFT_DOWN";
        this.STATE_MATCH = "STATE_MATCH";
        this.wasClear = false;
        this.state = null;
        this.rotationSpeed = 0;
        this.selected = false;
        this.stateTime = 0;
        this.rotationTimeOffset = Utils.RandomRange(0, 20);
        this.bonusType = null;
        this.jellyAnim = false;
        this.doubleMatched = false;
        this.canBeMatched = true;
        this.matchReason = null;
        this.hole = false;
        this.stoneHeart = false;
        this.strawberry = false;
        this.bomb = false;
        this.cage = false;
        this.chocolate = false;
        this.spawnYPos = f;
        this.setIncexes(e, g);
        var d = false;
        if (h > 10) {
            d = true;
            h -= 10
        }
        if (h > 0 && h < 8) {
            this.chipPicture = DNAssetsManager.g_instance.getImage("cake_" + h);
            this.addChild(this.chipPicture);
            this.chipPicture.x = -this.chipPicture.getBounds().width / 2;
            this.chipPicture.y = -Constants.CELL_SIZE
        }
        this.colorID = h;
        this.setState(b.STATE_SPAWN_NEW);
        this.spawnDelay = c;
        if (h == 9) {
            this.convertToStoneHeart()
        }
        if (h == 8) {
            this.convertToStrawberry()
        }
        if (d) {
            this.setCage()
        }
        if (h == -1) {
            this.convertToChocolate()
        }
    }
    b.prototype.getMatchReason = function() {
        return this.matchReason
    };
    b.prototype.isHorizontal = function() {
        return this.horizontal
    };
    b.prototype.getBonusType = function() {
        return this.bonusType
    };
    b.prototype.getColorID = function() {
        return this.colorID
    };
    b.prototype.getIndeces = function() {
        return new createjs.Point(this.indexX, this.indexY)
    };
    b.prototype.getIndexX = function() {
        return this.indexX
    };
    b.prototype.getIndexY = function() {
        return this.indexY
    };
    b.prototype.setIncexes = function(c, d) {
        this.indexX = c;
        this.indexY = d
    };
    b.prototype.isMatching = function() {
        return this.state == this.STATE_MATCH
    };
    b.prototype.update = function(d) {
        this.stateTime += d;
        switch (this.state) {
            case this.STATE_NORMAL:
                if (this.stoneHeart || this.chocolate) {
                    this.scaleX = this.scaleY = 1;
                    break
                }
                var c = this.stateTime * 9;
                var e = Math.sin(c) * 0.13;
                this.scaleX = 1 + e;
                this.scaleY = 1 - e;
                if (c >= Math.PI * 1) {
                    this.scaleX = this.scaleY = 1
                }
                this.canBeMatched = true;
                break;
            case this.STATE_EXCHANGE:
                if (this.stateTime >= Constants.EXCHANGE_TIME) {
                    this.setState(this.STATE_NORMAL)
                }
                break;
            case b.STATE_SPAWN_NEW:
                this.spawnDelay -= d;
                if (this.spawnDelay < 0) {
                    this.speed.y += this.acceleration.y * d;
                    this.x += d * this.speed.x;
                    this.y += d * this.speed.y;
                    if (this.y >= this.spawnYPos) {
                        this.y = this.spawnYPos;
                        this.setState(this.STATE_NORMAL);
                        PlayState.g_instance.onShiftEnded(this);
                        if (this.haveCage()) {
                            this.runCageAnimation()
                        }
                    }
                }
                break;
            case this.STATE_SHIFT_DOWN:
                this.speed.y += this.acceleration.y * d;
                this.x += d * this.speed.x;
                this.y += d * this.speed.y;
                if (this.y >= this.spawnYPos) {
                    this.y = this.spawnYPos;
                    this.setState(this.STATE_NORMAL);
                    PlayState.g_instance.onShiftEnded(this)
                }
                break;
            case b.STATE_FALL_DOWN:
                this.speed.y += this.acceleration.y * d;
                this.x += d * this.speed.x;
                this.y += d * this.speed.y;
                this.rotation += this.rotationSpeed * d;
                if (this.y >= 1000) {
                    this.kill()
                }
                break;
            case this.STATE_MATCH:
                this.scaleY = 1 - this.stateTime * 1.5;
                this.scaleX = 1 + this.stateTime * 1.5;
                this.alpha = 1 - this.stateTime / Constants.MATCH_TIME;
                if (this.stateTime >= Constants.MATCH_TIME / 2 && !this.wasClear) {
                    PlayState.g_instance.addPointsAt(this, this.matchReason);
                    PlayState.g_instance.clearCell(this);
                    this.wasClear = true
                }
                if (this.stateTime >= Constants.MATCH_TIME) {
                    this.kill()
                }
                break
        }
        if (this.shiningCircle) {
            this.shiningCircle.rotation += d * 20
        }
    };
    b.prototype.setState = function(c) {
        if (c == this.state) {
            return
        }
        this.stateTime = 0;
        this.state = c;
        switch (c) {
            case this.STATE_NORMAL:
                this.jellyAnim = true;
                break;
            case this.STATE_EXCHANGE:
                break;
            case this.STATE_SHIFT_DOWN:
                createjs.Tween.get(this).to({
                    scaleX: 1,
                    scaleY: 1
                }, 170, createjs.Ease.linear);
                break;
            case b.STATE_SPAWN_NEW:
                this.speed = new createjs.Point(0, 500);
                this.acceleration = new createjs.Point(0, Constants.GRAVITY_ACC);
                break
        }
    };
    b.prototype.exchange = function(d, c) {
        this.deselect();
        this.setState(this.STATE_EXCHANGE);
        this.indexX = d;
        this.indexY = c
    };
    b.prototype.shiftDown = function(d, c) {
        this.speed = new createjs.Point(0, -250);
        this.deselect();
        this.indexY = d;
        this.spawnYPos = c;
        this.setState(this.STATE_SHIFT_DOWN)
    };
    b.prototype.match = function(c) {
        if (this.stoneHeart) {
            this.fallDown();
            return
        }
        if (this.isStrawberry()) {
            return
        }
        if (this.isHole()) {
            return
        }
        if (this.state == this.STATE_MATCH) {
            this.doubleMatched = true
        }
        if (!this.canBeMatched) {
            return
        }
        if (this.cage) {
            this.removeCage();
            return
        }
        this.matchReason = c;
        this.setState(this.STATE_MATCH)
    };
    b.prototype.isDoubleMatched = function() {
        return this.doubleMatched
    };
    b.prototype.select = function() {
        this.stateTime = 0;
        this.jellyAnim = true;
        this.selected = true
    };
    b.prototype.deselect = function() {
        if (this.selected) {
            this.scaleX = this.scaleY = 1;
            this.selected = false
        }
    };
    b.prototype.isNormal = function() {
        return this.state == this.STATE_NORMAL || this.state == b.STATE_HOLE
    };
    b.prototype.getState = function() {
        return this.state
    };
    b.prototype.isBonus = function() {
        return this.bonusType != null
    };
    b.prototype.convertToBonus = function(d, c) {
        this.horizontal = c;
        this.bonusType = d;
        this.bomb = false;
        this.cage = false;
        this.removeAllChildren();
        if (d == b.BONUS_5) {
            var e = DNAssetsManager.g_instance.getImage("donut");
            this.addChild(e);
            e.x = -e.getBounds().width / 2;
            e.y = -e.getBounds().height
        }
        if (d == b.BONUS_4) {
            var e = DNAssetsManager.g_instance.getImage(this.horizontal ? Images.ARROW_BONUS_HOR : Images.ARROW_BONUS_VERT);
            this.addChild(e);
            e.x = -e.getBounds().width / 2;
            e.y = -e.getBounds().height
        }
        if (d == b.BONUS_BOMB) {
            var e = DNAssetsManager.g_instance.getImage(Images.BOMB);
            this.addChild(e);
            e.x = -e.getBounds().width / 2;
            e.y = -e.getBounds().height
        }
        if (this.state != b.STATE_SPAWN_NEW) {
            PlayState.g_instance.addConverToBonusEffect(this)
        }
        this.canBeMatched = false;
        PlayState.g_instance.takeStockMatch(this);
        this.colorID = -1;
        this.setState(this.STATE_NORMAL);
        PlayState.g_instance.tryClearDirt(this.indexX, this.indexY);
        PlayState.g_instance.tryClearStoneHeart(this.indexX, this.indexY)
    };
    b.prototype.convertToSplashTimeBonus = function() {
        this.removeAllChildren();
        this.colorID = -1;
        this.bonusType = b.BONUS_BOMB;
        var c = DNAssetsManager.g_instance.getImage(Images.BOMB);
        this.addChild(c);
        c.x = -c.getBounds().width / 2;
        c.y = -c.getBounds().height;
        PlayState.g_instance.addConverToBonusEffect(this)
    };
    b.prototype.convertToStartBonus5 = function() {
        this.removeAllChildren();
        this.colorID = -1;
        this.bomb = false;
        this.bonusType = b.BONUS_5;
        var c = DNAssetsManager.g_instance.getImage("donut");
        this.addChild(c);
        c.x = -c.getBounds().width / 2;
        c.y = -c.getBounds().height;
        PlayState.g_instance.addConverToBonusEffect(this)
    };
    b.prototype.convertToStartBonus4 = function() {
        this.removeAllChildren();
        this.colorID = -1;
        this.bomb = false;
        this.horizontal = true;
        this.bonusType = b.BONUS_4;
        var c = DNAssetsManager.g_instance.getImage(Images.ARROW_BONUS_HOR);
        this.addChild(c);
        c.x = -c.getBounds().width / 2;
        c.y = -c.getBounds().height;
        PlayState.g_instance.addConverToBonusEffect(this)
    };
    b.prototype.flyAway = function() {
        this.chipPicture.y = -this.chipPicture.getBounds().height / 2;
        this.y -= this.chipPicture.getBounds().height / 2;
        if (!this.wasClear) {
            PlayState.g_instance.clearCell(this);
            this.wasClear = true
        }
        PlayState.g_instance.onStrawberrySaveQuick();
        createjs.Tween.get(this).to({
            x: 490,
            y: 50,
            rotation: 720
        }, 1200, createjs.Ease.backIn).call(function() {
            return PlayState.g_instance.onStrawberrySave()
        }).to({
            alpha: 0
        }, 300, createjs.Ease.linear)
    };
    b.prototype.fallDown = function() {
        if (this.state == b.STATE_FALL_DOWN) {
            return
        }
        this.chipPicture.y += Constants.CELL_SIZE / 2;
        this.y -= Constants.CELL_SIZE / 2;
        this.setState(b.STATE_FALL_DOWN);
        this.speed = new createjs.Point(Utils.RandomRange(-100, 100), -250);
        this.rotationSpeed = Utils.RandomRange(-300, 300);
        PlayState.g_instance.addChild(this);
        if (!this.wasClear) {
            PlayState.g_instance.clearCell(this);
            this.wasClear = true
        }
    };
    b.prototype.isHole = function() {
        return this.hole
    };
    b.prototype.convertToHole = function() {
        this.removeAllChildren();
        this.hole = true;
        this.y = this.spawnYPos;
        this.setState(b.STATE_HOLE);
        this.colorID = -1
    };
    b.prototype.convertToStoneHeart = function() {
        this.removeAllChildren();
        this.stoneHeart = true;
        this.colorID = -1;
        this.chipPicture = DNAssetsManager.g_instance.getCenteredImageWithProxy(Images.STONE_HEART);
        this.chipPicture.y = -Constants.CELL_SIZE / 2;
        this.addChild(this.chipPicture)
    };
    b.prototype.isStoneHeart = function() {
        return this.stoneHeart
    };
    b.prototype.convertToStrawberry = function() {
        this.removeAllChildren();
        this.colorID = -1;
        this.strawberry = true;
        this.chipPicture = DNAssetsManager.g_instance.getImage(Images.STRAWBERRY);
        this.addChild(this.chipPicture);
        this.chipPicture.x = -this.chipPicture.getBounds().width / 2;
        this.chipPicture.y = -83
    };
    b.prototype.isStrawberry = function() {
        return this.strawberry
    };
    b.prototype.convertToBomb = function(c) {
        if (this.colorID > 0 && this.colorID < 8) {
            this.removeAllChildren();
            this.bomb = true;
            this.bombTimeLeft = c;
            this.chipPicture = DNAssetsManager.g_instance.getImage("bomb_" + this.colorID);
            this.addChild(this.chipPicture);
            this.chipPicture.x = -this.chipPicture.getBounds().width / 2;
            this.chipPicture.y = -Constants.CELL_SIZE;
            this.bombTimer = new CounterCircle(this.bombTimeLeft);
            this.addChild(this.bombTimer);
            this.bombTimer.x = -20;
            this.bombTimer.y = -23
        }
    };
    b.prototype.isBomb = function() {
        return this.bomb
    };
    b.prototype.onDecreseMoves = function() {
        this.bombTimeLeft--;
        if (this.bombTimeLeft <= 0) {
            this.bombTimeLeft = 0;
            PlayState.g_instance.lose(PlayState.LOSE_REASON_BOMB)
        }
        this.bombTimer.setCount(this.bombTimeLeft)
    };
    b.prototype.increaseBombCounter = function() {
        this.bombTimeLeft += 5;
        this.bombTimer.setCount(this.bombTimeLeft)
    };
    b.prototype.setCage = function() {
        this.cage = true
    };
    b.prototype.runCageAnimation = function() {
        this.cageImage = DNAssetsManager.g_instance.getCenteredImageWithProxy(Images.CAGE);
        this.chipPicture.addChild(this.cageImage);
        this.cageImage.x = Constants.CELL_SIZE / 2;
        this.cageImage.y = Constants.CELL_SIZE / 2;
        this.cageImage.scaleX = this.cageImage.scaleY = 2.5;
        this.cageImage.alpha = 0;
        createjs.Tween.get(this.cageImage).wait(500).to({
            scaleX: 1,
            scaleY: 1,
            alpha: 1
        }, 300, createjs.Ease.linear)
    };
    b.prototype.haveCage = function() {
        return this.cage
    };
    b.prototype.removeCage = function() {
        var c = this;
        this.cage = false;
        PlayState.g_instance.addChild(this.cageImage);
        this.cageImage.x = this.x;
        this.cageImage.y = this.y - Constants.CELL_SIZE / 2;
        createjs.Tween.get(this.cageImage).to({
            scaleX: 2,
            scaleY: 2
        }, 400, createjs.Ease.cubicOut);
        createjs.Tween.get(this.cageImage).wait(150).to({
            alpha: 0
        }, 250, createjs.Ease.linear).call(function() {
            return c.onRemoveCage()
        })
    };
    b.prototype.onRemoveCage = function() {
        this.cageImage.parent.removeChild(this.cageImage)
    };
    b.prototype.convertToChocolate = function() {
        this.bomb = false;
        this.chocolate = true;
        this.colorID = -1;
        this.chipPicture = DNAssetsManager.g_instance.getCenteredImageWithProxy(Images.CHOCOLATE);
        this.chipPicture.y = -Constants.CELL_SIZE / 2;
        this.addChild(this.chipPicture)
    };
    b.prototype.convertToChocolateWithAnim = function() {
        this.chocolate = true;
        this.colorID = -1;
        createjs.Tween.get(this.chipPicture).wait(150).to({
            alpha: 0
        }, 300, createjs.Ease.linear);
        this.chipPicture = DNAssetsManager.g_instance.getCenteredImageWithProxy(Images.CHOCOLATE);
        this.chipPicture.y = -Constants.CELL_SIZE / 2;
        this.addChild(this.chipPicture);
        this.chipPicture.alpha = 0;
        this.chipPicture.scaleX = this.chipPicture.scaleY = 2.5;
        createjs.Tween.get(this.chipPicture).wait(150).to({
            scaleX: 1,
            scaleY: 1,
            alpha: 1
        }, 300, createjs.Ease.linear)
    };
    b.prototype.isChocolate = function() {
        return this.chocolate
    };
    b.prototype.isChip = function() {
        return !this.hole && !this.chocolate && !this.strawberry && !this.stoneHeart && !this.isBonus()
    };
    b.prototype.movable = function() {
        return !this.hole && !this.chocolate && !this.haveCage()
    };
    b.BONUS_4 = "BONUS_4";
    b.BONUS_5 = "BONUS_5";
    b.BONUS_BOMB = "BONUS_BOMB";
    b.STATE_SPAWN_NEW = "STATE_SPAWN_NEW";
    b.STATE_FALL_DOWN = "STATE_FALL_DOWN";
    b.STATE_HOLE = "STATE_HOLE";
    b.MATCH_REASON_SIMPLE = "MATCH_REASON_SIMPLE";
    b.MATCH_REASON_EXCHANGE_WIHT_BONUS = "MATCH_REASON_EXCHANGE_WIHT_BONUS";
    b.MATCH_REASON_BONUS_EFFECT_5 = "MATCH_REASON_BONUS_EFFECT_5";
    b.MATCH_REASON_BONUS_EFFECT_4_HOR = "MATCH_REASON_BONUS_EFFECT_4_HOR";
    b.MATCH_REASON_BONUS_EFFECT_4_VERT = "MATCH_REASON_BONUS_EFFECT_4_VERT";
    b.MATCH_REASON_I_AM_BONUS = "MATCH_REASON_I_AM_BONUS";
    return b
})(DNGameObject);
var Cloud = (function(a) {
    __extends(b, a);

    function b(c) {
        a.call(this);
        this.speed = Utils.RandomRange(20, 50);
        if (c) {
            this.speed *= 0.6;
            this.alpha = 0.5;
            this.scaleX = this.scaleY = 0.6
        }
        this.addChild(DNAssetsManager.g_instance.getCenteredImageWithProxy("cloud_" + Utils.RandomRangeInt(1, 5)))
    }
    b.prototype.forceUpdate = function(c) {
        a.prototype.forceUpdate.call(this, c);
        this.x += c * this.speed;
        if (this.x - this.getBounds().width / 2 >= Constants.ASSETS_WIDTH) {
            this.x = -this.getBounds().width / 2
        }
    };
    return b
})(DNGameObject);
var ConvertToBonusEffect = (function(a) {
    __extends(b, a);

    function b(c) {
        a.call(this);
        this.chip = c;
        this.addChild(DNAssetsManager.g_instance.getCenteredImageWithProxy(Images.SHINING));
        this.scaleX = this.scaleY = 2.5
    }
    b.prototype.update = function(c) {
        a.prototype.update.call(this, c);
        this.rotation += c * Math.PI * 35;
        if (this.scaleX > 1) {
            this.scaleX -= c * 3;
            this.scaleY -= c * 3
        }
        if (this.chip.isMatching()) {
            this.alpha -= c * 4
        }
        this.x = this.chip.x;
        this.y = this.chip.y - Constants.CELL_SIZE / 2;
        if (this.chip.isDead()) {
            this.kill()
        }
    };
    return b
})(DNGameObject);
var CoolTransitionInState = (function(b) {
    __extends(a, b);

    function a(c) {
        var d = this;
        b.call(this);
        this.pic = DNAssetsManager.g_instance.getCenteredImageWithProxy(Images.TRANSITION_BALL);
        this.nextState = c;
        this.addChild(this.pic);
        this.pic.x = -800;
        this.pic.y = Constants.SCREEN_HEIGHT / 2;
        this.pic.scaleX = this.pic.scaleY = Constants.SCREEN_HEIGHT / this.pic.getBounds().height * 1.2;
        createjs.Tween.get(this.pic).to({
            x: Constants.ASSETS_WIDTH / 2,
            rotation: 160
        }, Constants.COOL_TRANSITION_SPEED, createjs.Ease.linear).call(function() {
            return d.onFinishShade()
        })
    }
    a.prototype.onFinishShade = function() {
        DNStateManager.g_instance.changeState(this.nextState);
        DNStateManager.g_instance.pushState(new CoolTransitionOutState())
    };
    a.prototype.setNextState = function(c) {
        this.nextState = c
    };
    a.prototype.alignByCenter = function() {};
    return a
})(DNGameState);
var CoolTransitionOutState = (function(a) {
    __extends(b, a);

    function b() {
        a.call(this);
        this.pic = DNAssetsManager.g_instance.getCenteredImageWithProxy(Images.TRANSITION_BALL);
        this.addChild(this.pic);
        this.pic.x = Constants.ASSETS_WIDTH / 2;
        this.pic.y = Constants.SCREEN_HEIGHT / 2;
        this.pic.scaleX = this.pic.scaleY = Constants.SCREEN_HEIGHT / this.pic.getBounds().height * 1.2;
        this.pic.rotation = 160;
        createjs.Tween.get(this.pic).to({
            x: Constants.ASSETS_WIDTH + 800,
            rotation: 320
        }, Constants.COOL_TRANSITION_SPEED, createjs.Ease.linear).call(function() {
            return DNStateManager.g_instance.popState()
        })
    }
    b.prototype.alignByCenter = function() {};
    return b
})(DNGameState);
var CounterCircle = (function(b) {
    __extends(a, b);

    function a(c) {
        b.call(this);
        this.counterLabel = new DNTextField("", DNFontDef.FONT);
        var d = DNAssetsManager.g_instance.getCenteredImageWithProxy(Images.BOMB_TIMER);
        this.addChild(d);
        d.addChild(this.counterLabel);
        this.setCount(c)
    }
    a.prototype.setCount = function(c) {
        this.counterLabel.setText(c.toString());
        if (c < 10) {
            this.counterLabel.scaleX = this.counterLabel.scaleY = 0.7;
            this.counterLabel.x = -9;
            this.counterLabel.y = -11
        } else {
            this.counterLabel.scaleX = this.counterLabel.scaleY = 0.5;
            this.counterLabel.x = -9 - 2;
            this.counterLabel.y = -11 + 2
        }
    };
    return a
})(createjs.Container);
var DNAssetsManager = (function() {
    function a(d, f, e, b, c) {
        this.imageNameToSpriteSheetName = new Object();
        a.g_instance = this;
        this.athlases = e;
        this.localizableImages = b;
        this.manifest = d;
        this.soundManifest = f;
        this.progressCallBack = c;
        this.startDownLoad()
    }
    a.prototype.startDownLoad = function() {
        var b = this;
        this.loader = new createjs.LoadQueue();
        this.loader.addEventListener("progress", function(c) {
            return b.progressCallBack(c)
        });
        this.loader.addEventListener("complete", function(c) {
            return b.handleComplete(c)
        });
        createjs.Sound.registerManifest(this.soundManifest, "assets/sound/");
        this.loader.installPlugin(createjs.SoundJS);
        this.loader.loadManifest(this.manifest)
    };
    a.prototype.handleComplete = function(d) {
        try {
            for (var c = 0; c < this.athlases.length; c++) {
                var h = this.athlases[c];
                h.images = [this.getBitmap(h.images[0]).image];
                var g = new createjs.SpriteSheet(h);
                var j = g.getAnimations();
                for (var b = 0; b < j.length; b++) {
                    this.imageNameToSpriteSheetName[j[b]] = g
                }
            }
        } catch (f) {
            console.log(f)
        }
        DNStateManager.g_instance.allAssetsLoaded()
    };
    a.prototype.getResult = function(b) {
        return this.loader.getResult(b)
    };
    a.prototype.getBitmap = function(b) {
        var c = new createjs.Bitmap(this.loader.getResult(b));
        if (!c.getBounds()) {
            console.log("bitmap error", b)
        }
        return c
    };
    a.prototype.getCenteredBitmap = function(b) {
        var c = new createjs.Bitmap(this.loader.getResult(b));
        if (!c.image) {
            console.log("ERROR HERE", b)
        }
        c.x = -c.image.width / 2;
        c.y = -c.image.height / 2;
        return c
    };
    a.prototype.getImage = function(b) {
        if (this.localizableImages.indexOf(b) != -1) {
            b = DNStringManager.getInstance().getLanguagePrefix() + b
        }
        var c = new createjs.Container();
        if (this.imageNameToSpriteSheetName[b]) {
            c.addChild(this.getSprite(b));
            return c
        }
        c.addChild(this.getBitmap(b));
        return c
    };
    a.prototype.getCenteredImage = function(b) {
        var c = this.getImage(b);
        c.x = -c.getBounds().width / 2;
        c.y = -c.getBounds().height / 2;
        return c
    };
    a.prototype.getCenteredImageWithProxy = function(b) {
        var c = new createjs.Container();
        c.addChild(this.getCenteredImage(b));
        return c
    };
    a.prototype.getSprite = function(b) {
        var c = new createjs.Sprite(this.imageNameToSpriteSheetName[b], b);
        c.stop();
        return c
    };
    a.prototype.getCenteredSprite = function(b) {
        var c = this.getSprite(b);
        c.x = -c.getBounds().width / 2;
        c.y = -c.getBounds().height / 2;
        return c
    };
    return a
})();
var DNGameConfig = (function() {
    function a() {}
    a.loadAPI = function() {
        try {
            SG_Hooks.start();
            var c = SG.lang; //SG_Hooks.getLanguage(g_allLanguages);
            DNStringManager.getInstance().setLanguage(c);
            SG_Hooks.setOrientationHandler(function() {
                DNStateManager.g_instance.onOrientationChanged()
            });
            SG_Hooks.setResizeHandler(function() {
                DNStateManager.g_instance.onResize(null)
            })
        } catch (b) {}
    };
    a.submitHighScore = function(b) {};
    a.showLeaderboards = function() {};
    a.showAds = function() {};
    a.pauseGame = function() {
        DNStateManager.g_instance.onPause()
    };
    a.resumeGame = function() {
        DNStateManager.g_instance.onResume()
    };
    a.restartGame = function() {
        DNStateManager.g_instance.onRestart()
    };
    a.soundChange = function(b) {
        DNSoundManager.g_instance.setSoundEnabled(b)
    };
    a.goMoreGames = function() {};
    a.getBrandingPic = function() {
        return null
    };
    a.goLogo = function() {};
    a.needShowRotateScreen = true;
    a.haveHighScores = false;
    a.adsFrequency = 100;
    a.haveMoreGames = true;
    a.haveBranding = false;
    return a
})();
var DNLanguageSelector = (function(b) {
    __extends(a, b);

    function a(d, e) {
        var f = this;
        b.call(this, "flags/back", null);
        this.allLanguages = [];
        this.state = a.STATE_NORMAL;
        this.setHandler(function() {
            return f.onTap()
        });
        this.allLanguagesNames = e;
        for (var c = 0; c < this.allLanguagesNames.length; c++) {
            this.allLanguages.push(new DNFlatButton("flags/" + this.allLanguagesNames[c], function() {
                return f.onFlagTap()
            }));
            this.addChild(this.allLanguages[c]);
            d.addGuiObject(this.allLanguages[c]);
            this.allLanguages[c].visible = false
        }
        this.setLanguage(DNStringManager.getInstance().getLanguage())
    }
    a.prototype.setLanguage = function(c) {
        this.addChild(DNAssetsManager.g_instance.getCenteredImageWithProxy("flags/" + c));
        DNStringManager.getInstance().setLanguage(c)
    };
    a.prototype.onTap = function() {
        switch (this.state) {
            case a.STATE_NORMAL:
                this.show();
                break;
            case a.STATE_SHOWED:
                this.hide();
                break
        }
    };
    a.prototype.show = function() {
        var e = this;
        this.state = a.STATE_SHOW;
        for (var d = 0; d < this.allLanguages.length; d++) {
            this.allLanguages[d].y = 0;
            this.allLanguages[d].visible = true;
            this.allLanguages[d].scaleX = this.allLanguages[d].scaleY = 0.5;
            var c = createjs.Tween.get(this.allLanguages[d]).wait(50 * d).to({
                y: -100 - 86 * (d % 4),
                x: Math.floor(d / 4) * -86,
                scaleX: 1,
                scaleY: 1
            }, 400, createjs.Ease.cubicOut);
            if (d == this.allLanguages.length - 1) {
                c.call(function() {
                    return e.onShowEnded()
                })
            }
        }
    };
    a.prototype.hide = function() {
        var e = this;
        this.state = a.STATE_SHOW;
        for (var d = 0; d < this.allLanguages.length; d++) {
            var c = createjs.Tween.get(this.allLanguages[d]).wait(70 * d).to({
                x: 0,
                y: 0,
                scaleX: 0.5,
                scaleY: 0.5
            }, 300, createjs.Ease.cubicOut);
            if (d == this.allLanguages.length - 1) {
                c.call(function() {
                    return e.onHideEnded()
                })
            }
        }
    };
    a.prototype.onShowEnded = function() {
        this.state = a.STATE_SHOWED
    };
    a.prototype.onHideEnded = function() {
        for (var c = 0; c < this.allLanguages.length; c++) {
            this.allLanguages[c].visible = false
        }
        this.state = a.STATE_NORMAL
    };
    a.prototype.onFlagTap = function() {
        if (this.state == a.STATE_SHOWED) {
            for (var c = 0; c < this.allLanguages.length; c++) {
                if (this.allLanguages[c].wasHandlerThisFrame) {
                    this.setLanguage(this.allLanguagesNames[c]);
                    this.hide();
                    return
                }
            }
        }
    };
    a.STATE_NORMAL = 0;
    a.STATE_SHOW = 1;
    a.STATE_SHOWED = 2;
    a.STATE_HIDE = 3;
    return a
})(DNFlatButton);
var DNLoadingBar = (function(a) {
    __extends(b, a);

    function b(c, e, d, f) {
        a.call(this);
        this.loadingShape = new createjs.Shape();
        this.loadingShapeBack1 = new createjs.Shape();
        this.loadingShapeBack2 = new createjs.Shape();
        this.overrideBar = new createjs.Shape();
        this.maxWidth = 300;
        this.deltaY = 40;
        this.labelPercentDownload = new createjs.Text("Loading: 100%", "bold 35px Verdana", e);
        this.labelPercentDownload.textAlign = "center";
        this.loadingShapeBack1.graphics.beginFill(d);
        this.loadingShapeBack1.graphics.drawRect(0 - 4, 0 - 4, this.maxWidth + 8, this.deltaY + 8);
        this.loadingShapeBack1.graphics.endFill();
        this.addChild(this.loadingShapeBack1);
        this.loadingShape.graphics.beginFill(f);
        this.loadingShape.graphics.drawRect(0, 0, this.maxWidth, this.deltaY);
        this.loadingShape.graphics.endFill();
        this.addChild(this.loadingShape);
        this.loadingShape.scaleX = 0;
        this.labelPercentDownload.y = -10;
        this.loadingShape.x = -this.maxWidth / 2;
        this.loadingShape.y = +this.deltaY * 1.5;
        this.loadingShapeBack1.x = this.loadingShape.x;
        this.loadingShapeBack1.y = this.loadingShape.y
    }
    b.prototype.setProgress = function(c) {
        this.labelPercentDownload.text = "Loading: " + (c * 100).toFixed(0) + "%";
        this.loadingShape.scaleX = c
    };
    return b
})(createjs.Container);
var DNLogoPlaceholder = (function(a) {
    __extends(b, a);

    function b(e, d) {
        a.call(this);
        this.scaleCalculated = false;
        this.maxWidth = e;
        this.maxHeight = d;
        this.visible = DNGameConfig.haveBranding;
        if (Constants.DEBUG_MODE) {
            var c = new createjs.Shape();
            c.graphics.beginFill("#ff0000");
            c.graphics.drawRect(0, 0, e, d);
            c.graphics.endFill();
            c.x = -e / 2;
            c.y = -d / 2;
            this.addChild(c)
        } else {
            this.picture = DNGameConfig.getBrandingPic();
            this.addChild(this.picture)
        }
        this.calcScale()
    }
    b.prototype.calcScale = function() {
        if (!this.scaleCalculated) {
            if (!this.picture || !this.picture.getBounds()) {
                return
            }
            try {
                var d = Math.min(this.maxWidth / this.picture.getBounds().width, this.maxHeight / this.picture.getBounds().height);
                if (d < 1) {
                    this.picture.scaleX = this.picture.scaleY = d
                }
                this.scaleCalculated = true
            } catch (c) {
                console.log("error, logo placeholder pic")
            }
        }
    };
    b.prototype.update = function(c) {
        a.prototype.update.call(this, c);
        this.calcScale()
    };
    b.prototype.onMouseDown = function(c, d) {
        if (this.hitTestSmart(c, d)) {
            DNGameConfig.goLogo()
        }
    };
    b.prototype.hitTestSmart = function(c, g) {
        if (!this.parent || !this.visible) {
            return false
        }
        if (!this.picture || !this.picture.getBounds()) {
            return false
        }
        var f = this.localToGlobal(0, 0);
        f.x /= Constants.SCREEN_SCALE;
        f.y /= Constants.SCREEN_SCALE;
        var d = this.picture.getBounds().width * 0.5 * this.scaleX;
        var e = this.picture.getBounds().height * 0.5 * this.scaleY;
        return f.x < c + d && f.x > c - d && f.y < g + e && f.y > g - e
    };
    return b
})(DNGUIObject);
var DNPlaceholder = (function(a) {
    __extends(b, a);

    function b() {
        a.call(this)
    }
    return b
})(DNGUIObject);
var DNProgressBar = (function(a) {
    __extends(b, a);

    function b(d, e) {
        a.call(this);
        this.shape = new createjs.Shape();
        this.width = 0;
        if (d) {
            this.addChild(DNAssetsManager.g_instance.getImage(d))
        }
        var c = DNAssetsManager.g_instance.getImage(e);
        this.addChild(c);
        this.width = c.getBounds().width;
        this.shape.graphics.beginFill("#000000");
        this.shape.graphics.drawRect(0, 0, c.getBounds().width, c.getBounds().height);
        this.shape.graphics.endFill();
        c.mask = this.shape
    }
    b.prototype.setProgress = function(c) {
        if (c > 1) {
            c = 1
        }
        this.shape.x = (c - 1) * this.width
    };
    return b
})(DNGUIObject);
var DNSoundManager = (function() {
    function a() {
        this.soundEnabled = true;
        this.initiliazed = false;
        this.focus = true;
        this.hidden = false;
        this.wasSoundEnabled = true;
        this.wasPauseCall = false;
        this.soundsOnFrame = [];
        this.wasMusicPlay = false
    }
    a.prototype.onLostFocus = function() {
        this.focus = false
    };
    a.prototype.onFocus = function() {
        this.focus = true
    };
    a.prototype.init = function() {
        try {
            if (!this.initiliazed) {
                if (!createjs.Sound.initializeDefaultPlugins()) {
                    return
                }
                this.initiliazed = true
            }
        } catch (b) {}
    };
    a.prototype.isSoundEnabled = function() {
        return this.soundEnabled
    };
    a.prototype.setSoundEnabled = function(c) {
        this.soundEnabled = c;
        var b = !c || !this.focus || this.hidden;
        try {
            if (createjs.Sound.getMute() == b) {
                return
            }
            createjs.Sound.setMute(b)
        } catch (d) {}
    };
    a.prototype.play = function(b, c) {
        try {
            if (!c) {
                c = 1
            }
            if (this.initiliazed && this.soundEnabled) {
                return createjs.Sound.play(b, createjs.Sound.INTERRUPT_NONE, 0, 0, 0, c)
            }
        } catch (d) {}
        return null
    };
    a.prototype.playMusic = function(c) {
        try {
            if (!c) {
                c = 1
            }
            if (this.initiliazed && this.soundEnabled) {
                if (!this.wasMusicPlay) {
                    this.wasMusicPlay = true;
                    var b = createjs.Sound.play(a.SOUND_MUSIC, createjs.Sound.INTERRUPT_NONE, 0, 0, -1, c);
                    if (b.playState == "playFailed") {
                        this.wasMusicPlay = false;
                        return null
                    }
                }
            }
        } catch (d) {}
        return null
    };
    a.prototype.update = function() {
        this.soundsOnFrame.length = 0;
        if (this.initiliazed) {
            if (document.hidden || document.webkitHidden || document.msHidden) {
                this.hidden = true
            } else {
                this.hidden = false
            }
            this.setSoundEnabled(this.soundEnabled)
        }
    };
    a.prototype.playSinglePerFrame = function(b, c) {
        if (this.soundsOnFrame.indexOf(b) == -1) {
            this.soundsOnFrame.push(b);
            this.play(b, c)
        }
    };
    a.prototype.onPause = function() {
        this.wasPauseCall = true;
        console.log("on pause");
        this.wasSoundEnabled = this.isSoundEnabled();
        if (this.isSoundEnabled()) {
            this.setSoundEnabled(false)
        }
    };
    a.prototype.onResume = function() {
        if (this.wasPauseCall) {
            console.log("on resume");
            if (this.wasSoundEnabled) {
                this.setSoundEnabled(true)
            }
            this.wasPauseCall = false
        }
    };
    a.g_instance = new a();
    a.SOUND_MUSIC = "music";
    a.SOUND_CLICK = "click";
    a.SOUND_MATCH_1 = "match_1";
    a.SOUND_MATCH_2 = "match_2";
    a.SOUND_MATCH_3 = "match_3";
    a.SOUND_MATCH_4 = "match_4";
    a.SOUND_MATCH_5 = "match_5";
    a.SOUND_DROP_1 = "drop_1";
    a.SOUND_DROP_2 = "drop_2";
    a.SOUND_DROP_3 = "drop_3";
    a.SOUND_LINE = "line";
    a.SOUND_KILL_COLOR = "kill_color";
    a.SOUND_LOSE = "lose";
    a.SOUND_BOOM = "boom";
    a.SOUND_AWESOME = "awesome";
    a.SOUND_EXCHANGE = "exchange";
    a.SOUND_WIN = "win";
    a.SOUND_LIGHTING = "lighting";
    return a
})();
var DNStaticPicture = (function(b) {
    __extends(a, b);

    function a(c) {
        b.call(this);
        this.addChild(DNAssetsManager.g_instance.getCenteredImageWithProxy(c))
    }
    return a
})(DNGUIObject);
var DNStringManager = (function() {
    function a() {
        this.container = new createjs.Container();
        this.strings = new Object();
        this.allStrings = null;
        this.allStrings = g_strings;
        this.setLanguage("ru")
    }
    a.getInstance = function() {
        return a.g_instance
    };
    a.prototype.getString = function(b) {
        if (!this.strings) {
            return "!!!"
        }
        return this.strings[b] || "???"
    };
    a.prototype.setLanguage = function(b) {
        this.strings = this.allStrings[b];
        this.language = b
    };
    a.prototype.getLanguagePrefix = function() {
        if (this.language == "en") {
            return ""
        }
        return this.language + "/"
    };
    a.prototype.getLanguage = function() {
        return this.language
    };
    a.g_instance = new a();
    a.SELECT_BOOSTER = "SELECT_BOOSTER";
    a.PRICE = "PRICE";
    a.SPLASH_TIME = "SPLASH_TIME";
    a.TASK_REMOVE_CANDIES = "TASK_REMOVE_CANDIES";
    a.TASK_CLEAR_DIRT = "TASK_CLEAR_DIRT";
    a.TASK_SAVE_STRAWBERRY = "TASK_SAVE_STRAWBERRY";
    a.TASK_SCORE = "TASK_SCORE";
    a.POWERUP_CELL = "POWERUP_CELL";
    a.NOT_ENOUGH_GOLD = "NOT_ENOUGH_GOLD";
    return a
})();
var FallingCandy = (function(b) {
    __extends(a, b);

    function a() {
        b.call(this);
        this.speedX = 80 * Utils.RandomRange(0.2, 1.1) * 1.6;
        this.speedY = 240 * Utils.RandomRange(0.9, 1.1) * 1.6;
        this.rotSpeed = Utils.RandomRange(-350, 350);
        this.addChild(DNAssetsManager.g_instance.getCenteredImageWithProxy("cake_" + Utils.RandomRangeInt(1, 5)))
    }
    a.prototype.update = function(c) {
        b.prototype.update.call(this, c);
        this.x -= this.speedX * c;
        this.y += this.speedY * c;
        this.rotation += this.rotSpeed * c;
        if (this.y > 1000) {
            this.kill()
        }
    };
    return a
})(DNGameObject);
var FlyingPoints = (function(b) {
    __extends(a, b);

    function a(d) {
        b.call(this);
        this.delay = 0.2;
        this.wasShow = false;
        var c = new DNTextField("p" + d.toString(), DNFontDef.FLYING_POINTS);
        this.addChild(c);
        c.x = -c.getBounds().width / 2;
        c.y = -c.getBounds().height / 2;
        this.scaleX = this.scaleY = 0.1;
        this.visible = false
    }
    a.prototype.update = function(c) {
        this.delay -= c;
        if (this.delay > 0) {
            return
        } else {
            if (!this.wasShow) {
                this.wasShow = true;
                createjs.Tween.get(this).to({
                    scaleX: 1,
                    scaleY: 1
                }, 400, createjs.Ease.backOut);
                this.visible = true
            }
        }
        b.prototype.update.call(this, c);
        if (this.liveTime > 0.5) {
            this.y -= c * 70;
            this.alpha -= c * 1.5;
            if (this.alpha <= 0) {
                this.kill()
            }
        }
    };
    return a
})(DNGameObject);
var GameData = (function() {
    function a() {
        this.STARS_PER_LEVEL = "STARS_PER_LEVEL";
        this.BOOSTERS_COUNT = "BOOSTERS_COUNT";
        this.LEVELS_COMPLETED = "LEVELS_COMPLETED";
        this.TOTAL_SCORE = "TOTAL_SCORE";
        this.GOLD = "GOLD";
        this.levelsCompleted = 0;
        this.totalScore = 0;
        this.gold = 0;
        this.starsPerLevel = [];
        this.ALL_BOOSTERS_NAMES = [a.BOOSTER_MOVES, a.BOOSTER_TIME, a.BOOSTER_BOMB, a.BOOSTER_LOLIPOP, a.BOOSTER_5, a.BOOSTER_4];
        this.prices = [200, 200, 200, 100, 250, 200];
        this.boostersCount = [1, 1, 1, 3, 1, 2];
        this.mapEditorLevel = {
            form: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 1, 1, 1, 1, 1, 0, 0, 0],
                [0, 0, 1, 1, 1, 1, 1, 0, 0, 0],
                [0, 0, 1, 1, 1, 1, 1, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            dirt: null,
            chips: [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 1, 4, 3, 2, 2, 0, 0, 0],
                [0, 0, 4, 1, 1, 2, 3, 0, 0, 0],
                [0, 0, 4, 1, 1, 3, 3, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            chip_types: 5,
            moves: 1,
            time: 0,
            chip_goal: 4,
            chip_goal_count: 1,
            goal: PlayState.GOAL_COUNT,
            score_goal_count: 0,
            bombProb: 0,
            bombCounter: 0
        }
    }
    a.prototype.spendBooster = function(b) {
        if (Constants.DEBUG_MODE) {
            if (this.boostersCount[this.ALL_BOOSTERS_NAMES.indexOf(b)] <= 0) {
                console.log("BUG HERE")
            }
        }
        this.boostersCount[this.ALL_BOOSTERS_NAMES.indexOf(b)] --;
        this.save()
    };
    a.prototype.addBooster = function(b) {
        this.boostersCount[this.ALL_BOOSTERS_NAMES.indexOf(b)] ++;
        this.save()
    };
    a.prototype.getBoostersCount = function(b) {
        return this.boostersCount[this.ALL_BOOSTERS_NAMES.indexOf(b)]
    };
    a.prototype.getBoostPrice = function(b) {
        return this.prices[this.ALL_BOOSTERS_NAMES.indexOf(b)]
    };
    a.prototype.addGold = function(b) {
        this.gold += b
    };
    a.getInstance = function() {
        if (this.instance == null) {
            this.instance = new a()
        }
        return this.instance
    };
    a.prototype.save = function() {
        try {
            window.localStorage.setItem(this.LEVELS_COMPLETED, this.levelsCompleted.toString());
            window.localStorage.setItem(this.TOTAL_SCORE, this.totalScore.toString());
            window.localStorage.setItem(this.STARS_PER_LEVEL, JSON.stringify(this.starsPerLevel));
            window.localStorage.setItem(this.BOOSTERS_COUNT, JSON.stringify(this.boostersCount));
            window.localStorage.setItem(this.GOLD, this.gold.toString())
        } catch (b) {}
    };
    a.prototype.load = function() {
        try {
            this.levelsCompleted = +window.localStorage.getItem(this.LEVELS_COMPLETED) || 0;
            this.totalScore = +window.localStorage.getItem(this.TOTAL_SCORE) || 0;
            for (var b = 0; b < this.getTotalLevels(); b++) {
                this.starsPerLevel.push(0)
            }
            if (window.localStorage.getItem(this.STARS_PER_LEVEL)) {
                this.starsPerLevel = JSON.parse(window.localStorage.getItem(this.STARS_PER_LEVEL))
            }
            if (window.localStorage.getItem(this.BOOSTERS_COUNT)) {
                this.boostersCount = JSON.parse(window.localStorage.getItem(this.BOOSTERS_COUNT))
            }
            if (window.localStorage.getItem(this.GOLD)) {
                this.gold = +window.localStorage.getItem(this.GOLD) || 0
            }
        } catch (c) {}
    };
    a.prototype.onWinLevel = function(d, c, b) {
        this.totalScore += c;
        this.starsPerLevel[d] = Math.max(this.starsPerLevel[d], b);
        if (d == this.levelsCompleted) {
            this.levelsCompleted = d + 1;
            if (this.levelsCompleted > this.getTotalLevels()) {
                this.levelsCompleted = this.getTotalLevels()
            }
        }
        this.save()
    };
    a.prototype.getTotalScore = function() {
        return this.totalScore
    };
    a.prototype.levelsAvailable = function() {
        if (Constants.DEBUG_MODE) {
            return this.getTotalLevels()
        }
        return this.levelsCompleted + 1
    };
    a.prototype.getLevelDef = function(b) {
        if (b == -1) {
            return this.mapEditorLevel
        }
        return Levels.levels[b]
    };
    a.prototype.getTotalLevels = function() {
        return Levels.levels.length
    };
    a.prototype.getStarsInLevel = function(b) {
        return this.starsPerLevel[b]
    };
    a.prototype.totalStars = function() {
        var c = 0;
        for (var b = 0; b < this.getTotalLevels(); b++) {
            c += this.starsPerLevel[b]
        }
        return c
    };
    a.prototype.getGold = function() {
        return this.gold
    };
    a.instance = null;
    a.BOOSTER_MOVES = "MOVES";
    a.BOOSTER_TIME = "TIME";
    a.BOOSTER_BOMB = "BOMB";
    a.BOOSTER_LOLIPOP = "LOLIPOP";
    a.BOOSTER_5 = "5";
    a.BOOSTER_4 = "4";
    return a
})();
var GameOverState = (function(b) {
    __extends(a, b);

    function a(k, i, h) {
        var j = this;
        b.call(this);
        this.loseReason = h;
        var f = new DNJellyButton(Images.BUTTON_RESTART, function() {
            return j.onRestartTouch()
        });
        this.panel.addChild(f);
        this.addGuiObject(f);
        f.x = -75;
        f.y = 130;
        f.scaleX = f.scaleY = 0.8;
        var c = new DNJellyButton(Images.BUTTON_EXIT, function() {
            return j.onExitTouch()
        });
        this.panel.addChild(c);
        this.addGuiObject(c);
        c.x = +75;
        c.y = 130;
        c.scaleX = c.scaleY = 0.8;
        switch (this.loseReason) {
            case PlayState.LOSE_REASON_BOMB:
                this.booster = new SaveBoosterButton(Images.BOOSTER_BOMB, GameData.BOOSTER_BOMB, function() {
                    return j.onBoosterTouch()
                });
                break;
            case PlayState.LOSE_REASON_MOVES:
                this.booster = new SaveBoosterButton(Images.BOOSTER_MOVES, GameData.BOOSTER_MOVES, function() {
                    return j.onBoosterTouch()
                });
                break;
            case PlayState.LOSE_REASON_TIME:
                this.booster = new SaveBoosterButton(Images.BOOSTER_TIME, GameData.BOOSTER_TIME, function() {
                    return j.onBoosterTouch()
                });
                break
        }
        this.panel.addChild(this.booster);
        this.addGuiObject(this.booster);
        this.booster.x = +0;
        this.booster.y = -40;
        var d = DNAssetsManager.g_instance.getCenteredImageWithProxy(Images.GAMEOVER_CAPTION);
        this.panel.addChild(d);
        d.y = -220;
        try {
            SG_Hooks.gameOver(k, i)
        } catch (g) {}
    }
    a.prototype.onBoosterTouch = function() {
        var c = GameData.getInstance().getBoostersCount(this.booster.boosterName);
        if (c > 0) {
            PlayState.g_instance.saveByBooster(this.loseReason);
            this.hide()
        } else {
            DNStateManager.g_instance.pushState(new BuyMoreBoostersState(this.booster))
        }
    };
    return a
})(PopupState);
var HeartParticle = (function(b) {
    __extends(a, b);

    function a(d, c) {
        b.call(this);
        this.rotSpeed = Utils.RandomRange(-120, 120);
        this.speedX = d;
        this.speedY = c;
        this.addChild(DNAssetsManager.g_instance.getCenteredImageWithProxy(Images.HEART_PARTICLE));
        this.alpha = 0
    }
    a.prototype.update = function(c) {
        b.prototype.update.call(this, c);
        this.rotation += this.rotSpeed * c;
        this.x += this.speedX * c;
        this.y += this.speedY * c;
        if (this.liveTime > 0.3) {
            this.alpha -= c * 3;
            if (this.alpha <= 0) {
                this.kill()
            }
        } else {
            this.alpha += c * 4
        }
    };
    return a
})(DNGameObject);
var Jellier = (function(b) {
    __extends(a, b);

    function a(f, e, d, c) {
        b.call(this);
        this.jellyScale = 0.1;
        this.maxScale = 0.2;
        if (c) {
            this.maxScale = c
        }
        this.origScale = f.scaleX;
        this.speed = e;
        this.obj = f;
        this.delay = d
    }
    a.prototype.update = function(d) {
        if (this.delay > 0) {
            this.delay -= d;
            return
        }
        b.prototype.update.call(this, d);
        var c = this.liveTime * this.speed;
        this.jellyScale = this.maxScale * (Math.PI * 3 - c) / (Math.PI * 3);
        var e = Math.sin(c) * this.jellyScale;
        this.obj.scaleX = this.origScale + e;
        this.obj.scaleY = this.origScale - e;
        if (c >= Math.PI * 3) {
            this.obj.scaleX = this.obj.scaleY = 1 * this.origScale;
            this.kill()
        }
    };
    return a
})(DNGameObject);
var KillColorEffect = (function(b) {
    __extends(a, b);

    function a(g, f) {
        b.call(this);
        var e = 2000;
        this.addChild(DNAssetsManager.g_instance.getCenteredImageWithProxy(Images.DROP));
        var c = new createjs.Point(f.x - g.x, f.y - g.y);
        this.distance = Math.sqrt(c.x * c.x + c.y * c.y);
        this.maxTime = this.distance / e;
        var d = c.x / this.distance;
        this.speed = new createjs.Point(c.x / this.distance * e, c.y / this.distance * e);
        this.rotation = Utils.RadToGrad(Math.atan2(c.y, c.x))
    }
    a.prototype.update = function(c) {
        b.prototype.update.call(this, c);
        if (this.liveTime < this.maxTime) {
            this.x += c * this.speed.x;
            this.y += c * this.speed.y
        } else {
            this.alpha -= c * 3.5;
            if (this.alpha <= 0) {
                this.kill()
            }
        }
    };
    return a
})(DNGameObject);
var KillLineEffect = (function(a) {
    __extends(b, a);

    function b(c) {
        a.call(this);
        this.speed = c;
        this.addChild(DNAssetsManager.g_instance.getCenteredImageWithProxy(Images.SICKLE));
        if (c.x < 0) {
            this.rotation = 180
        }
        if (c.x > 0) {
            this.rotation = 0
        }
        if (c.y < 0) {
            this.rotation = -90
        }
        if (c.y > 0) {
            this.rotation = +90
        }
    }
    b.prototype.update = function(c) {
        a.prototype.update.call(this, c);
        this.x += c * this.speed.x;
        this.y += c * this.speed.y;
        if (this.x > Constants.ASSETS_WIDTH + 172 / 2) {
            this.kill()
        }
        if (this.x < -172 / 2) {
            this.kill()
        }
        if (this.y < 300 && this.speed.y < 0) {
            this.alpha -= c * 6
        }
        if (this.y < -106 / 2) {
            this.kill()
        }
        if (this.y > Constants.SCREEN_HEIGHT + 106 / 2) {
            this.kill()
        }
    };
    return b
})(DNGameObject);
var LevelDef = (function() {
    function a() {}
    return a
})();
var Levels = (function() {
    function a() {}
    a.LEVEL_1 = {
        form: [
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        dirt: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 2, 2, 2, 2, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 2, 2, 2, 2, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 2, 2, 2, 2, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        chips: [
            [0, 3, 3, 1, 2, 3, 2, 2, 1, 0],
            [0, 0, 1, 0, 0, 0, 0, 3, 0, 0],
            [0, 2, 3, 12, 11, 12, 13, 2, 2, 0],
            [0, 0, 1, 0, 0, 0, 0, 3, 0, 0],
            [0, 3, 2, 13, 12, 12, 11, 2, 1, 0],
            [0, 0, 3, 0, 0, 0, 0, 1, 0, 0],
            [0, 3, 2, 13, 11, 11, 13, 2, 3, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        chip_types: 3,
        moves: 25,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_DIRT",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.LEVEL_2 = {
        form: [
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]
        ],
        dirt: [
            [0, 2, 2, 2, 2, 2, 2, 2, 2, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 2, 2, 2, 2, 2, 2, 2, 2, 0]
        ],
        chips: [
            [0, 4, 4, 2, 1, 2, 2, 4, 3, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 2, 4, 2, 4, 2, 4, 3, 2, 0],
            [0, 3, 2, 4, 4, 1, 2, 1, 3, 0],
            [0, 3, 2, 2, 1, 2, 3, 1, 2, 0],
            [0, 4, 4, 3, 3, 1, 2, 3, 4, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 3, 1, 3, 2, 3, 1, 4, 0]
        ],
        chip_types: 4,
        moves: 30,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_DIRT",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.LEVEL_3 = {
        form: [
            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 1, 1, 1, 0, 0, 1, 1, 1, 0],
            [0, 1, 1, 1, 0, 0, 1, 1, 1, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0]
        ],
        dirt: [
            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 1, 2, 2, 2, 2, 1, 0, 0],
            [0, 1, 1, 2, 0, 0, 2, 1, 1, 0],
            [0, 1, 1, 2, 0, 0, 2, 1, 1, 0],
            [0, 0, 1, 2, 2, 2, 2, 1, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0]
        ],
        chips: [
            [0, 0, 0, 0, 3, 1, 0, 0, 0, 0],
            [0, 0, 0, 4, 2, 3, 2, 0, 0, 0],
            [0, 0, 2, 14, 11, 13, 13, 4, 0, 0],
            [0, 3, 2, 13, 0, 0, 14, 1, 1, 0],
            [0, 2, 4, 11, 0, 0, 12, 3, 3, 0],
            [0, 0, 1, 13, 12, 12, 13, 4, 0, 0],
            [0, 0, 0, 3, 1, 3, 2, 0, 0, 0],
            [0, 0, 0, 0, 4, 3, 0, 0, 0, 0]
        ],
        chip_types: 4,
        moves: 25,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_DIRT",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.LEVEL_4 = {
        form: [
            [0, 1, 1, 0, 1, 1, 0, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 0, 1, 0, 0, 1, 0, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 0, 0, 1, 1, 0, 0, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 0, 1, 0, 0, 1, 0, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]
        ],
        dirt: null,
        chips: [
            [0, 8, 8, 0, 8, 8, 0, 8, 8, 0],
            [0, 2, 2, 3, 4, 3, 4, 2, 2, 0],
            [0, 4, 0, 3, 0, 0, 2, 0, 3, 0],
            [0, 1, 3, 4, 3, 4, 1, 3, 1, 0],
            [0, 1, 0, 0, 3, 2, 0, 0, 3, 0],
            [0, 3, 1, 4, 1, 2, 2, 3, 2, 0],
            [0, 1, 0, 4, 0, 0, 4, 0, 3, 0],
            [0, 2, 3, 3, 4, 1, 4, 2, 4, 0]
        ],
        chip_types: 4,
        moves: 30,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_STRAWBERRY",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.LEVEL_5 = {
        form: [
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 0, 0, 1, 1, 0, 0, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 0, 1, 1, 0, 1, 1, 0],
            [0, 1, 1, 0, 1, 1, 0, 1, 1, 0],
            [0, 1, 1, 0, 1, 1, 0, 1, 1, 0]
        ],
        dirt: null,
        chips: [
            [0, 8, 8, 2, 8, 8, 2, 8, 8, 0],
            [0, 1, 4, 2, 2, 3, 2, 3, 2, 0],
            [0, 2, 1, 1, 4, 1, 4, 3, 2, 0],
            [0, 14, 0, 0, 12, 13, 0, 0, 13, 0],
            [0, 2, 3, 1, 4, 1, 1, 3, 2, 0],
            [0, 3, 4, 0, 2, 2, 0, 1, 3, 0],
            [0, 3, 2, 0, 1, 1, 0, 2, 4, 0],
            [0, 4, 1, 0, 2, 3, 0, 4, 4, 0]
        ],
        chip_types: 4,
        moves: 30,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_STRAWBERRY",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.LEVEL_6 = {
        form: [
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
            [0, 1, 0, 1, 1, 1, 1, 0, 1, 0],
            [0, 1, 0, 1, 1, 1, 1, 0, 1, 0],
            [0, 1, 0, 1, 1, 1, 1, 0, 1, 0],
            [0, 1, 0, 1, 1, 1, 1, 0, 1, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]
        ],
        dirt: [
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]
        ],
        chips: [
            [0, 3, 1, 2, 3, 2, 1, 3, 2, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 3, 0],
            [0, 3, 0, 2, 2, 3, 3, 0, 2, 0],
            [0, 3, 0, 1, 3, 2, 2, 0, 1, 0],
            [0, 2, 0, 3, 1, 3, 3, 0, 1, 0],
            [0, 2, 0, 2, 2, 1, 2, 0, 3, 0],
            [0, 3, 0, 0, 0, 0, 0, 0, 1, 0],
            [0, 1, 1, 2, 2, 3, 2, 1, 2, 0]
        ],
        chip_types: 3,
        moves: 25,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_DIRT",
        score_goal_count: 0,
        bombProb: 0.1,
        bombCounter: 10
    };
    a.LEVEL_7 = {
        form: [
            [0, 1, 0, 1, 1, 1, 1, 1, 0, 0],
            [0, 1, 0, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 1, 0, 0],
            [0, 1, 0, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 1, 0, 0],
            [0, 1, 0, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 1, 0, 0],
            [0, 1, 0, 1, 1, 1, 1, 1, 0, 0]
        ],
        dirt: null,
        chips: [
            [0, 8, 0, 1, 4, 2, 4, 1, 0, 0],
            [0, 1, 0, 2, 3, 2, 4, 2, 0, 0],
            [0, 0, 0, 3, 4, 3, 1, 4, 0, 0],
            [0, 4, 0, 2, 3, 1, 4, 3, 0, 0],
            [0, 0, 0, 2, 4, 3, 2, 1, 0, 0],
            [0, 3, 0, 3, 1, 3, 3, 2, 0, 0],
            [0, 0, 0, 4, 4, 1, 2, 1, 0, 0],
            [0, 3, 0, 2, 3, 4, 3, 3, 0, 0]
        ],
        chip_types: 4,
        moves: 30,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_STRAWBERRY",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.LEVEL_8 = {
        form: [
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 0, 0, 0, 0, 1, 1, 0],
            [0, 1, 1, 0, 1, 1, 0, 1, 1, 0],
            [0, 1, 1, 0, 1, 1, 0, 1, 1, 0],
            [0, 1, 1, 0, 0, 0, 0, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]
        ],
        dirt: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 2, 2, 0, 0, 0, 0],
            [0, 0, 0, 0, 2, 2, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        chips: [
            [0, 2, 4, 4, 2, 1, 3, 2, 4, 0],
            [0, 4, 2, 4, 3, 1, 1, 3, 4, 0],
            [0, 2, 3, 0, 0, 0, 0, 3, 2, 0],
            [0, 4, 4, 0, 11, 13, 0, 2, 2, 0],
            [0, 3, 1, 0, 11, 13, 0, 3, 3, 0],
            [0, 2, 4, 0, 0, 0, 0, 4, 1, 0],
            [0, 1, 1, 2, 3, 3, 1, 2, 2, 0],
            [0, 1, 2, 3, 4, 3, 3, 4, 3, 0]
        ],
        chip_types: 4,
        moves: 50,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_DIRT",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.LEVEL_9 = {
        form: [
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]
        ],
        dirt: [
            [0, 2, 0, 0, 0, 0, 0, 0, 2, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 2, 0, 0, 0, 0, 0, 0, 2, 0]
        ],
        chips: [
            [0, 3, -1, 1, 2, 4, 1, -1, 1, 0],
            [0, -1, -1, 4, 2, 2, 3, -1, -1, 0],
            [0, 1, 3, 1, 3, 4, 3, 1, 3, 0],
            [0, 4, 1, 4, -1, -1, 1, 3, 1, 0],
            [0, 2, 4, 4, -1, -1, 4, 4, 1, 0],
            [0, 3, 1, 3, 2, 2, 3, 2, 2, 0],
            [0, -1, -1, 2, 3, 3, 2, -1, -1, 0],
            [0, 2, -1, 3, 2, 1, 4, -1, 3, 0]
        ],
        chip_types: 4,
        moves: 30,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_DIRT",
        score_goal_count: 0,
        bombProb: 0.1,
        bombCounter: 15
    };
    a.LEVEL_10 = {
        form: [
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]
        ],
        dirt: null,
        chips: [
            [0, 5, 8, 3, 8, 8, 1, 8, 4, 0],
            [0, 4, 3, 5, 2, 3, 1, 2, 3, 0],
            [0, 1, 5, 2, 3, 4, 3, 4, 2, 0],
            [0, 11, 9, 12, 9, 13, 9, 11, 9, 0],
            [0, 9, 12, 9, 14, 9, 15, 9, 11, 0],
            [0, 11, 9, 11, 9, 12, 9, 14, 9, 0],
            [0, 4, 3, 4, 4, 1, 4, 2, 3, 0],
            [0, 4, 3, 4, 1, 5, 2, 5, 1, 0]
        ],
        chip_types: 5,
        moves: 25,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_STRAWBERRY",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.LEVEL_11 = {
        form: [
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 0, 1, 0, 0, 1, 0, 0, 0],
            [0, 0, 0, 1, 0, 0, 1, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        dirt: null,
        chips: [
            [0, 0, 0, 5, 2, 3, 4, 0, 0, 0],
            [0, 0, 8, 5, 4, 2, 3, 8, 0, 0],
            [0, 0, 1, 4, 8, 8, 2, 1, 0, 0],
            [0, 0, 0, 4, 5, 2, 2, 0, 0, 0],
            [0, 0, 0, 12, 5, 4, 16, 0, 0, 0],
            [0, 0, 0, 8, 0, 0, 8, 0, 0, 0],
            [0, 0, 0, 3, 0, 0, 4, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        chip_types: 6,
        moves: 16,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_STRAWBERRY",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.LEVEL_12 = {
        form: [
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 0, 0, 1, 1, 0, 0, 1, 0],
            [0, 1, 0, 0, 1, 1, 0, 0, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        dirt: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 2, 2, 0, 0, 1, 0],
            [0, 1, 0, 0, 2, 2, 0, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        chips: [
            [0, 0, 0, 3, 3, 5, 5, 0, 0, 0],
            [0, 5, 1, 1, 5, 5, 5, 6, 5, 0],
            [0, 4, 0, 0, 4, 4, 0, 0, 3, 0],
            [0, 2, 0, 0, 5, 2, 0, 0, 4, 0],
            [0, 5, 2, 6, 12, 12, 6, 2, 1, 0],
            [0, 4, 3, 6, 2, 3, 3, 5, 1, 0],
            [0, 0, 0, 0, 5, 4, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        chip_types: 6,
        moves: 13,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_DIRT",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.LEVEL_13 = {
        form: [
            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0]
        ],
        dirt: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
            [0, 1, 1, 1, 0, 0, 1, 1, 1, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0]
        ],
        chips: [
            [0, 0, 0, 0, 1, 5, 0, 0, 0, 0],
            [0, 0, 0, 2, 4, 2, 2, 0, 0, 0],
            [0, 4, 3, 4, 2, 1, 3, 4, 4, 0],
            [0, -1, 4, 5, -1, -1, 5, 4, -1, 0],
            [0, 2, 4, 5, 5, 2, 1, 2, 3, 0],
            [0, 0, 0, 2, 2, 1, 2, 0, 0, 0],
            [0, 0, 0, 0, 2, 2, 0, 0, 0, 0],
            [0, 0, 0, 0, 2, 1, 0, 0, 0, 0]
        ],
        chip_types: 5,
        moves: 15,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_DIRT",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.LEVEL_14 = {
        form: [
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 0, 0, 1, 1, 0, 0, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        dirt: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 1, 2, 2, 1, 1, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        chips: [
            [0, 1, 1, 3, 2, 2, 4, 3, 2, 0],
            [0, 3, 2, 1, 5, 5, 3, 2, 5, 0],
            [0, 11, 0, 0, 13, 11, 0, 0, 15, 0],
            [0, 4, 2, 2, 4, 1, 3, 5, 1, 0],
            [0, 5, 1, 4, 2, 2, 4, 1, 3, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 3, 5, 1, 3, 5, 4, 4, 5, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        chip_types: 4,
        moves: 25,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_DIRT",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 1
    };
    a.LEVEL_15 = {
        form: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 0, 1, 1, 0, 0],
            [0, 0, 1, 1, 0, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        dirt: null,
        chips: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 2, 4, 2, 1, 1, 5, 0, 0],
            [0, 0, 3, 1, 5, 3, 3, 4, 0, 0],
            [0, 0, 5, 3, 2, 0, 3, 2, 0, 0],
            [0, 0, 4, 3, 0, 2, 1, 1, 0, 0],
            [0, 0, 2, 2, 5, 3, 5, 2, 0, 0],
            [0, 0, 4, 4, 2, 2, 5, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        chip_types: 5,
        moves: 30,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_SCORE",
        score_goal_count: 13500,
        bombProb: 0.1,
        bombCounter: 10
    };
    a.LEVEL_16 = {
        form: [
            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 1, 0, 1, 1, 1, 1, 0, 1, 0],
            [0, 1, 0, 1, 1, 1, 1, 0, 1, 0],
            [0, 1, 0, 1, 1, 1, 1, 0, 1, 0],
            [0, 1, 0, 1, 1, 1, 1, 0, 1, 0],
            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0]
        ],
        dirt: null,
        chips: [
            [0, 0, 0, 0, 8, 8, 0, 0, 0, 0],
            [0, 0, 2, 8, 2, 3, 8, 2, 0, 0],
            [0, 0, 2, 3, 1, 4, 1, 2, 0, 0],
            [0, 8, 0, 2, 1, 2, 1, 0, 8, 0],
            [0, 3, 0, 14, 14, 11, 12, 0, 4, 0],
            [0, 2, 0, 1, 4, 3, 3, 0, 4, 0],
            [0, 4, 0, 2, 1, 4, 2, 0, 2, 0],
            [0, 0, 0, 0, 4, 1, 0, 0, 0, 0]
        ],
        chip_types: 4,
        moves: 30,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 20,
        goal: "GOAL_STRAWBERRY",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.LEVEL_17 = {
        form: [
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0]
        ],
        dirt: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
            [0, 1, 1, 0, 2, 2, 0, 1, 1, 0],
            [0, 0, 0, 0, 2, 2, 0, 0, 0, 0],
            [0, 0, 1, 2, 2, 2, 2, 1, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0]
        ],
        chips: [
            [0, 0, 0, 4, 5, 3, 3, 0, 0, 0],
            [0, 0, 1, 4, 1, 5, 5, 3, 0, 0],
            [0, 0, 0, 2, 3, 5, 4, 0, 0, 0],
            [0, 3, 5, 5, 2, 4, 2, 2, 3, 0],
            [0, 0, 0, 3, 1, 1, 2, 0, 0, 0],
            [0, 0, 4, 4, 3, 4, 4, 4, 0, 0],
            [0, 0, 0, 1, 1, 3, 3, 0, 0, 0],
            [0, 0, 0, 2, 2, 4, 1, 0, 0, 0]
        ],
        chip_types: 5,
        moves: 30,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_DIRT",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.LEVEL_18 = {
        form: [
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        dirt: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 1, 0, 0, 1, 0, 0, 0],
            [0, 0, 1, 0, 2, 2, 0, 1, 0, 0],
            [0, 0, 1, 2, 0, 0, 2, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
            [0, 1, 0, 1, 1, 1, 1, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        chips: [
            [0, 0, 1, 5, 1, 2, 3, 2, 0, 0],
            [0, 0, 3, 3, 9, 9, 2, 2, 0, 0],
            [0, 0, 1, 3, 15, 15, 3, 4, 0, 0],
            [0, 0, 13, 9, 9, 9, 9, 15, 0, 0],
            [0, 9, 9, 9, 14, 11, 9, 9, 9, 0],
            [0, 9, 15, 9, 9, 9, 9, 11, 9, 0],
            [0, 5, 9, 3, 5, 3, 3, 9, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        chip_types: 5,
        moves: 0,
        time: 110,
        chip_goal: 0,
        chip_goal_count: 0,
        goal: "GOAL_DIRT",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.LEVEL_19 = {
        form: [
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0]
        ],
        dirt: null,
        chips: [
            [0, -1, 8, 9, 8, 8, 9, 8, -1, 0],
            [0, 0, 11, 12, 2, 3, 12, 11, 0, 0],
            [0, -1, 1, 9, 1, 1, 9, 4, -1, 0],
            [0, 0, 14, 8, 3, 4, 8, 11, 0, 0],
            [0, -1, 2, 9, 2, 3, 9, 3, -1, 0],
            [0, 0, 11, 11, 0, 0, 13, 12, 0, 0],
            [0, -1, 1, 9, 2, 4, 9, 4, -1, 0],
            [0, 0, 3, 4, 3, 2, 4, 1, 0, 0]
        ],
        chip_types: 4,
        moves: 27,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_STRAWBERRY",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.LEVEL_20 = {
        form: [
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 0, 1, 1, 1, 1, 0, 1, 0],
            [0, 1, 0, 1, 1, 1, 1, 0, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        dirt: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 0, 1, 1, 1, 1, 0, 1, 0],
            [0, 1, 0, 1, 1, 1, 1, 0, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        chips: [
            [0, 3, 5, 3, 1, 2, 3, 3, 5, 0],
            [0, 9, 4, 9, 2, 9, 2, 9, 1, 0],
            [0, 4, 9, 4, 9, 5, 9, 4, 9, 0],
            [0, 2, 0, 4, 2, 5, 1, 0, 1, 0],
            [0, 3, 0, 5, 3, 4, 2, 0, 1, 0],
            [0, 4, 3, 5, 3, 2, 5, 1, 5, 0],
            [0, 5, 3, 1, 5, 4, 4, 5, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        chip_types: 5,
        moves: 23,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_DIRT",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.LEVEL_21 = {
        form: [
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]
        ],
        dirt: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 2, 2, 2, 2, 1, 1, 0],
            [0, 1, 1, 2, 2, 2, 2, 1, 1, 0]
        ],
        chips: [
            [0, 2, 1, 2, 3, 4, 3, 1, 3, 0],
            [0, 0, 0, 4, 1, 4, 4, 0, 0, 0],
            [0, 0, 0, 11, 12, 11, 14, 0, 0, 0],
            [0, 3, 5, 3, 4, 2, 1, 1, 4, 0],
            [0, 4, 4, 12, 11, 12, 12, 4, 3, 0],
            [0, 0, 0, 0, 3, 1, 0, 0, 0, 0],
            [0, 3, 1, 12, 11, 13, 12, 4, 2, 0],
            [0, 2, 1, 2, 3, 4, 3, 1, 3, 0]
        ],
        chip_types: 4,
        moves: 0,
        time: 170,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_DIRT",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.LEVEL_22 = {
        form: [
            [0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
            [0, 1, 1, 1, 0, 0, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        dirt: null,
        chips: [
            [0, 0, 8, 0, 0, 0, 0, 8, 0, 0],
            [0, 2, 3, 3, 0, 0, 3, 4, 2, 0],
            [0, 8, 1, 1, 3, 3, 2, 1, 8, 0],
            [0, 9, 9, 9, 12, 13, 9, 9, 9, 0],
            [0, 0, 12, 9, 9, 9, 9, 13, 0, 0],
            [0, 0, 2, 1, 13, 12, 1, 4, 0, 0],
            [0, 0, 0, 0, 2, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        chip_types: 4,
        moves: 0,
        time: 70,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_STRAWBERRY",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.LEVEL_23 = {
        form: [
            [0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 1, 1, 0, 1, 1, 0, 1, 1, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 1, 1, 0, 0, 0, 0, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        dirt: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 1, 0, 1, 1, 0, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        chips: [
            [0, 0, 1, 0, 0, 0, 0, 4, 0, 0],
            [0, 0, 4, 3, 2, 1, 4, 5, 0, 0],
            [0, 4, 4, 0, 2, 4, 0, 4, 4, 0],
            [0, 0, 3, 1, 4, 2, 4, 1, 0, 0],
            [0, 0, 1, 3, 4, 2, 2, 5, 0, 0],
            [0, 4, 4, 0, 0, 0, 0, 4, 3, 0],
            [0, 2, 1, 3, 4, 4, 3, 2, 2, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        chip_types: 4,
        moves: 30,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_DIRT",
        score_goal_count: 0,
        bombProb: 0.1,
        bombCounter: 10
    };
    a.LEVEL_24 = {
        form: [
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 0, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 0, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 0, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 0, 1, 1, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 1, 1, 1, 0, 0, 0, 0],
            [0, 1, 1, 1, 1, 1, 0, 0, 0, 0]
        ],
        dirt: [
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 0, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 0, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 0, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 0, 1, 1, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 1, 1, 1, 0, 0, 0, 0],
            [0, 1, 1, 1, 1, 1, 0, 0, 0, 0]
        ],
        chips: [
            [0, 2, 4, 5, 4, 5, 3, 3, 1, 0],
            [0, 3, 2, 1, 3, 2, 0, 4, 2, 0],
            [0, 4, 2, 1, 2, 1, 0, 1, 3, 0],
            [0, 3, 4, 3, 4, 1, 0, 1, 2, 0],
            [0, 1, 1, 2, 1, 4, 0, 4, 3, 0],
            [0, 12, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 4, 3, 1, 2, 3, 0, 0, 0, 0],
            [0, 2, 3, 3, 2, 4, 0, 0, 0, 0]
        ],
        chip_types: 4,
        moves: 32,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_DIRT",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.LEVEL_25 = {
        form: [
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]
        ],
        dirt: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]
        ],
        chips: [
            [0, 1, 2, 3, 2, 2, 5, 3, 4, 0],
            [0, 1, 5, 3, 5, 5, 1, 1, 3, 0],
            [0, 15, 14, 12, 14, 12, 15, 11, 11, 0],
            [0, 9, 9, 9, 9, 9, 9, 9, 9, 0],
            [0, 9, 9, 9, 9, 9, 9, 9, 9, 0],
            [0, 11, 11, 12, 14, 11, 12, 14, 11, 0],
            [0, 4, 5, 3, 4, 4, 3, 5, 3, 0],
            [0, 1, 2, 1, 5, 4, 5, 2, 4, 0]
        ],
        chip_types: 5,
        moves: 30,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_DIRT",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.LEVEL_26 = {
        form: [
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]
        ],
        dirt: null,
        chips: [
            [0, 8, 8, 3, 8, 8, 1, 8, 8, 0],
            [0, 0, 3, 5, 3, 4, 4, 3, 0, 0],
            [0, 0, 0, 2, 1, 2, 2, 0, 0, 0],
            [0, 0, 9, 9, 9, 9, 9, 9, 0, 0],
            [0, 0, 9, 9, 9, 9, 9, 9, 0, 0],
            [0, 0, 0, 9, 5, 5, 9, 0, 0, 0],
            [0, 0, 9, 4, 1, 3, 5, 9, 0, 0],
            [0, 9, 5, 1, 4, 2, 3, 1, 9, 0]
        ],
        chip_types: 5,
        moves: 20,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_STRAWBERRY",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.LEVEL_27 = {
        form: [
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0]
        ],
        dirt: null,
        chips: [
            [0, 0, 8, 8, 8, 8, 8, 8, 0, 0],
            [0, 1, 1, 4, 4, 5, 3, 1, 3, 0],
            [0, 4, 5, 1, 2, 5, 4, 3, 5, 0],
            [0, 3, 5, 3, 4, 3, 3, 4, 4, 0],
            [0, 2, 4, 1, 3, 2, 4, 3, 2, 0],
            [0, 0, 1, 5, 1, 5, 1, 4, 0, 0],
            [0, 0, 12, -1, 11, -1, 14, -1, 0, 0],
            [0, 0, 1, 2, 2, 5, 2, 4, 0, 0]
        ],
        chip_types: 5,
        moves: 0,
        time: 180,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_STRAWBERRY",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.LEVEL_28 = {
        form: [
            [0, 1, 1, 1, 0, 0, 1, 1, 1, 0],
            [0, 1, 1, 1, 0, 0, 1, 1, 1, 0],
            [0, 1, 1, 1, 0, 0, 1, 1, 1, 0],
            [0, 1, 1, 1, 0, 0, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]
        ],
        dirt: null,
        chips: [
            [0, 1, 5, 4, 0, 0, 2, 3, 4, 0],
            [0, 3, 5, 2, 0, 0, 5, 4, 2, 0],
            [0, 4, 3, 2, 0, 0, 1, 3, 1, 0],
            [0, 2, 4, 1, 0, 0, 1, 4, 4, 0],
            [0, 4, 5, 5, 1, 4, 4, 3, 4, 0],
            [0, 0, 4, 5, 4, 3, 2, 4, 0, 0],
            [0, 0, 0, 9, 9, 9, 9, 0, 0, 0],
            [0, 5, 2, 2, 3, 5, 5, 4, 2, 0]
        ],
        chip_types: 5,
        moves: 0,
        time: 75,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_SCORE",
        score_goal_count: 15000,
        bombProb: 0,
        bombCounter: 10
    };
    a.LEVEL_29 = {
        form: [
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 0, 1, 1, 0, 1, 1, 0],
            [0, 1, 0, 0, 1, 1, 0, 0, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 0, 0, 1, 1, 0, 0, 1, 0],
            [0, 1, 1, 0, 1, 1, 0, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]
        ],
        dirt: null,
        chips: [
            [0, 1, 8, 2, 8, 8, 2, 8, 2, 0],
            [0, 1, 1, 0, 2, 4, 0, 4, 4, 0],
            [0, 2, 0, 0, 4, 1, 0, 0, 4, 0],
            [0, 4, 3, 1, 1, 2, 2, 1, 2, 0],
            [0, 2, 3, 2, 1, 3, 2, 3, 2, 0],
            [0, 3, 0, 0, 3, 4, 0, 0, 4, 0],
            [0, 1, 4, 0, 3, 1, 0, 2, 3, 0],
            [0, 3, 4, 4, 1, 2, 1, 3, 1, 0]
        ],
        chip_types: 4,
        moves: 15,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_STRAWBERRY",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.LEVEL_30 = {
        form: [
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]
        ],
        dirt: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 2, 0, 0, 0, 0, 0, 0, 2, 0],
            [0, 2, 0, 0, 0, 0, 0, 0, 2, 0]
        ],
        chips: [
            [0, 2, 3, 1, 2, 2, 1, 3, 4, 0],
            [0, 2, 1, 1, 3, 2, 2, 3, 3, 0],
            [0, 4, 2, 2, 4, 1, 4, 2, 1, 0],
            [0, 3, 1, 1, 4, 1, 1, 3, 4, 0],
            [0, 4, 2, 4, 1, 3, 4, 1, 3, 0],
            [0, 0, 0, 12, 14, 11, 13, 0, 0, 0],
            [0, 11, -1, -1, -1, -1, -1, -1, 12, 0],
            [0, 13, -1, -1, -1, -1, -1, -1, 11, 0]
        ],
        chip_types: 4,
        moves: 30,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_DIRT",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.LEVEL_31 = {
        form: [
            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0]
        ],
        dirt: [
            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0]
        ],
        chips: [
            [0, 3, 0, 0, 0, 0, 0, 0, 2, 0],
            [0, 0, 3, 4, 1, 2, 1, 3, 0, 0],
            [0, 0, 1, 1, 2, 3, 1, 2, 0, 0],
            [0, 0, 4, 3, 1, 2, 3, 4, 0, 0],
            [0, 0, 2, 2, 4, 4, 3, 3, 0, 0],
            [0, 0, 4, 1, 4, 2, 1, 2, 0, 0],
            [0, 0, 3, 4, 3, 1, 2, 2, 0, 0],
            [0, 2, 0, 0, 0, 0, 0, 0, 3, 0]
        ],
        chip_types: 4,
        moves: 20,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_DIRT",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.LEVEL_32 = {
        form: [
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 0, 0, 1, 1, 1, 0],
            [0, 1, 1, 0, 1, 1, 0, 1, 1, 0],
            [0, 1, 1, 0, 1, 1, 0, 1, 1, 0],
            [0, 1, 1, 1, 0, 0, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]
        ],
        dirt: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        chips: [
            [0, 2, 4, 4, 1, 1, 4, 4, 2, 0],
            [0, 1, 1, 2, 2, 3, 3, 2, 4, 0],
            [0, 1, 3, 1, 0, 0, 2, 2, 4, 0],
            [0, -1, -1, 0, 3, 2, 0, -1, -1, 0],
            [0, -1, -1, 0, 1, 1, 0, -1, -1, 0],
            [0, 1, 4, 3, 0, 0, 4, 3, 3, 0],
            [0, 3, 4, 1, 4, 2, 3, 4, 2, 0],
            [0, 1, 2, 4, 1, 1, 4, 2, 4, 0]
        ],
        chip_types: 4,
        moves: 13,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_DIRT",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.LEVEL_33 = {
        form: [
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 0, 1, 0, 0, 1, 0, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]
        ],
        dirt: null,
        chips: [
            [0, 1, 8, 1, 8, 8, 2, 8, 1, 0],
            [0, 1, 1, 3, 3, 1, 2, 2, 4, 0],
            [0, 2, 3, 2, 4, 2, 4, 4, 3, 0],
            [0, 4, 1, 3, 1, 1, 2, 1, 4, 0],
            [0, 2, 2, 4, 2, 4, 1, 4, 3, 0],
            [0, 3, 1, 3, 1, 1, 4, 2, 2, 0],
            [0, 9, 0, 9, 0, 0, 9, 0, 9, 0],
            [0, 1, 13, 3, 12, 14, 3, 11, 2, 0]
        ],
        chip_types: 4,
        moves: 15,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_STRAWBERRY",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.LEVEL_34 = {
        form: [
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]
        ],
        dirt: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0]
        ],
        chips: [
            [0, 1, 1, 4, 2, 4, 3, 1, 3, 0],
            [0, 5, 2, 1, 5, 3, 5, 4, 3, 0],
            [0, 4, 3, 5, 4, 4, 1, 2, 1, 0],
            [0, 1, 4, 1, 12, 12, 3, 1, 3, 0],
            [0, 2, 1, 14, 14, 15, 14, 3, 2, 0],
            [0, 4, 12, 13, 5, 3, 12, 11, 4, 0],
            [0, 15, 13, 4, 2, 4, 1, 15, 13, 0],
            [0, 12, 4, 1, 3, 4, 5, 3, 13, 0]
        ],
        chip_types: 5,
        moves: 13,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_DIRT",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.LEVEL_35 = {
        form: [
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]
        ],
        dirt: null,
        chips: [
            [0, -1, 14, 8, 8, 8, 8, 14, -1, 0],
            [0, -1, 11, 4, 1, 1, 2, 13, -1, 0],
            [0, -1, 13, 4, 3, 3, 2, 11, -1, 0],
            [0, -1, 14, 2, 2, 1, 4, 13, -1, 0],
            [0, -1, 12, 2, 1, 4, 1, 13, -1, 0],
            [0, -1, 11, 1, 3, 2, 1, 11, -1, 0],
            [0, -1, 14, 4, 1, 1, 2, 13, -1, 0],
            [0, -1, 13, 4, 2, 1, 4, 12, -1, 0]
        ],
        chip_types: 4,
        moves: 12,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_STRAWBERRY",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.LEVEL_36 = {
        form: [
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]
        ],
        dirt: [
            [0, 0, 2, 1, 2, 1, 2, 1, 0, 0],
            [0, 0, 1, 2, 1, 2, 1, 2, 0, 0],
            [0, 0, 2, 1, 2, 1, 2, 1, 0, 0],
            [0, 0, 1, 2, 1, 2, 1, 2, 0, 0],
            [0, 0, 2, 1, 2, 1, 2, 1, 0, 0],
            [0, 0, 1, 2, 1, 2, 1, 2, 0, 0],
            [0, 0, 2, 1, 2, 1, 2, 1, 0, 0],
            [0, 0, 1, 2, 1, 2, 1, 2, 0, 0]
        ],
        chips: [
            [0, 0, 2, 4, 3, 4, 4, 3, 0, 0],
            [0, -1, 1, 3, 5, 1, 1, 3, -1, 0],
            [0, 0, 4, 1, 1, 3, 3, 4, 0, 0],
            [0, -1, 1, 2, 1, 3, 3, 1, -1, 0],
            [0, 0, 5, 4, 4, 5, 1, 5, 0, 0],
            [0, -1, 2, 1, 3, 2, 4, 3, -1, 0],
            [0, 0, 1, 5, 5, 2, 3, 1, 0, 0],
            [0, -1, 1, 5, 4, 5, 1, 1, -1, 0]
        ],
        chip_types: 5,
        moves: 20,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_DIRT",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.LEVEL_37 = {
        form: [
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]
        ],
        dirt: [
            [0, 0, 0, 0, 2, 2, 0, 0, 0, 0],
            [0, 0, 0, 0, 2, 2, 0, 0, 0, 0],
            [0, 0, 0, 0, 2, 2, 0, 0, 0, 0],
            [0, 0, 0, 0, 2, 2, 0, 0, 0, 0],
            [0, 0, 0, 0, 2, 2, 0, 0, 0, 0],
            [0, 0, 0, 0, 2, 2, 0, 0, 0, 0],
            [0, 0, 0, 0, 2, 2, 0, 0, 0, 0],
            [0, 0, 0, 0, 2, 2, 0, 0, 0, 0]
        ],
        chips: [
            [0, 3, 3, 9, 11, 12, 9, 1, 3, 0],
            [0, 3, 4, 9, 12, 13, 9, 2, 4, 0],
            [0, 4, 3, 9, 13, 14, 9, 2, 3, 0],
            [0, 1, 4, 9, 14, 11, 9, 4, 4, 0],
            [0, 2, 2, 9, 12, 12, 9, 4, 2, 0],
            [0, 2, 1, 9, 13, 11, 9, 3, 3, 0],
            [0, 3, 4, 9, 12, 13, 9, 1, 3, 0],
            [0, 4, 2, 9, 13, 14, 9, 3, 2, 0]
        ],
        chip_types: 4,
        moves: 15,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_DIRT",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.LEVEL_38 = {
        form: [
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 1, 1, 1, 1, 1, 1, 0, 1, 0],
            [0, 1, 1, 1, 1, 1, 0, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 1, 1, 1, 0]
        ],
        dirt: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 1, 1, 0],
            [0, 0, 0, 0, 0, 0, 1, 1, 1, 0]
        ],
        chips: [
            [0, 1, 4, 2, 3, 1, 3, 1, 4, 0],
            [0, 4, 2, 3, 2, 3, 2, 2, 3, 0],
            [0, 1, 4, 2, 1, 1, 4, 1, 4, 0],
            [0, 3, 3, 2, 3, 3, 2, 1, 1, 0],
            [0, 2, 4, 4, 1, 4, 4, 2, 0, 0],
            [0, 1, 3, 3, 4, 3, 4, 0, 12, 0],
            [0, 2, 2, 4, 3, 1, 0, 11, 14, 0],
            [0, 3, 1, 4, 4, 0, 11, 11, 13, 0]
        ],
        chip_types: 4,
        moves: 25,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_DIRT",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.LEVEL_FIRST = {
        form: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        dirt: null,
        chips: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 4, 3, 4, 2, 0, 0, 0],
            [0, 0, 2, 2, 1, 3, 4, 1, 0, 0],
            [0, 0, 3, 4, 2, 3, 2, 2, 0, 0],
            [0, 0, 4, 1, 4, 4, 1, 4, 0, 0],
            [0, 0, 2, 1, 1, 3, 3, 2, 0, 0],
            [0, 0, 0, 3, 2, 4, 2, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        chip_types: 4,
        moves: 30,
        time: 0,
        chip_goal: 2,
        chip_goal_count: 12,
        goal: "GOAL_COUNT",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.LEVEL_SECOND = {
        form: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        dirt: null,
        chips: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 1, 4, 2, 1, 5, 4, 0, 0],
            [0, 1, 1, 4, 2, 5, 2, 3, 2, 0],
            [0, 1, 2, 2, 3, 1, 5, 1, 5, 0],
            [0, 5, 5, 1, 2, 5, 1, 2, 4, 0],
            [0, 3, 2, 4, 4, 1, 3, 5, 4, 0],
            [0, 0, 4, 5, 3, 1, 5, 4, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        chip_types: 5,
        moves: 35,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_SCORE",
        score_goal_count: 9000,
        bombProb: 0,
        bombCounter: 10
    };
    a.BOMBS_AN_TIME = {
        form: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        dirt: null,
        chips: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 2, 4, 3, 4, 2, 2, 0, 0],
            [0, 0, 2, 2, 1, 3, 4, 1, 0, 0],
            [0, 0, 3, 4, 2, 3, 2, 2, 0, 0],
            [0, 0, 4, 1, 4, 4, 1, 4, 0, 0],
            [0, 0, 2, 1, 1, 3, 3, 2, 0, 0],
            [0, 0, 2, 3, 2, 4, 2, 2, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        chip_types: 5,
        moves: 0,
        time: 100,
        chip_goal: 1,
        chip_goal_count: 20,
        goal: "GOAL_COUNT",
        score_goal_count: 0,
        bombProb: 0.2,
        bombCounter: 10
    };
    a.SCORE_AND_TIME = {
        form: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]
        ],
        dirt: null,
        chips: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 5, 3, 3, 4, 3, 2, 4, 5, 0],
            [0, 1, 2, 9, 9, 9, 9, 3, 1, 0],
            [0, 3, 2, 9, 9, 9, 9, 4, 3, 0],
            [0, 1, 4, 9, 9, 9, 9, 4, 1, 0],
            [0, 3, 2, 9, 9, 9, 9, 1, 5, 0],
            [0, 9, 9, 9, 9, 9, 9, 9, 9, 0],
            [0, 9, 9, 9, 9, 9, 9, 9, 9, 0]
        ],
        chip_types: 5,
        moves: 0,
        time: 160,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_SCORE",
        score_goal_count: 35000,
        bombProb: 0,
        bombCounter: 10
    };
    a.JUST_SCORE_HARD = {
        form: [
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]
        ],
        dirt: null,
        chips: [
            [0, 4, 5, 5, 2, 7, 2, 7, 3, 0],
            [0, 0, 3, 3, 4, 7, 7, 6, 0, 0],
            [0, 0, 1, 2, 4, 4, 6, 6, 0, 0],
            [0, 0, 1, 7, 3, 7, 7, 5, 0, 0],
            [0, 0, 2, 2, 7, 6, 2, 5, 0, 0],
            [0, 0, 6, 4, 7, 3, 4, 2, 0, 0],
            [0, 0, 4, 7, 2, 6, 2, 2, 0, 0],
            [0, 7, 3, 6, 6, 3, 7, 1, 5, 0]
        ],
        chip_types: 7,
        moves: 0,
        time: 120,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_SCORE",
        score_goal_count: 16000,
        bombProb: 0,
        bombCounter: 10
    };
    a.FUN_CHOCO_HARD = {
        form: [
            [0, 0, 1, 1, 1, 1, 1, 0, 1, 0],
            [0, 0, 1, 1, 1, 1, 1, 0, 1, 0],
            [0, 0, 1, 1, 1, 1, 1, 0, 1, 0],
            [0, 0, 1, 1, 1, 1, 1, 0, 1, 0],
            [0, 0, 1, 1, 1, 1, 1, 0, 1, 0],
            [0, 0, 1, 1, 1, 1, 1, 0, 1, 0],
            [0, 0, 1, 1, 1, 1, 1, 0, 1, 0],
            [0, 0, 1, 1, 1, 1, 1, 0, 1, 0]
        ],
        dirt: null,
        chips: [
            [0, 0, 5, 4, 3, 5, 3, 0, 8, 0],
            [0, 0, 4, 5, 5, 4, 5, 0, 1, 0],
            [0, 0, 5, 4, 4, 1, 1, 0, 2, 0],
            [0, 0, 1, 2, 2, 4, 1, 0, 3, 0],
            [0, 0, -1, -1, -1, -1, -1, 0, 5, 0],
            [0, 0, -1, -1, -1, -1, -1, 0, 3, 0],
            [0, 0, -1, -1, -1, -1, -1, 0, 1, 0],
            [0, 0, -1, -1, -1, -1, -1, 0, 1, 0]
        ],
        chip_types: 5,
        moves: 40,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_STRAWBERRY",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.MIDDLE_FUN = {
        form: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0]
        ],
        dirt: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 2, 2, 2, 2, 2, 2, 0, 0]
        ],
        chips: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 6, 2, 6, 2, 2, 6, 0, 0],
            [0, 0, 5, 6, 6, 1, 2, 5, 0, 0],
            [0, 0, 5, 3, 1, 3, 5, 4, 0, 0],
            [0, 0, 3, 6, 1, 1, 6, 4, 0, 0],
            [0, 0, 5, 3, 14, 14, 5, 2, 0, 0],
            [0, 0, 6, 16, 15, 16, 15, 5, 0, 0],
            [0, 0, 12, 13, 12, 11, 16, 14, 0, 0]
        ],
        chip_types: 6,
        moves: 35,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_DIRT",
        score_goal_count: 0,
        bombProb: 0.1,
        bombCounter: 10
    };
    a.CHOCO_EDU = {
        form: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        dirt: null,
        chips: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 8, 3, 5, 2, 2, 8, 0, 0],
            [0, 0, 1, 4, 1, 3, 5, 1, 0, 0],
            [0, 0, -1, 1, 2, 2, 1, -1, 0, 0],
            [0, 0, -1, 1, 3, 5, 2, -1, 0, 0],
            [0, 0, -1, 5, 2, 4, 4, -1, 0, 0],
            [0, 0, -1, 3, 2, 5, 2, -1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        chip_types: 5,
        moves: 45,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_STRAWBERRY",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.BOMBS_EDU = {
        form: [
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0]
        ],
        dirt: null,
        chips: [
            [0, 5, 6, 5, 6, 5, 6, 6, 5, 0],
            [0, 2, 5, 2, 3, 3, 5, 1, 6, 0],
            [0, 4, 2, 3, 4, 3, 3, 1, 5, 0],
            [0, 6, 4, 1, 6, 1, 6, 5, 5, 0],
            [0, 3, 6, 4, 3, 5, 2, 3, 3, 0],
            [0, 0, 1, 4, 6, 3, 3, 1, 0, 0],
            [0, 0, 6, 3, 4, 6, 5, 2, 0, 0],
            [0, 0, 0, 6, 5, 1, 4, 0, 0, 0]
        ],
        chip_types: 6,
        moves: 40,
        time: 0,
        chip_goal: 4,
        chip_goal_count: 25,
        goal: "GOAL_COUNT",
        score_goal_count: 0,
        bombProb: 0.18,
        bombCounter: 9
    };
    a.CLEAR_FOR_TIME = {
        form: [
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]
        ],
        dirt: [
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]
        ],
        chips: [
            [0, 2, 2, 3, 1, 2, 1, 5, 3, 0],
            [0, 5, 5, 1, 5, 3, 5, 4, 1, 0],
            [0, 0, 3, 2, 4, 2, 1, 1, 0, 0],
            [0, 0, 2, 0, 0, 0, 0, 2, 0, 0],
            [0, 0, 2, 0, 0, 0, 0, 2, 0, 0],
            [0, 0, 5, 4, 2, 2, 4, 4, 0, 0],
            [0, 5, 2, 1, 3, 5, 5, 2, 2, 0],
            [0, 2, 3, 2, 5, 4, 1, 4, 1, 0]
        ],
        chip_types: 5,
        moves: 0,
        time: 160,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_DIRT",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.STRAWBERRY_EDU = {
        form: [
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]
        ],
        dirt: null,
        chips: [
            [0, 8, 8, 1, 1, 4, 3, 8, 8, 0],
            [0, 1, 2, 2, 5, 4, 2, 4, 5, 0],
            [0, 2, 5, 3, 2, 2, 1, 2, 1, 0],
            [0, 1, 3, 4, 5, 4, 2, 2, 4, 0],
            [0, 3, 2, 3, 2, 1, 5, 1, 3, 0],
            [0, 1, 1, 3, 5, 5, 1, 5, 4, 0],
            [0, 1, 3, 1, 2, 1, 5, 3, 3, 0],
            [0, 3, 3, 1, 4, 2, 1, 3, 1, 0]
        ],
        chip_types: 5,
        moves: 45,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_STRAWBERRY",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.STONE_EDU = {
        form: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]
        ],
        dirt: null,
        chips: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 3, 5, 4, 1, 4, 1, 2, 3, 0],
            [0, 4, 3, 5, 5, 1, 2, 5, 2, 0],
            [0, 5, 5, 4, 2, 4, 1, 4, 5, 0],
            [0, 9, 9, 9, 9, 9, 9, 9, 9, 0],
            [0, 9, 9, 9, 9, 9, 9, 9, 9, 0],
            [0, 8, 8, 9, 9, 9, 9, 8, 8, 0],
            [0, 1, 5, 9, 9, 9, 9, 1, 5, 0]
        ],
        chip_types: 5,
        moves: 30,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_STRAWBERRY",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.CLEAR_EDU = {
        form: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        dirt: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        chips: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 2, 4, 2, 4, 5, 4, 2, 0],
            [0, 1, 3, 4, 4, 2, 4, 2, 3, 0],
            [0, 3, 3, 5, 4, 1, 2, 4, 4, 0],
            [0, 4, 1, 3, 5, 2, 4, 3, 5, 0],
            [0, 3, 2, 1, 4, 1, 4, 1, 4, 0],
            [0, 3, 1, 5, 4, 3, 3, 2, 4, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        chip_types: 5,
        moves: 25,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_DIRT",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.CLEAR_SIMPLE = {
        form: [
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
            [0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0]
        ],
        dirt: [
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 0, 1, 0, 0, 1, 0, 0, 0],
            [0, 0, 0, 1, 0, 0, 1, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0]
        ],
        chips: [
            [0, 0, 3, 1, 4, 4, 5, 5, 0, 0],
            [0, 0, 2, 2, 5, 1, 3, 2, 0, 0],
            [0, 0, 2, 1, 4, 1, 4, 3, 0, 0],
            [0, 0, 5, 5, 0, 0, 3, 5, 0, 0],
            [0, 0, 2, 3, 0, 0, 4, 1, 0, 0],
            [0, 0, 3, 5, 3, 2, 5, 2, 0, 0],
            [0, 0, 5, 2, 5, 2, 4, 5, 0, 0],
            [0, 0, 4, 2, 4, 3, 4, 5, 0, 0]
        ],
        chip_types: 5,
        moves: 35,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_DIRT",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.JUST_SIMPLE = {
        form: [
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 0, 0, 0, 0, 1, 1, 0],
            [0, 1, 1, 0, 0, 0, 0, 1, 1, 0],
            [0, 1, 1, 0, 0, 0, 0, 1, 1, 0],
            [0, 1, 1, 0, 0, 0, 0, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]
        ],
        dirt: null,
        chips: [
            [0, 1, 1, 5, 5, 3, 2, 3, 3, 0],
            [0, 2, 2, 4, 5, 3, 3, 1, 2, 0],
            [0, 4, 5, 0, 0, 0, 0, 5, 5, 0],
            [0, 4, 2, 0, 0, 0, 0, 5, 3, 0],
            [0, 5, 4, 0, 0, 0, 0, 2, 2, 0],
            [0, 5, 2, 0, 0, 0, 0, 3, 4, 0],
            [0, 1, 5, 3, 3, 1, 5, 2, 4, 0],
            [0, 5, 4, 1, 3, 4, 1, 4, 1, 0]
        ],
        chip_types: 5,
        moves: 35,
        time: 0,
        chip_goal: 5,
        chip_goal_count: 20,
        goal: "GOAL_COUNT",
        score_goal_count: 0,
        bombProb: 0.04,
        bombCounter: 10
    };
    a.ALL_BUT_SIMPLE = {
        form: [
            [0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 0, 0, 1, 1, 0, 0]
        ],
        dirt: null,
        chips: [
            [0, 0, 3, 4, 0, 0, 3, 2, 0, 0],
            [0, 0, 4, 4, 3, 3, 1, 5, 0, 0],
            [0, 0, 4, 3, 5, 5, 3, 1, 0, 0],
            [0, 0, 5, 5, 4, 5, 1, 4, 0, 0],
            [0, 0, -1, -1, -1, -1, -1, -1, 0, 0],
            [0, 0, 14, 14, 11, 15, 12, 12, 0, 0],
            [0, 0, 15, 12, 14, 15, 13, 11, 0, 0],
            [0, 0, 14, 15, 0, 0, 11, 11, 0, 0]
        ],
        chip_types: 5,
        moves: 25,
        time: 0,
        chip_goal: 2,
        chip_goal_count: 20,
        goal: "GOAL_COUNT",
        score_goal_count: 0,
        bombProb: 0.04,
        bombCounter: 10
    };
    a.JUST_MID = {
        form: [
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]
        ],
        dirt: null,
        chips: [
            [0, 1, 8, 8, 8, 8, 8, 8, 1, 0],
            [0, 4, 2, 1, 3, 2, 3, 2, 4, 0],
            [0, 2, 0, 0, 0, 0, 0, 0, 2, 0],
            [0, 1, 4, 1, 4, 4, 2, 4, 4, 0],
            [0, 3, 4, 2, 1, 2, 2, 3, 4, 0],
            [0, 2, 0, 0, 0, 0, 0, 0, 3, 0],
            [0, 4, 3, 3, 1, 1, 4, 4, 2, 0],
            [0, 2, 4, 2, 3, 4, 4, 2, 2, 0]
        ],
        chip_types: 4,
        moves: 0,
        time: 130,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_STRAWBERRY",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.HARD_RAND = {
        form: [
            [0, 1, 1, 0, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 0, 0, 1, 1, 1, 1, 0],
            [0, 0, 0, 0, 0, 1, 1, 1, 1, 0],
            [0, 0, 0, 0, 0, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 0, 0, 0, 0],
            [0, 1, 1, 1, 1, 0, 0, 0, 0, 0],
            [0, 1, 1, 1, 1, 0, 0, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 0, 1, 1, 0]
        ],
        dirt: [
            [0, 1, 1, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 1, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 1, 1, 0]
        ],
        chips: [
            [0, 1, 4, 0, 0, 1, 4, 2, 3, 0],
            [0, 4, 3, 0, 0, 3, 3, 1, 4, 0],
            [0, 0, 0, 0, 0, 4, 2, 3, 1, 0],
            [0, 0, 0, 0, 0, 3, 4, 2, 4, 0],
            [0, 1, 4, 3, 1, 0, 0, 0, 0, 0],
            [0, 4, 3, 1, 2, 0, 0, 0, 0, 0],
            [0, 3, 1, 3, 3, 0, 0, 4, 1, 0],
            [0, 2, 4, 4, 1, 0, 0, 1, 3, 0]
        ],
        chip_types: 4,
        moves: 20,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_DIRT",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.BIT_RANDOM_HARD = {
        form: [
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
            [0, 1, 0, 1, 1, 1, 1, 0, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 0, 1, 1, 1, 1, 0, 1, 0],
            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0]
        ],
        dirt: null,
        chips: [
            [0, 0, 0, 8, 1, 3, 8, 0, 0, 0],
            [0, 0, 0, 0, 1, 3, 0, 0, 0, 0],
            [0, 8, 0, 3, 4, 1, 1, 0, 8, 0],
            [0, 2, 2, 1, 4, 2, 3, 2, 1, 0],
            [0, 4, 5, 4, 1, 1, 4, 4, 3, 0],
            [0, 2, 0, 3, 4, 3, 3, 0, 3, 0],
            [0, 0, 0, 0, 1, 4, 0, 0, 0, 0],
            [0, 0, 0, 1, 1, 4, 3, 0, 0, 0]
        ],
        chip_types: 4,
        moves: 17,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_STRAWBERRY",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.MID = {
        form: [
            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0]
        ],
        dirt: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        chips: [
            [0, 0, 0, 0, 2, 3, 0, 0, 0, 0],
            [0, 0, 0, 0, 3, 2, 0, 0, 0, 0],
            [0, 0, 0, 13, 14, 11, 12, 0, 0, 0],
            [0, 1, 2, 11, 12, 12, 11, 3, 4, 0],
            [0, 4, 1, 12, 11, 13, 14, 4, 3, 0],
            [0, 0, 0, 13, 14, 14, 15, 0, 0, 0],
            [0, 0, 0, 0, 1, 3, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0]
        ],
        chip_types: 4,
        moves: 0,
        time: 150,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_DIRT",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.MID_LOT_OF_BOMBS_BIG_FIELD = {
        form: [
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0]
        ],
        dirt: null,
        chips: [
            [0, 3, 2, 3, 2, 4, 2, 2, 3, 0],
            [0, 3, 5, 2, 6, 6, 3, 5, 5, 0],
            [0, 6, 5, 4, 5, 3, 6, 3, 4, 0],
            [0, 3, 3, 4, 4, 5, 3, 5, 1, 0],
            [0, 6, 2, 2, 3, 3, 6, 1, 6, 0],
            [0, 5, 5, 6, 1, 5, 6, 4, 5, 0],
            [0, 5, 2, 1, 5, 2, 5, 3, 5, 0],
            [0, 2, 5, 1, 3, 5, 1, 5, 2, 0]
        ],
        chip_types: 6,
        moves: 38,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_SCORE",
        score_goal_count: 25000,
        bombProb: 0.1,
        bombCounter: 12
    };
    a.MID_LEVEL = {
        form: [
            [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 0, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 0, 0, 0, 0, 1, 1, 1, 0]
        ],
        dirt: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 2, 2, 2, 0, 0, 0],
            [0, 0, 0, 2, 2, 2, 2, 0, 0, 0],
            [0, 0, 0, 2, 2, 2, 2, 0, 0, 0],
            [0, 0, 0, 2, 2, 2, 0, 0, 0, 0],
            [0, 0, 0, 2, 2, 2, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        chips: [
            [0, 9, 9, 9, 0, 0, 0, 0, 0, 0],
            [0, 9, 9, 9, 0, 0, 0, 0, 0, 0],
            [0, 9, 9, 9, 2, 3, 4, 0, 0, 0],
            [0, 0, 0, 2, 4, 3, 1, 0, 0, 0],
            [0, 0, 0, 1, 4, 4, 2, 0, 0, 0],
            [0, 0, 0, 3, 5, 3, 9, 9, 9, 0],
            [0, 0, 0, 3, 1, 2, 9, 9, 9, 0],
            [0, 0, 0, 0, 0, 0, 9, 9, 9, 0]
        ],
        chip_types: 4,
        moves: 15,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_DIRT",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.CHESS = {
        form: [
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 1, 0, 1, 0, 1, 0, 1, 0],
            [0, 1, 0, 1, 0, 1, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        dirt: [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 1, 0, 1, 0, 1, 0, 1, 0],
            [0, 1, 0, 1, 0, 1, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        chips: [
            [0, 5, 2, 3, 3, 1, 5, 2, 5, 0],
            [0, 5, 2, 2, 4, 2, 5, 3, 1, 0],
            [0, 1, 4, 5, 5, 3, 4, 2, 4, 0],
            [0, 3, 2, 5, 4, 2, 5, 3, 5, 0],
            [0, 4, 1, 1, 3, 1, 3, 3, 1, 0],
            [0, 0, 1, 0, 3, 0, 2, 0, 1, 0],
            [0, 4, 0, 5, 0, 3, 0, 2, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        ],
        chip_types: 5,
        moves: 30,
        time: 0,
        chip_goal: 0,
        chip_goal_count: 1,
        goal: "GOAL_DIRT",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.YELLOW_FOR_TIME = {
        form: [
            [0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 1, 1, 0],
            [0, 1, 1, 1, 1, 1, 1, 1, 0, 0],
            [0, 0, 1, 1, 1, 1, 1, 0, 0, 0],
            [0, 0, 0, 1, 1, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0]
        ],
        dirt: null,
        chips: [
            [0, 0, 0, 0, 0, 2, 0, 0, 0, 0],
            [0, 0, 0, 0, 5, 1, 2, 0, 0, 0],
            [0, 0, 0, 4, 2, 3, 5, 5, 0, 0],
            [0, 0, 2, 4, 1, 5, 3, 2, 3, 0],
            [0, 3, 2, 1, 4, 5, 4, 4, 0, 0],
            [0, 0, 3, 3, 4, 4, 5, 0, 0, 0],
            [0, 0, 0, 3, 2, 2, 0, 0, 0, 0],
            [0, 0, 0, 0, 5, 0, 0, 0, 0, 0]
        ],
        chip_types: 5,
        moves: 0,
        time: 110,
        chip_goal: 5,
        chip_goal_count: 30,
        goal: "GOAL_COUNT",
        score_goal_count: 0,
        bombProb: 0,
        bombCounter: 10
    };
    a.levels = [a.LEVEL_FIRST, a.LEVEL_SECOND, a.CLEAR_EDU, a.CLEAR_SIMPLE, a.JUST_SIMPLE, a.STRAWBERRY_EDU, a.CHOCO_EDU, a.LEVEL_9, a.BOMBS_EDU, a.MID_LOT_OF_BOMBS_BIG_FIELD, a.STONE_EDU, a.BOMBS_AN_TIME, a.LEVEL_8, a.LEVEL_6, a.LEVEL_7, a.LEVEL_29, a.YELLOW_FOR_TIME, a.MID_LEVEL, a.SCORE_AND_TIME, a.MIDDLE_FUN, a.CLEAR_FOR_TIME, a.MID, a.JUST_MID, a.LEVEL_37, a.LEVEL_30, a.LEVEL_1, a.LEVEL_21, a.LEVEL_22, a.LEVEL_23, a.LEVEL_25, a.LEVEL_26, a.LEVEL_18, a.LEVEL_19, a.LEVEL_3, a.LEVEL_5, a.LEVEL_10, a.LEVEL_15, a.LEVEL_16, a.LEVEL_17, a.LEVEL_20, a.LEVEL_27, a.LEVEL_11, a.LEVEL_13, a.LEVEL_28, a.LEVEL_32, a.LEVEL_33, a.LEVEL_34, a.LEVEL_35, a.LEVEL_36, a.LEVEL_4, a.LEVEL_12, a.LEVEL_24, a.LEVEL_38, a.CHESS, a.LEVEL_14, a.LEVEL_31, a.LEVEL_2, a.BIT_RANDOM_HARD, a.FUN_CHOCO_HARD, a.JUST_SCORE_HARD];
    return a
})();
var MapEditorChip = (function(b) {
    __extends(a, b);

    function a(f, d, e) {
        b.call(this);
        this.bonusType = null;
        this.hole = false;
        this.stoneHeart = false;
        this.strawberry = false;
        this.cage = false;
        this.chocolate = false;
        this.setIncexes(d, e);
        var c = false;
        if (f > 10) {
            c = true;
            f -= 10
        }
        if (f > 0 && f < 8) {
            this.chipPicture = DNAssetsManager.g_instance.getImage("cake_" + f);
            this.addChild(this.chipPicture);
            this.chipPicture.x = -this.chipPicture.getBounds().width / 2;
            this.chipPicture.y = -Constants.CELL_SIZE
        }
        this.colorID = f;
        if (f == 9) {
            this.convertToStoneHeart()
        }
        if (f == 8) {
            this.convertToStrawberry()
        }
        if (c) {
            this.setCage()
        }
        if (f == -1) {
            this.convertToChocolate()
        }
    }
    a.prototype.getBonusType = function() {
        return this.bonusType
    };
    a.prototype.getColorID = function() {
        return this.colorID
    };
    a.prototype.getIndeces = function() {
        return new createjs.Point(this.indexX, this.indexY)
    };
    a.prototype.getIndexX = function() {
        return this.indexX
    };
    a.prototype.getIndexY = function() {
        return this.indexY
    };
    a.prototype.setIncexes = function(c, d) {
        this.indexX = c;
        this.indexY = d
    };
    a.prototype.isHole = function() {
        return this.hole
    };
    a.prototype.convertToHole = function() {
        this.dropFlags();
        this.removeAllChildren();
        this.cage = false;
        this.chocolate = false;
        this.stoneHeart = false;
        this.hole = true;
        this.colorID = -1
    };
    a.prototype.convertHoleToChip = function() {
        this.dropFlags();
        this.removeAllChildren();
        this.colorID = 2;
        this.chipPicture = DNAssetsManager.g_instance.getImage("cake_" + this.colorID);
        this.addChild(this.chipPicture);
        this.chipPicture.x = -this.chipPicture.getBounds().width / 2;
        this.chipPicture.y = -Constants.CELL_SIZE
    };
    a.prototype.randomID = function(c) {
        if (this.isChocolate() || this.isStoneHeart() || this.isStrawberry()) {
            return
        }
        this.removeAllChildren();
        this.colorID = Utils.RandomRangeInt(1, c);
        if (this.colorID >= 8) {
            this.colorID = 1
        }
        this.chipPicture = DNAssetsManager.g_instance.getImage("cake_" + this.colorID);
        this.addChild(this.chipPicture);
        this.chipPicture.x = -this.chipPicture.getBounds().width / 2;
        this.chipPicture.y = -Constants.CELL_SIZE;
        if (this.haveCage()) {
            this.setCage()
        }
    };
    a.prototype.nextID = function() {
        this.removeAllChildren();
        if (this.colorID == -1) {
            this.dropFlags();
            this.colorID = 0
        }
        this.colorID++;
        if (this.colorID >= 8) {
            this.colorID = 1
        }
        this.chipPicture = DNAssetsManager.g_instance.getImage("cake_" + this.colorID);
        this.addChild(this.chipPicture);
        this.chipPicture.x = -this.chipPicture.getBounds().width / 2;
        this.chipPicture.y = -Constants.CELL_SIZE;
        if (this.haveCage()) {
            this.setCage()
        }
    };
    a.prototype.convertToStoneHeart = function() {
        this.dropFlags();
        this.removeAllChildren();
        this.stoneHeart = true;
        this.colorID = -1;
        this.chipPicture = DNAssetsManager.g_instance.getCenteredImageWithProxy(Images.STONE_HEART);
        this.chipPicture.y = -Constants.CELL_SIZE / 2;
        this.addChild(this.chipPicture)
    };
    a.prototype.isStoneHeart = function() {
        return this.stoneHeart
    };
    a.prototype.convertToStrawberry = function() {
        this.dropFlags();
        this.removeAllChildren();
        this.colorID = -1;
        this.strawberry = true;
        this.chipPicture = DNAssetsManager.g_instance.getImage(Images.STRAWBERRY);
        this.addChild(this.chipPicture);
        this.chipPicture.x = -this.chipPicture.getBounds().width / 2;
        this.chipPicture.y = -83
    };
    a.prototype.isStrawberry = function() {
        return this.strawberry
    };
    a.prototype.setCage = function() {
        this.cage = true;
        this.cageImage = DNAssetsManager.g_instance.getCenteredImageWithProxy(Images.CAGE);
        this.chipPicture.addChild(this.cageImage);
        this.cageImage.x = Constants.CELL_SIZE / 2;
        this.cageImage.y = Constants.CELL_SIZE / 2
    };
    a.prototype.haveCage = function() {
        return this.cage
    };
    a.prototype.removeCage = function() {
        this.cage = false;
        this.chipPicture.removeChild(this.cageImage)
    };
    a.prototype.convertToChocolate = function() {
        this.dropFlags();
        this.removeAllChildren();
        this.chocolate = true;
        this.colorID = -1;
        this.chipPicture = DNAssetsManager.g_instance.getCenteredImageWithProxy(Images.CHOCOLATE);
        this.chipPicture.y = -Constants.CELL_SIZE / 2;
        this.addChild(this.chipPicture)
    };
    a.prototype.isChocolate = function() {
        return this.chocolate
    };
    a.prototype.dropFlags = function() {
        this.chocolate = false;
        this.strawberry = false;
        this.stoneHeart = false;
        this.hole = false
    };
    return a
})(DNGameObject);
var MapEditorState = (function(b) {
    __extends(a, b);

    function a(j) {
        var h = this;
        b.call(this);
        this.fieldWidth = 8 + 2;
        this.fieldHeight = 8;
        this.dirtLayer = new createjs.Container();
        this.underChipsLayer = new createjs.Container();
        this.backChipsLayer = new createjs.Container();
        this.holeLayer = new createjs.Container();
        this.edgesLayer = new createjs.Container();
        this.frontChipsLayer = new createjs.Container();
        this.effectsLayer = new createjs.Container();
        this.allModes = [a.INPUT_MODE_FORM, a.INPUT_MODE_CANDY, a.INPUT_MODE_CAGE, a.INPUT_MODE_CHOCOLATE, a.INPUT_MODE_STONE, a.INPUT_MODE_STRAWBERRY, a.INPUT_MODE_DIRT];
        this.inputMode = a.INPUT_MODE_FORM;
        this.inputModeText = new createjs.Text("FORM", "bold 33px Times New Roman", "#000000");
        this.loseTypeMoves = true;
        this.loseCounter = 10;
        this.colorsCount = 4;
        this.allGoals = ["goal_score", "goal_strawberry", "goal_dirt", "goal_chip_1", "goal_chip_2", "goal_chip_3", "goal_chip_4", "goal_chip_5", "goal_chip_6", "goal_chip_7"];
        this.goal = this.allGoals[0];
        this.goalCounter = 0;
        this.bombCounter = 10;
        this.bombProb = 0;
        this.level = j;
        this.addChild(DNAssetsManager.g_instance.getImage(Images.MAIN_MENU_BACK));
        var e = new createjs.Container();
        this.loadLayout(CurLayouts.MAP_EDITOR_LAYOUT, e);
        this.findGUIObject("moves").setHandler(function() {
            return h.onMovesTouch()
        });
        this.findGUIObject("time").setHandler(function() {
            return h.onTimeTouch()
        });
        this.findGUIObject("time").visible = false;
        this.findGUIObject("panel").addChild(this.inputModeText);
        this.inputModeText.textAlign = "right";
        this.inputModeText.x = 30;
        this.inputModeText.x = 210;
        this.findGUIObject(Layouts.NAME_BUTTON_RESTART).setHandler(function() {
            return h.onRestartTouch()
        });
        this.findGUIObject(Layouts.NAME_BUTTON_PLAY).setHandler(function() {
            return h.onPlayTouch()
        });
        this.findGUIObject("shuffle").setHandler(function() {
            return h.onShuffleTouch()
        });
        this.findGUIObject("colors_count").setHandler(function() {
            return h.onColorsCountTouch()
        });
        for (var d = 0; d < this.allGoals.length; d++) {
            this.findGUIObject(this.allGoals[d]).setHandler(function() {
                return h.nextGoal()
            })
        }
        this.findGUIObject("plus").setHandler(function() {
            return h.onPlusTouch()
        });
        this.findGUIObject("minus").setHandler(function() {
            return h.onMinusTouch()
        });
        this.findGUIObject("goal_plus").setHandler(function() {
            return h.onPlusGoalTouch()
        });
        this.findGUIObject("goal_minus").setHandler(function() {
            return h.onMinusGoalTouch()
        });
        this.findGUIObject("bomb_counter").setHandler(function() {
            return h.nextBombCounter()
        });
        this.findGUIObject("bomb_prob").setHandler(function() {
            return h.nextBombProb()
        });
        for (var d = 0; d < 5; d++) {
            this.addGameObjectAtPos(new Cloud(true), this, Utils.RandomRange(0, 700), Utils.RandomRange(150, 750))
        }
        a.g_instance = this;
        var f = GameData.getInstance().getLevelDef(j);
        this.field = new Array(this.fieldWidth);
        for (var d = 0; d < this.fieldWidth; d++) {
            this.field[d] = new Array(this.fieldHeight)
        }
        this.addChild(this.holeLayer);
        this.addChild(this.dirtLayer);
        this.addChild(this.edgesLayer);
        this.addChild(this.underChipsLayer);
        this.addChild(this.backChipsLayer);
        this.addChild(this.frontChipsLayer);
        this.addChild(this.effectsLayer);
        this.spawnDefinedChips(f.chips);
        this.loadFormFieldForm();
        this.rebuildEdges();
        this.fieldDirt = new Array(this.fieldWidth);
        for (var d = 0; d < this.fieldWidth; d++) {
            this.fieldDirt[d] = new Array(this.fieldHeight)
        }
        for (var c = 0; c < this.fieldWidth; c++) {
            for (var g = 0; g < this.fieldHeight; g++) {
                this.fieldDirt[c][g] = 0
            }
        }
        this.addChild(e);
        this.updateLoseLabel();
        this.updateGoal();
        this.updateGoalCounter();
        this.update(0)
    }
    a.prototype.updateGoal = function() {
        for (var c = 0; c < this.allGoals.length; c++) {
            this.findGUIObject(this.allGoals[c]).visible = (this.goal == this.allGoals[c])
        }
    };
    a.prototype.updateGoalCounter = function() {
        this.findGUIObject("goal_counter").setText(this.goalCounter.toString())
    };
    a.prototype.onPlusGoalTouch = function() {
        if (this.goal == "goal_score") {
            this.goalCounter += 500
        } else {
            this.goalCounter++
        }
        this.updateGoalCounter()
    };
    a.prototype.onMinusGoalTouch = function() {
        if (this.goal == "goal_score") {
            this.goalCounter -= 500
        } else {
            this.goalCounter--
        } if (this.goalCounter <= 0) {
            this.goalCounter = 0
        }
        this.updateGoalCounter()
    };
    a.prototype.nextGoal = function() {
        var c = this.allGoals.indexOf(this.goal);
        c++;
        if (c >= this.allGoals.length) {
            c = 0
        }
        this.goal = this.allGoals[c];
        this.updateGoal()
    };
    a.prototype.onMovesTouch = function() {
        this.findGUIObject("moves").visible = false;
        this.findGUIObject("time").visible = true;
        this.loseTypeMoves = false;
        this.updateLoseLabel()
    };
    a.prototype.onTimeTouch = function() {
        this.findGUIObject("moves").visible = true;
        this.findGUIObject("time").visible = false;
        this.loseTypeMoves = true;
        this.updateLoseLabel()
    };
    a.prototype.onPlusTouch = function() {
        if (this.loseTypeMoves) {
            this.loseCounter++
        } else {
            this.loseCounter += 5
        }
        this.updateLoseLabel()
    };
    a.prototype.onMinusTouch = function() {
        if (this.loseTypeMoves) {
            this.loseCounter--
        } else {
            this.loseCounter -= 5
        } if (this.loseCounter < 0) {
            this.loseCounter = 0
        }
        this.updateLoseLabel()
    };
    a.prototype.updateLoseLabel = function() {
        if (this.loseTypeMoves) {
            this.findGUIObject("lose_counter").setText(this.loseCounter.toString())
        } else {
            this.findGUIObject("lose_counter").setText(Utils.IntToTimeString(this.loseCounter))
        }
    };
    a.prototype.setDirtAt = function(c, d) {
        if (++this.fieldDirt[c][d] >= 3) {
            this.fieldDirt[c][d] = 0
        }
        this.recalcDirt()
    };
    a.prototype.resetDirtAt = function(c, d) {
        this.fieldDirt[c][d] = 0;
        this.recalcDirt()
    };
    a.prototype.recalcDirt = function() {
        this.dirtLayer.removeAllChildren();
        for (var c = 0; c < this.fieldWidth; c++) {
            for (var e = 0; e < this.fieldHeight; e++) {
                if (this.fieldDirt[c][e] != 0) {
                    var d = DNAssetsManager.g_instance.getCenteredImageWithProxy(this.fieldDirt[c][e] == 1 ? Images.DIRT_1 : Images.DIRT_2);
                    d.x = this.getXPosByXIndex(c);
                    d.y = this.getYPosByYIndex(e) - Constants.CELL_SIZE / 2;
                    this.dirtLayer.addChild(d)
                }
            }
        }
    };
    a.prototype.onPauseClick = function() {
        DNStateManager.g_instance.pushState(new PauseState())
    };
    a.prototype.spawnDefinedChips = function(d) {
        for (var c = 0; c < this.fieldWidth; c++) {
            for (var e = 0; e < this.fieldHeight; e++) {
                this.createChipWithColorID(c, e, (7 - e) * 0.13 + c * 0.11, d[e][c])
            }
        }
    };
    a.prototype.loadFormFieldForm = function() {
        var e = GameData.getInstance().getLevelDef(this.level);
        var d = e.form;
        for (var c = 0; c < this.fieldWidth; c++) {
            for (var f = 0; f < this.fieldHeight; f++) {
                if (d[f][c] == 0) {
                    this.field[c][f].convertToHole()
                }
            }
        }
    };
    a.prototype.rebuildEdges = function() {
        this.edgesLayer.removeAllChildren();
        this.holeLayer.removeAllChildren();
        for (var m = 0; m < this.fieldWidth; m++) {
            for (var l = 0; l < this.fieldHeight; l++) {
                if (this.field[m][l].isHole()) {
                    var j = this.getXPosByXIndex(m) - Constants.CELL_SIZE / 2;
                    var i = this.getYPosByYIndex(l) - Constants.CELL_SIZE;
                    if ((l > 0 && !this.field[m][l - 1].isHole()) && (m > 0 && !this.field[m - 1][l].isHole())) {
                        var h = DNAssetsManager.g_instance.getImage(Images.BORDER_CORNER);
                        h.x = j - 4;
                        h.y = i - 4;
                        this.edgesLayer.addChild(h)
                    }
                    if ((l > 0 && !this.field[m][l - 1].isHole()) && (m < this.fieldWidth - 1 && !this.field[m + 1][l].isHole())) {
                        var e = DNAssetsManager.g_instance.getImage(Images.BORDER_CORNER);
                        e.x = j + Constants.CELL_SIZE + 8 - 4;
                        e.y = i - 4;
                        e.rotation = +90;
                        this.edgesLayer.addChild(e)
                    }
                    if ((l < this.fieldHeight - 1 && !this.field[m][l + 1].isHole()) && (m > 0 && !this.field[m - 1][l].isHole())) {
                        var d = DNAssetsManager.g_instance.getImage(Images.BORDER_CORNER);
                        d.x = j - 4;
                        d.y = i + Constants.CELL_SIZE + 8 - 4;
                        d.rotation = -90;
                        this.edgesLayer.addChild(d)
                    }
                    if ((l < this.fieldHeight - 1 && !this.field[m][l + 1].isHole()) && (m < this.fieldWidth - 1 && !this.field[m + 1][l].isHole())) {
                        var g = DNAssetsManager.g_instance.getImage(Images.BORDER_CORNER);
                        g.x = j + Constants.CELL_SIZE + 8 - 4;
                        g.y = i + Constants.CELL_SIZE + 8 - 4;
                        g.rotation = -180;
                        this.edgesLayer.addChild(g)
                    }
                } else {
                    var o = DNAssetsManager.g_instance.getImage(Images.CELL);
                    this.holeLayer.addChild(o);
                    o.x = this.getXPosByXIndex(m) - Constants.CELL_SIZE / 2;
                    o.y = this.getYPosByYIndex(l) - Constants.CELL_SIZE;
                    if (m > 0 && this.field[m - 1][l].isHole()) {
                        var f = DNAssetsManager.g_instance.getImage(Images.BORDER_SIDE);
                        f.rotation = -90;
                        f.x = o.x - 4;
                        f.y = o.y + Constants.CELL_SIZE;
                        this.edgesLayer.addChildAt(f, 0)
                    }
                    if (m < this.fieldWidth - 1 && this.field[m + 1][l].isHole()) {
                        var n = DNAssetsManager.g_instance.getImage(Images.BORDER_SIDE);
                        n.rotation = -90;
                        n.x = o.x + Constants.CELL_SIZE - 4;
                        n.y = o.y + Constants.CELL_SIZE;
                        this.edgesLayer.addChildAt(n, 0)
                    }
                    if (l > 0 && this.field[m][l - 1].isHole()) {
                        var k = DNAssetsManager.g_instance.getImage(Images.BORDER_SIDE);
                        k.x = o.x;
                        k.y = o.y - 4;
                        this.edgesLayer.addChildAt(k, 0)
                    }
                    if (l < this.fieldHeight - 1 && this.field[m][l + 1].isHole()) {
                        var c = DNAssetsManager.g_instance.getImage(Images.BORDER_SIDE);
                        c.x = o.x;
                        c.y = o.y + Constants.CELL_SIZE - 4;
                        this.edgesLayer.addChildAt(c, 0)
                    }
                    if ((l > 0 && this.field[m][l - 1].isHole()) && (m > 0 && this.field[m - 1][l].isHole())) {
                        var h = DNAssetsManager.g_instance.getImage(Images.BORDER_CORNER);
                        h.x = o.x - 4;
                        h.y = o.y - 4;
                        this.edgesLayer.addChild(h)
                    }
                    if ((l > 0 && this.field[m][l - 1].isHole()) && (m < this.fieldWidth - 1 && this.field[m + 1][l].isHole())) {
                        var e = DNAssetsManager.g_instance.getImage(Images.BORDER_CORNER);
                        e.x = o.x + Constants.CELL_SIZE + 8 - 4;
                        e.y = o.y - 4;
                        e.rotation = +90;
                        this.edgesLayer.addChild(e)
                    }
                    if ((l < this.fieldHeight - 1 && this.field[m][l + 1].isHole()) && (m > 0 && this.field[m - 1][l].isHole())) {
                        var d = DNAssetsManager.g_instance.getImage(Images.BORDER_CORNER);
                        d.x = o.x - 4;
                        d.y = o.y + Constants.CELL_SIZE + 8 - 4;
                        d.rotation = -90;
                        this.edgesLayer.addChild(d)
                    }
                    if ((l < this.fieldHeight - 1 && this.field[m][l + 1].isHole()) && (m < this.fieldWidth - 1 && this.field[m + 1][l].isHole())) {
                        var g = DNAssetsManager.g_instance.getImage(Images.BORDER_CORNER);
                        g.x = o.x + Constants.CELL_SIZE + 8 - 4;
                        g.y = o.y + Constants.CELL_SIZE + 8 - 4;
                        g.rotation = -180;
                        this.edgesLayer.addChild(g)
                    }
                }
            }
        }
    };
    a.prototype.createChipWithColorID = function(d, g, e, f) {
        var c = new MapEditorChip(f, d, g);
        c.setIncexes(d, g);
        this.addGameObjectAtPos(c, this.backChipsLayer, this.getXPosByXIndex(d), this.getYPosByYIndex(g));
        this.field[d][g] = c
    };
    a.prototype.getXPosByXIndex = function(c) {
        return c * Constants.CELL_SIZE + Constants.CELL_SIZE / 2 + Constants.FIELD_OFFSET_X
    };
    a.prototype.getYPosByYIndex = function(c) {
        return c * Constants.CELL_SIZE + Constants.CELL_SIZE / 2 + Constants.FIELD_OFFSET_Y
    };
    a.prototype.onMouseDown = function(d, e) {
        b.prototype.onMouseDown.call(this, d, e);
        e -= this.y;
        var c = this.findChipAt(d, e);
        if (c) {
            switch (this.inputMode) {
                case a.INPUT_MODE_FORM:
                    if (c.isHole()) {
                        c.convertHoleToChip()
                    } else {
                        c.convertToHole();
                        this.resetDirtAt(c.getIndexX(), c.getIndexY())
                    }
                    break;
                case a.INPUT_MODE_CANDY:
                    if (!c.isHole()) {
                        c.nextID()
                    }
                    break;
                case a.INPUT_MODE_CAGE:
                    if (!c.isHole()) {
                        if (c.haveCage()) {
                            c.removeCage()
                        } else {
                            c.setCage()
                        }
                    }
                    break;
                case a.INPUT_MODE_CHOCOLATE:
                    if (!c.isHole()) {
                        c.convertToChocolate()
                    }
                    break;
                case a.INPUT_MODE_STONE:
                    if (!c.isHole()) {
                        c.convertToStoneHeart()
                    }
                    break;
                case a.INPUT_MODE_STRAWBERRY:
                    if (!c.isHole()) {
                        c.convertToStrawberry()
                    }
                    break;
                case a.INPUT_MODE_DIRT:
                    if (!c.isHole()) {
                        this.setDirtAt(c.getIndexX(), c.getIndexY())
                    }
                    break
            }
            this.rebuildEdges()
        }
    };
    a.prototype.findChipAt = function(d, g) {
        for (var e = 0; e < this.fieldWidth; e++) {
            for (var f = 0; f < this.fieldHeight; f++) {
                var c = this.field[e][f];
                if (c) {
                    if ((Math.abs(c.x - d) < Constants.CELL_SIZE / 2) && (c.y > g && c.y < g + Constants.CELL_SIZE)) {
                        return c
                    }
                }
            }
        }
        return null
    };
    a.prototype.onRestartTouch = function() {
        this.inputModeText.text = this.inputMode;
        var c = this.allModes.indexOf(this.inputMode);
        c = (c + 1) % this.allModes.length;
        this.inputMode = this.allModes[c];
        this.inputModeText.text = this.inputMode
    };
    a.prototype.onPlayTouch = function() {
        this.generageLevel();
        DNStateManager.g_instance.pushState(new PlayState(-1, false, []))
    };
    a.prototype.generageLevel = function() {
        var g = GameData.getInstance().mapEditorLevel;
        for (var d = 0; d < this.fieldWidth; d++) {
            for (var h = 0; h < this.fieldHeight; h++) {
                g.form[h][d] = (this.field[d][h].isHole() ? 0 : 1);
                if (this.field[d][h].isHole()) {
                    g.chips[h][d] = 0
                } else {
                    if (this.field[d][h].isStoneHeart()) {
                        g.chips[h][d] = 9
                    } else {
                        if (this.field[d][h].isStrawberry()) {
                            g.chips[h][d] = 8
                        } else {
                            if (this.field[d][h].isChocolate()) {
                                g.chips[h][d] = -1
                            } else {
                                g.chips[h][d] = this.field[d][h].getColorID() + (this.field[d][h].haveCage() ? 10 : 0)
                            }
                        }
                    }
                }
            }
        }
        var c = false;
        for (var d = 0; d < this.fieldWidth; d++) {
            for (var h = 0; h < this.fieldHeight; h++) {
                if (this.fieldDirt[d][h] != 0) {
                    c = true
                }
            }
        }
        if (c) {
            var f = new Array(this.fieldHeight);
            for (var e = 0; e < this.fieldHeight; e++) {
                f[e] = new Array(this.fieldWidth)
            }
            for (var d = 0; d < this.fieldWidth; d++) {
                for (var h = 0; h < this.fieldHeight; h++) {
                    f[h][d] = this.fieldDirt[d][h]
                }
            }
            g.dirt = f
        } else {
            g.dirt = null
        } if (this.loseTypeMoves) {
            g.moves = this.loseCounter;
            g.time = 0
        } else {
            g.moves = 0;
            g.time = this.loseCounter
        }
        g.score_goal_count = 0;
        g.chip_goal = 0;
        g.chip_types = this.colorsCount;
        switch (this.goal) {
            case "goal_score":
                g.goal = PlayState.GOAL_SCORE;
                g.score_goal_count = this.goalCounter;
                break;
            case "goal_strawberry":
                g.goal = PlayState.GOAL_STRAWBERRY;
                break;
            case "goal_dirt":
                g.goal = PlayState.GOAL_DIRT;
                break;
            case "goal_chip_1":
                g.goal = PlayState.GOAL_COUNT;
                g.chip_goal = 1;
                g.chip_goal_count = this.goalCounter;
                break;
            case "goal_chip_2":
                g.goal = PlayState.GOAL_COUNT;
                g.chip_goal = 2;
                g.chip_goal_count = this.goalCounter;
                break;
            case "goal_chip_3":
                g.goal = PlayState.GOAL_COUNT;
                g.chip_goal = 3;
                g.chip_goal_count = this.goalCounter;
                break;
            case "goal_chip_4":
                g.goal = PlayState.GOAL_COUNT;
                g.chip_goal = 4;
                g.chip_goal_count = this.goalCounter;
                break;
            case "goal_chip_5":
                g.goal = PlayState.GOAL_COUNT;
                g.chip_goal = 5;
                g.chip_goal_count = this.goalCounter;
                break;
            case "goal_chip_6":
                g.goal = PlayState.GOAL_COUNT;
                g.chip_goal = 6;
                g.chip_goal_count = this.goalCounter;
                break;
            case "goal_chip_7":
                g.goal = PlayState.GOAL_COUNT;
                g.chip_goal = 7;
                g.chip_goal_count = this.goalCounter;
                break
        }
        g.bombCounter = this.bombCounter;
        g.bombProb = this.bombProb / 100;
        console.log(JSON.stringify(g))
    };
    a.prototype.nextBombCounter = function() {
        this.bombCounter++;
        if (this.bombCounter > 25) {
            this.bombCounter = 1
        }
        this.findGUIObject("bomb_counter_label").setText(this.bombCounter.toString())
    };
    a.prototype.nextBombProb = function() {
        this.bombProb += 2;
        if (this.bombProb >= 100) {
            this.bombProb = 0
        }
        this.findGUIObject("bomb_prob_label").setText(this.bombProb.toString())
    };
    a.prototype.onShuffleTouch = function() {
        for (var c = 0; c < this.fieldWidth; c++) {
            for (var d = 0; d < this.fieldHeight; d++) {
                if (!this.field[c][d].isHole()) {
                    this.field[c][d].randomID(this.colorsCount)
                }
            }
        }
    };
    a.prototype.onColorsCountTouch = function() {
        this.colorsCount++;
        if (this.colorsCount >= 8) {
            this.colorsCount = 3
        }
        this.findGUIObject("colors_count_label").setText(this.colorsCount.toString())
    };
    a.INPUT_MODE_FORM = "FORM";
    a.INPUT_MODE_CANDY = "CANDY";
    a.INPUT_MODE_CAGE = "CAGE";
    a.INPUT_MODE_CHOCOLATE = "CHOCOLATE";
    a.INPUT_MODE_STONE = "STONE";
    a.INPUT_MODE_STRAWBERRY = "STRAWBERRY";
    a.INPUT_MODE_DIRT = "DIRT";
    return a
})(DNGameState);
var MoveHint = (function(a) {
    __extends(b, a);

    function b(e) {
        a.call(this);
        this.arrow1 = new createjs.Container();
        this.arrow2 = new createjs.Container();
        this.hidding = false;
        var d = DNAssetsManager.g_instance.getCenteredImageWithProxy(Images.HINT_ARROW);
        this.arrow1.addChild(d);
        this.addChild(this.arrow1);
        this.arrow1.y -= 18;
        var c = DNAssetsManager.g_instance.getCenteredImageWithProxy(Images.HINT_ARROW);
        this.arrow2.addChild(c);
        this.addChild(this.arrow2);
        this.arrow2.y += 18;
        this.arrow2.rotation = 180;
        if (e) {
            this.rotation = 90
        }
        this.alpha = 0
    }
    b.prototype.update = function(c) {
        if (this.liveTime <= 0.5) {
            this.alpha = this.liveTime * 2
        }
        a.prototype.update.call(this, c);
        this.arrow1.x = Math.sin(this.liveTime * 7) * 5;
        this.arrow2.x = -this.arrow1.x;
        if (this.liveTime > 20) {
            this.hide()
        }
        if (this.hidding) {
            this.alpha -= c * 3;
            if (this.alpha <= 0) {
                this.kill()
            }
        }
    };
    b.prototype.hide = function() {
        this.hidding = true
    };
    b.prototype.isHidding = function() {
        return this.hidding
    };
    return b
})(DNGameObject);
var PauseState = (function(b) {
    __extends(a, b);

    function a() {
        var f = this;
        b.call(this);
        var e = new DNJellyButton(Images.BUTTON_CLOSE, function() {
            return f.hide()
        });
        this.panel.addChild(e);
        this.addGuiObject(e);
        e.x = 235;
        e.y = -190;
        var d = new DNJellyButton(Images.BUTTON_RESTART, function() {
            return f.onRestartTouch()
        });
        this.panel.addChild(d);
        this.addGuiObject(d);
        d.x = -150;
        d.y = 115;
        var c = new DNJellyButton(Images.BUTTON_EXIT, function() {
            return f.onExitTouch()
        });
        this.panel.addChild(c);
        this.addGuiObject(c);
        c.x = 0;
        c.y = 115;
        this.setSoundButton()
    }
    a.prototype.setSoundButton = function() {
        var d = this;
        if (this.soundButton && this.soundButton.parent) {
            this.soundButton.parent.removeChild(this.soundButton)
        }
        var c = DNSoundManager.g_instance.isSoundEnabled();
        this.soundButton = new DNJellyButton(c ? Images.BUTTON_SOUND_ON : Images.BUTTON_SOUND_OFF, function() {
            return d.onSoundTouch()
        });
        this.panel.addChild(this.soundButton);
        this.addGuiObject(this.soundButton);
        this.soundButton.x = 150;
        this.soundButton.y = 115
    };
    a.prototype.update = function(c) {
        b.prototype.update.call(this, c)
    };
    a.prototype.onSoundTouch = function() {
        DNSoundManager.g_instance.setSoundEnabled(!DNSoundManager.g_instance.isSoundEnabled());
        this.setSoundButton()
    };
    return a
})(PopupState);
var PlayState = (function(a) {
    __extends(b, a);

    function b(d, z, q) {
        var B = this;
        a.call(this);
        this.matchInARow = 0;
        this.inputState = null;
        this.loseType = null;
        this.dirtCount = 0;
        this.fieldWidth = 8 + 2;
        this.fieldHeight = 8;
        this.bombProb = 0.1;
        this.bombCounter = 11;
        this.selectedChip = null;
        this.swapChip1 = null;
        this.swapChip2 = null;
        this.lastMovedChip = null;
        this.dirtLayer = new createjs.Container();
        this.underChipsLayer = new createjs.Container();
        this.backChipsLayer = new createjs.Container();
        this.holeLayer = new createjs.Container();
        this.edgesLayer = new createjs.Container();
        this.frontChipsLayer = new createjs.Container();
        this.effectsLayer = new createjs.Container();
        this.inputStateTime = 0;
        this.score = 0;
        this.tmpScore = 0;
        this.moves = 30;
        this.time = 70;
        this.findedMatchPos1 = null;
        this.findedMatchPos2 = null;
        this.moveHint = null;
        this.chipTypesCount = 5;
        this.awesomeEffectTime = 0;
        this.superbEffectTime = 0;
        this.waitLose = false;
        this.waitLoseTime = 0;
        this.waitWin = false;
        this.stars = 0;
        this.waitWinTime = 0;
        this.wasChocolateClear = true;
        this.showHint = false;
        this.lastDropSoundTime = -10;
        this.lastDropID = -1;
        this.lastSound = null;
        this.needRunSplashTime = true;
        this.lolipop = false;
        if (Constants.DEBUG_MODE) {
            console.log("LEVEL", d)
        }
        b.g_curLevel = d;
        this.addChild(DNAssetsManager.g_instance.getImage(Images.MAIN_MENU_BACK));
        var m = new createjs.Container();
        this.loadLayout(CurLayouts.PLAYSTATE_LAYOUT, m);
        this.findGUIObject(Layouts.NAME_PAUSE).setHandler(function() {
            return B.onPauseClick()
        });
        this.goalLabel = (this.findGUIObject(Layouts.NAME_GOAL_LABEL));
        for (var C = 0; C < 5; C++) {
            this.addGameObjectAtPos(new Cloud(true), this, Utils.RandomRange(0, 700), Utils.RandomRange(150, 750))
        }
        b.g_instance = this;
        var G = GameData.getInstance().getLevelDef(d);
        this.bombProb = G.bombProb;
        this.bombCounter = G.bombCounter;
        this.chipTypesCount = G.chip_types;
        this.field = new Array(this.fieldWidth);
        for (var C = 0; C < this.fieldWidth; C++) {
            this.field[C] = new Array(this.fieldHeight)
        }
        this.addChild(this.holeLayer);
        this.addChild(this.dirtLayer);
        this.addChild(this.edgesLayer);
        this.addChild(this.underChipsLayer);
        this.addChild(this.backChipsLayer);
        this.addChild(this.frontChipsLayer);
        this.addChild(this.effectsLayer);
        this.matchInARow = 0;
        this.goal = G.goal;
        this.spawnDefinedChips(G.chips);
        var g = G.form;
        for (var s = 0; s < this.fieldWidth; s++) {
            for (var r = 0; r < this.fieldHeight; r++) {
                if (g[r][s] == 0) {
                    this.field[s][r].convertToHole();
                    this.holeLayer.addChild(this.field[s][r]);
                    var c = this.getXPosByXIndex(s) - Constants.CELL_SIZE / 2;
                    var H = this.getYPosByYIndex(r) - Constants.CELL_SIZE;
                    if ((r > 0 && g[r - 1][s] != 0) && (s > 0 && g[r][s - 1] != 0)) {
                        var A = DNAssetsManager.g_instance.getImage(Images.BORDER_CORNER);
                        A.x = c - 4;
                        A.y = H - 4;
                        this.edgesLayer.addChild(A)
                    }
                    if ((r > 0 && g[r - 1][s] != 0) && (s < this.fieldWidth - 1 && g[r][s + 1] != 0)) {
                        var h = DNAssetsManager.g_instance.getImage(Images.BORDER_CORNER);
                        h.x = c + Constants.CELL_SIZE + 8 - 4;
                        h.y = H - 4;
                        h.rotation = +90;
                        this.edgesLayer.addChild(h)
                    }
                    if ((r < this.fieldHeight - 1 && g[r + 1][s] != 0) && (s > 0 && g[r][s - 1] != 0)) {
                        var l = DNAssetsManager.g_instance.getImage(Images.BORDER_CORNER);
                        l.x = c - 4;
                        l.y = H + Constants.CELL_SIZE + 8 - 4;
                        l.rotation = -90;
                        this.edgesLayer.addChild(l)
                    }
                    if ((r < this.fieldHeight - 1 && g[r + 1][s] != 0) && (s < this.fieldWidth - 1 && g[r][s + 1] != 0)) {
                        var w = DNAssetsManager.g_instance.getImage(Images.BORDER_CORNER);
                        w.x = c + Constants.CELL_SIZE + 8 - 4;
                        w.y = H + Constants.CELL_SIZE + 8 - 4;
                        w.rotation = -180;
                        this.edgesLayer.addChild(w)
                    }
                } else {
                    var f = DNAssetsManager.g_instance.getImage(Images.CELL);
                    this.holeLayer.addChild(f);
                    f.x = this.getXPosByXIndex(s) - Constants.CELL_SIZE / 2;
                    f.y = this.getYPosByYIndex(r) - Constants.CELL_SIZE;
                    if (s > 0 && g[r][s - 1] == 0) {
                        var k = DNAssetsManager.g_instance.getImage(Images.BORDER_SIDE);
                        k.rotation = -90;
                        k.x = f.x - 4;
                        k.y = f.y + Constants.CELL_SIZE;
                        this.edgesLayer.addChildAt(k, 0)
                    }
                    if (s < this.fieldWidth - 1 && g[r][s + 1] == 0) {
                        var F = DNAssetsManager.g_instance.getImage(Images.BORDER_SIDE);
                        F.rotation = -90;
                        F.x = f.x + Constants.CELL_SIZE - 4;
                        F.y = f.y + Constants.CELL_SIZE;
                        this.edgesLayer.addChildAt(F, 0)
                    }
                    if (r > 0 && g[r - 1][s] == 0) {
                        var v = DNAssetsManager.g_instance.getImage(Images.BORDER_SIDE);
                        v.x = f.x;
                        v.y = f.y - 4;
                        this.edgesLayer.addChildAt(v, 0)
                    }
                    if (r < this.fieldHeight - 1 && g[r + 1][s] == 0) {
                        var p = DNAssetsManager.g_instance.getImage(Images.BORDER_SIDE);
                        p.x = f.x;
                        p.y = f.y + Constants.CELL_SIZE - 4;
                        this.edgesLayer.addChildAt(p, 0)
                    }
                    if ((r > 0 && g[r - 1][s] == 0) && (s > 0 && g[r][s - 1] == 0)) {
                        var A = DNAssetsManager.g_instance.getImage(Images.BORDER_CORNER);
                        A.x = f.x - 4;
                        A.y = f.y - 4;
                        this.edgesLayer.addChild(A)
                    }
                    if ((r > 0 && g[r - 1][s] == 0) && (s < this.fieldWidth - 1 && g[r][s + 1] == 0)) {
                        var h = DNAssetsManager.g_instance.getImage(Images.BORDER_CORNER);
                        h.x = f.x + Constants.CELL_SIZE + 8 - 4;
                        h.y = f.y - 4;
                        h.rotation = +90;
                        this.edgesLayer.addChild(h)
                    }
                    if ((r < this.fieldHeight - 1 && g[r + 1][s] == 0) && (s > 0 && g[r][s - 1] == 0)) {
                        var l = DNAssetsManager.g_instance.getImage(Images.BORDER_CORNER);
                        l.x = f.x - 4;
                        l.y = f.y + Constants.CELL_SIZE + 8 - 4;
                        l.rotation = -90;
                        this.edgesLayer.addChild(l)
                    }
                    if ((r < this.fieldHeight - 1 && g[r + 1][s] == 0) && (s < this.fieldWidth - 1 && g[r][s + 1] == 0)) {
                        var w = DNAssetsManager.g_instance.getImage(Images.BORDER_CORNER);
                        w.x = f.x + Constants.CELL_SIZE + 8 - 4;
                        w.y = f.y + Constants.CELL_SIZE + 8 - 4;
                        w.rotation = -180;
                        this.edgesLayer.addChild(w)
                    }
                }
            }
        }
        this.holeLayer.cache(0, 0, Constants.ASSETS_WIDTH, Constants.ASSETS_HEIGHT, 1);
        this.edgesLayer.cache(0, 0, Constants.ASSETS_WIDTH, Constants.ASSETS_HEIGHT, 1);
        this.fieldDirt = new Array(this.fieldWidth);
        for (var C = 0; C < this.fieldWidth; C++) {
            this.fieldDirt[C] = new Array(this.fieldHeight)
        }
        var j = G.dirt;
        if (j) {
            for (var s = 0; s < this.fieldWidth; s++) {
                for (var r = 0; r < this.fieldHeight; r++) {
                    if (j[r][s] != 0) {
                        this.dirtCount++;
                        var n = DNAssetsManager.g_instance.getCenteredImageWithProxy(j[r][s] == 1 ? Images.DIRT_1 : Images.DIRT_2);
                        n.name = (j[r][s] == 1 ? Images.DIRT_1 : Images.DIRT_2);
                        n.x = this.getXPosByXIndex(s);
                        n.y = this.getYPosByYIndex(r) - Constants.CELL_SIZE / 2;
                        this.dirtLayer.addChild(n);
                        this.fieldDirt[s][r] = n
                    }
                }
            }
        }
        this.addChild(this.scoreLabel);
        this.scoreLabel = (this.findGUIObject(Layouts.NAME_SCORE));
        this.moves = G.moves;
        this.time = G.time;
        var o = this.findGUIObject("moves_or_time_place");
        if (this.moves != 0) {
            this.loseType = b.LOSE_TYPE_MOVES;
            this.movesLabel = (this.findGUIObject(Layouts.NAME_MOVES));
            this.movesLabel.setText(this.moves.toString());
            this.movesLabel.x = 25;
            o.addChild(DNAssetsManager.g_instance.getCenteredImageWithProxy(Images.MOVES_ICON))
        }
        if (this.time != 0) {
            this.loseType = b.LOSE_TYPE_TIME;
            this.timeLabel = (this.findGUIObject(Layouts.NAME_MOVES));
            o.addChild(DNAssetsManager.g_instance.getCenteredImageWithProxy(Images.TIME_ICON));
            o.scaleX = o.scaleY = 0.7;
            this.timeLabel.scaleX = this.timeLabel.scaleY = 0.75;
            this.timeLabel.y += 4
        }
        var t = null;
        switch (this.goal) {
            case b.GOAL_DIRT:
                t = DNAssetsManager.g_instance.getCenteredImageWithProxy(Images.DIRT_1);
                this.goalLabel.setText(this.dirtCount.toString());
                break;
            case b.GOAL_COUNT:
                this.goalChipID = G.chip_goal;
                this.chipGoalCount = G.chip_goal_count;
                this.goalLabel.setText(this.chipGoalCount.toString());
                t = DNAssetsManager.g_instance.getCenteredImageWithProxy("cake_" + this.goalChipID);
                break;
            case b.GOAL_SCORE:
                t = DNAssetsManager.g_instance.getCenteredImageWithProxy(Images.SCORE_ICON);
                this.scoreGoalCount = G.score_goal_count;
                this.goalLabel.setText(this.scoreGoalCount.toString());
                break;
            case b.GOAL_STRAWBERRY:
                t = DNAssetsManager.g_instance.getCenteredImageWithProxy(Images.STRAWBERRY);
                this.goalLabel.setText(this.calcStrawberryCount().toString());
                break
        }
        var u = Math.max(t.getBounds().width, t.getBounds().height);
        t.scaleX = t.scaleY = 50 / u;
        this.findGUIObject("goal_placeholder").addChild(t);
        this.addChild(m);
        if (z) {
            var D = new TaskEffect(G);
            this.addGameObject(D);
            this.addChild(D)
        }
        for (var C = 0; C < q.length; C++) {
            this.activateBooster(q[C])
        }
        this.booster1 = new ActivateBoosterButton(Images.BOOSTER_LOLIPOP, GameData.BOOSTER_LOLIPOP);
        this.findGUIObject("booster_1").addChild(this.booster1);
        this.addGuiObject(this.booster1);
        if (this.loseType == b.LOSE_TYPE_MOVES) {
            this.booster2 = new ActivateBoosterButton(Images.BOOSTER_MOVES, GameData.BOOSTER_MOVES)
        } else {
            this.booster2 = new ActivateBoosterButton(Images.BOOSTER_TIME, GameData.BOOSTER_TIME)
        }
        this.findGUIObject("booster_2").addChild(this.booster2);
        this.addGuiObject(this.booster2);
        this.update(0);
        try {
            SG_Hooks.start()
        } catch (E) {}
    }
    b.prototype.onPauseClick = function() {
        if (b.g_curLevel != -1) {
            DNStateManager.g_instance.pushState(new PauseState())
        } else {
            DNStateManager.g_instance.popState()
        }
    };
    b.prototype.calcStrawberryCount = function() {
        var d = 0;
        for (var c = 0; c < this.fieldWidth; c++) {
            for (var e = 0; e < this.fieldHeight; e++) {
                if (this.field[c][e] && this.field[c][e].isStrawberry()) {
                    if (this.field[c][e].getState() != Chip.STATE_FALL_DOWN) {
                        d++
                    }
                }
            }
        }
        return d
    };
    b.prototype.runSplashTime = function() {
        if (this.loseType == b.LOSE_TYPE_MOVES) {
            this.addGameObject(new SplashTimeEffect(Math.min(Math.floor(this.moves / 3) + 1, 7)))
        } else {
            this.addGameObject(new SplashTimeEffect(Math.min(Math.floor(this.time / 8) + 1, 7)))
        }
        this.addGameObjectAt(new SplashTimeMessage(), this)
    };
    b.prototype.createChip = function(d, g, e) {
        var f = Utils.RandomRangeInt(1, this.chipTypesCount);
        var c = new Chip(f, d, g, this.getYPosByYIndex(g), e);
        c.setIncexes(d, g);
        this.addGameObjectAtPos(c, this.backChipsLayer, this.getXPosByXIndex(d), -Constants.CELL_SIZE);
        this.field[d][g] = c;
        if (Math.random() < this.bombProb) {
            c.convertToBomb(this.bombCounter)
        }
    };
    b.prototype.createChipWithColorID = function(d, g, e, f) {
        var c = new Chip(f, d, g, this.getYPosByYIndex(g), e);
        c.setIncexes(d, g);
        this.addGameObjectAtPos(c, this.backChipsLayer, this.getXPosByXIndex(d), -Constants.CELL_SIZE);
        this.field[d][g] = c
    };
    b.prototype.getXPosByXIndex = function(c) {
        return c * Constants.CELL_SIZE + Constants.CELL_SIZE / 2 + Constants.FIELD_OFFSET_X
    };
    b.prototype.getYPosByYIndex = function(c) {
        return c * Constants.CELL_SIZE + Constants.CELL_SIZE / 2 + Constants.FIELD_OFFSET_Y
    };
    b.prototype.update = function(e) {
        a.prototype.update.call(this, e);
        if (this.waitWin && this.inputState == b.INPUT_STATE_WAIT_SELECTION) {
            this.waitWinTime += e;
            if (this.waitWinTime > 0.9) {
                if (b.g_curLevel == -1) {
                    DNStateManager.g_instance.popState()
                } else {
                    DNStateManager.g_instance.pushState(new WinState(b.g_curLevel, this.score, this.stars))
                }
                return
            }
        }
        if (this.waitLose) {
            this.waitLoseTime += e;
            if (this.waitLoseTime > 2.4) {
                if (b.g_curLevel == -1) {
                    DNStateManager.g_instance.popState()
                } else {
                    DNStateManager.g_instance.pushState(new GameOverState(b.g_curLevel, this.score, this.loseReason))
                }
                return
            }
        }
        if (this.loseType == b.LOSE_TYPE_TIME && !this.waitWin && !this.waitLose) {
            this.time -= e;
            if (this.time <= 0) {
                this.time = 0;
                this.lose(b.LOSE_REASON_TIME)
            }
            this.timeLabel.setText(Utils.IntToTimeString(Math.round(this.time)))
        }
        this.inputStateTime += e;
        if (this.inputState != b.INPUT_STATE_WAIT_SELECTION) {
            if (this.moveHint) {
                if (this.moveHint.isDead()) {
                    this.moveHint = null
                } else {
                    this.moveHint.hide()
                }
            }
        }
        switch (this.inputState) {
            case b.INPUT_STATE_WAIT_SELECTION:
                var c = 3;
                if (this.inputStateTime > c && this.moveHint && !this.moveHint.parent && !this.moveHint.isHidding()) {
                    if (!this.waitWin && !this.waitLose) {
                        this.addGameObjectAt(this.moveHint, this)
                    }
                }
                break;
            case b.INPUT_STATE_WAIT_SPAWN:
                if (this.allChipsNormal()) {
                    this.matchMatches(this.findMatches())
                }
                break;
            case b.INPUT_STATE_SHIFT:
                if (this.allChipsNormal()) {
                    this.matchMatches(this.findMatches())
                }
                break;
            case b.INPUT_STATE_MATCHING:
                if (this.inputStateTime > Constants.MATCH_TIME / 2) {
                    this.shiftChips()
                }
                break
        }
        if (this.tmpScore < this.score) {
            this.tmpScore += 17;
            if (this.tmpScore > this.score) {
                this.tmpScore = this.score
            }
            var d = this.tmpScore.toString();
            switch (d.length) {
                case 1:
                    d = "0000" + d;
                    break;
                case 2:
                    d = "000" + d;
                    break;
                case 3:
                    d = "00" + d;
                    break;
                case 4:
                    d = "0" + d;
                    break
            }
            this.scoreLabel.setText(d)
        }
    };
    b.prototype.allChipsNormal = function() {
        for (var c = 0; c < this.fieldWidth; c++) {
            for (var d = 0; d < this.fieldHeight; d++) {
                if (this.field[c][d] != null && !this.field[c][d].isNormal()) {
                    return false
                }
            }
        }
        return true
    };
    b.prototype.canExchange = function(d, c) {
        if (d == c) {
            return false
        }
        if (d.isHole() || c.isHole()) {
            return false
        }
        var f = (d.getIndeces().x - c.getIndeces().x);
        var e = (d.getIndeces().y - c.getIndeces().y);
        return (Math.abs(f) == 1 && e == 0) || (Math.abs(e) == 1 && f == 0)
    };
    b.prototype.exchangeChips = function(d, c) {
        var g = this;
        var i = d.x;
        var h = d.y;
        var l = d.getIndexX();
        var j = d.getIndexY();
        var m = c.x;
        var k = c.y;
        var f = c.getIndexX();
        var e = c.getIndexY();
        this.field[l][j] = c;
        this.field[f][e] = d;
        d.exchange(f, e);
        c.exchange(l, j);
        this.swapChip1 = d;
        this.swapChip2 = c;
        createjs.Tween.get(d).to({
            x: m,
            y: k
        }, Constants.EXCHANGE_TIME * 1000, createjs.Ease.linear).call(function() {
            return g.onExchangeEnded()
        });
        createjs.Tween.get(c).to({
            x: i,
            y: h
        }, Constants.EXCHANGE_TIME * 1000, createjs.Ease.linear);
        this.selectedChip = null;
        this.setInpunState(b.INPUT_STATE_LOCK)
    };
    b.prototype.addConverToBonusEffect = function(c) {
        this.addGameObjectAtPos(new ConvertToBonusEffect(c), this.underChipsLayer, c.x, c.y - Constants.CELL_SIZE / 2)
    };
    b.prototype.matchMatches = function(e) {
        if (e.length != 0) {
            switch (this.matchInARow) {
                case 0:
                    DNSoundManager.g_instance.play(DNSoundManager.SOUND_MATCH_1);
                    break;
                case 1:
                    DNSoundManager.g_instance.play(DNSoundManager.SOUND_MATCH_2);
                    break;
                case 2:
                    DNSoundManager.g_instance.play(DNSoundManager.SOUND_MATCH_3);
                    break;
                case 3:
                    DNSoundManager.g_instance.play(DNSoundManager.SOUND_MATCH_4);
                    break;
                default:
                    DNSoundManager.g_instance.play(DNSoundManager.SOUND_MATCH_5);
                    break
            }
            var d = false;
            for (var c = 0; c < e.length; c++) {
                for (var f = 0; f < e[c].length; f++) {
                    e[c][f].match(Chip.MATCH_REASON_SIMPLE)
                }
                if (e[c].length == 4) {
                    var h = false;
                    for (var g = 0; g < e[c].length; g++) {
                        if (e[c][g] == this.lastMovedChip) {
                            h = true;
                            d = true;
                            this.lastMovedChip.convertToBonus(Chip.BONUS_4, Math.random() < 0.5);
                            this.lastMovedChip = null;
                            break
                        }
                    }
                    if (!h) {
                        d = true;
                        e[c][Utils.RandomRangeInt(1, 2)].convertToBonus(Chip.BONUS_4)
                    }
                }
                if (e[c].length >= 5) {
                    var h = false;
                    for (var g = 0; g < e[c].length; g++) {
                        if (e[c][g] == this.lastMovedChip) {
                            d = true;
                            h = true;
                            this.lastMovedChip.convertToBonus(Chip.BONUS_5);
                            this.lastMovedChip = null;
                            break
                        }
                    }
                    if (!h) {
                        d = true;
                        e[c][Utils.RandomRangeInt(1, e[c].length - 2)].convertToBonus(Chip.BONUS_5)
                    }
                }
            }
            if (!d) {
                for (var c = 0; c < e.length; c++) {
                    for (var f = 0; f < e[c].length; f++) {
                        if (e[c][f].isDoubleMatched()) {
                            e[c][f].convertToBonus(Chip.BONUS_BOMB);
                            c = 100;
                            break
                        }
                    }
                }
            }
            this.setInpunState(b.INPUT_STATE_MATCHING)
        } else {
            this.shiftChips()
        }
    };
    b.prototype.matchBonus = function(n, m) {
        if (n.getBonusType() == Chip.BONUS_4) {
            DNSoundManager.g_instance.play(DNSoundManager.SOUND_LINE);
            var h = n.isHorizontal();
            if (h) {
                var d = n.getIndexY();
                for (var g = 0; g < this.fieldWidth; g++) {
                    if (this.field[g][d] != null) {
                        this.field[g][d].match(Chip.MATCH_REASON_BONUS_EFFECT_4_HOR)
                    }
                }
                this.addGameObjectAtPos(new KillLineEffect(new createjs.Point(+1200, 0)), this, n.x, n.y - Constants.CELL_SIZE / 2);
                this.addGameObjectAtPos(new KillLineEffect(new createjs.Point(-1200, 0)), this, n.x, n.y - Constants.CELL_SIZE / 2)
            } else {
                var f = n.getIndexX();
                for (var g = 0; g < this.fieldHeight; g++) {
                    if (this.field[f][g] != null) {
                        this.field[f][g].match(Chip.MATCH_REASON_BONUS_EFFECT_4_VERT)
                    }
                }
                this.addGameObjectAtPos(new KillLineEffect(new createjs.Point(0, -1200)), this, n.x, n.y - Constants.CELL_SIZE / 2);
                this.addGameObjectAtPos(new KillLineEffect(new createjs.Point(0, +1200)), this, n.x, n.y - Constants.CELL_SIZE / 2)
            }
        }
        if (n.getBonusType() == Chip.BONUS_5) {
            DNSoundManager.g_instance.play(DNSoundManager.SOUND_KILL_COLOR);
            n.match(Chip.MATCH_REASON_I_AM_BONUS);
            var c = new createjs.Point(n.x, n.y);
            var l = m.getColorID();
            if (l != -1) {
                for (var k = 0; k < this.fieldWidth; k++) {
                    for (var j = 0; j < this.fieldHeight; j++) {
                        if (this.field[k][j] != null) {
                            if (this.field[k][j].getColorID() == l) {
                                var e = new createjs.Point(this.field[k][j].x, this.field[k][j].y - Constants.CELL_SIZE / 2);
                                this.addGameObjectAtPos(new KillColorEffect(c, e), this, c.x, c.y);
                                this.field[k][j].match(Chip.MATCH_REASON_BONUS_EFFECT_5)
                            }
                        }
                    }
                }
            }
        }
        if (n.getBonusType() == Chip.BONUS_BOMB) {
            this.boom(n);
            n.match(Chip.MATCH_REASON_I_AM_BONUS);
            m.match(Chip.MATCH_REASON_EXCHANGE_WIHT_BONUS)
        }
        this.setInpunState(b.INPUT_STATE_MATCHING)
    };
    b.prototype.forcedMatchBonus = function(c) {
        this.splashTimeBoom(c);
        c.match(Chip.MATCH_REASON_I_AM_BONUS)
    };
    b.prototype.boom = function(e) {
        DNSoundManager.g_instance.play(DNSoundManager.SOUND_BOOM);
        var g = e.getIndexX();
        var f = e.getIndexY();
        var d = 1;
        for (var c = g - d; c <= g + d; c++) {
            for (var h = f - d; h <= f + d; h++) {
                if (this.validCoords(c, h) && this.field[c][h] != null) {
                    this.field[c][h].match(Chip.MATCH_REASON_BONUS_EFFECT_4_HOR)
                }
            }
        }
        this.addGameObjectAtPos(new AutoreleaseEffect(), this, e.x, e.y)
    };
    b.prototype.splashTimeBoom = function(e) {
        DNSoundManager.g_instance.playSinglePerFrame(DNSoundManager.SOUND_BOOM);
        var g = e.getIndexX();
        var f = e.getIndexY();
        var d = 1;
        for (var c = g - d; c <= g + d; c++) {
            for (var h = f - d; h <= f + d; h++) {
                if (this.validCoords(c, h) && this.field[c][h] != null && !this.field[c][h].isBonus()) {
                    this.field[c][h].match("")
                }
            }
        }
        this.addGameObjectAtPos(new AutoreleaseEffect(), this, e.x, e.y)
    };
    b.prototype.validCoords = function(c, d) {
        return c >= 0 && c < this.fieldWidth && d >= 0 && d < this.fieldHeight
    };
    b.prototype.onExchangeEnded = function() {
        var e = (this.swapChip1 != null || this.swapChip2 != null);
        var d = false;
        if (e) {
            if (this.swapChip1.isBonus()) {
                d = true
            }
            if (this.swapChip2.isBonus()) {
                d = true
            }
        }
        var c = this.findMatches();
        if (c.length == 0) {
            if (!d) {
                if (e) {
                    this.exchangeChips(this.swapChip1, this.swapChip2);
                    this.swapChip1 = null;
                    this.swapChip2 = null
                } else {
                    this.setInpunState(b.INPUT_STATE_WAIT_SELECTION)
                }
            }
        } else {
            this.decreseMoves();
            this.matchMatches(c);
            this.checkStrawberryLand(this.swapChip1);
            this.checkStrawberryLand(this.swapChip2)
        } if (e && d) {
            if (this.swapChip1.isBonus()) {
                this.matchBonus(this.swapChip1, this.swapChip2)
            }
            if (this.swapChip2.isBonus()) {
                this.matchBonus(this.swapChip2, this.swapChip1)
            }
            this.decreseMoves();
            this.checkStrawberryLand(this.swapChip1);
            this.checkStrawberryLand(this.swapChip2)
        }
    };
    b.prototype.decreseMoves = function() {
        if (this.loseType == b.LOSE_TYPE_MOVES) {
            this.moves--;
            if (this.moves < 0) {
                this.moves = 0
            }
            this.movesLabel.setText(this.moves.toString())
        }
    };
    b.prototype.findMatches = function() {
        var d = Array();
        for (var j = 0; j < this.fieldHeight; j++) {
            for (var c = 0; c < this.fieldWidth;) {
                var h = -1;
                var e = 0;
                var g = new Array();
                for (var f = c; f < this.fieldWidth; f++) {
                    if (this.field[f][j] == null || this.field[f][j].isBonus() || this.field[f][j].getColorID() == -1) {
                        break
                    } else {
                        if (h == -1) {
                            h = this.field[f][j].getColorID()
                        }
                    } if (this.field[f][j].getColorID() == h) {
                        g.push(this.field[f][j]);
                        e++
                    } else {
                        break
                    }
                }
                if (e >= 3) {
                    d.push(g)
                }
                if (e != 0) {
                    c += e
                } else {
                    c++
                }
            }
        }
        for (var c = 0; c < this.fieldWidth; c++) {
            for (var j = 0; j < this.fieldHeight; j) {
                var h = -1;
                var e = 0;
                var g = new Array();
                for (var f = j; f < this.fieldHeight; f++) {
                    if (this.field[c][f] == null || this.field[c][f].isBonus() || this.field[c][f].getColorID() == -1) {
                        break
                    } else {
                        if (h == -1) {
                            h = this.field[c][f].getColorID()
                        }
                    } if (this.field[c][f].getColorID() == h) {
                        g.push(this.field[c][f]);
                        e++
                    } else {
                        break
                    }
                }
                if (e >= 3) {
                    d.push(g)
                }
                if (e != 0) {
                    j += e
                } else {
                    j++
                }
            }
        }
        return d
    };
    b.prototype.onMouseUp = function(c, d) {
        a.prototype.onMouseUp.call(this, c, d);
        this.selectedChip = null
    };
    b.prototype.onMouseDown = function(d, f) {
        a.prototype.onMouseDown.call(this, d, f);
        if (this.waitLose || this.waitWin) {
            return
        }
        f -= this.y;
        if (this.inputState != b.INPUT_STATE_WAIT_SELECTION) {
            return
        }
        if (this.isLolipop()) {
            var c = this.findChipAt(d, f);
            if (c && !c.isHole() && !c.isStrawberry()) {
                c.match(Chip.MATCH_REASON_BONUS_EFFECT_5);
                this.setInpunState(b.INPUT_STATE_MATCHING);
                this.stopLolipop();
                DNSoundManager.g_instance.play(DNSoundManager.SOUND_LIGHTING);
                var e = DNAssetsManager.g_instance.getCenteredImageWithProxy(Images.LIGHTING);
                this.addChild(e);
                e.x = c.x;
                e.y = c.y - 40;
                e.alpha = 0;
                createjs.Tween.get(e).to({
                    alpha: 1
                }, 300, createjs.Ease.linear).wait(300).to({
                    alpha: 0
                }, 300, createjs.Ease.linear);
                createjs.Tween.get(e).to({
                    rotation: 10
                }, 200, createjs.Ease.linear).to({
                    rotation: -10
                }, 200, createjs.Ease.linear).to({
                    rotation: 10
                }, 200, createjs.Ease.linear).to({
                    rotation: -10
                }, 200, createjs.Ease.linear)
            }
            return
        }
        var c = this.checkChipSelection(d, f);
        if (c) {
            if (c == this.selectedChip) {
                return
            }
            if (!this.selectedChip) {
                this.selectedChip = c;
                this.selectedChip.select()
            } else {
                if (this.canExchange(this.selectedChip, c)) {
                    this.lastMovedChip = this.selectedChip;
                    this.exchangeChips(this.selectedChip, c);
                    DNSoundManager.g_instance.play(DNSoundManager.SOUND_EXCHANGE)
                } else {
                    this.selectedChip.deselect();
                    this.selectedChip = c;
                    this.selectedChip.select()
                }
            }
        }
    };
    b.prototype.onMouseMove = function(c, d) {
        a.prototype.onMouseMove.call(this, c, d);
        if (this.inputState != b.INPUT_STATE_WAIT_SELECTION) {
            return
        }
        this.onMouseDown(c, d)
    };
    b.prototype.shiftChips = function() {
        this.matchInARow++;
        var e = false;
        for (var f = 0; f < this.fieldWidth; f++) {
            for (var h = this.fieldHeight - 1; h >= 0; h--) {
                var c = this.field[f][h];
                if (!c) {
                    continue
                }
                if (!c.movable()) {
                    continue
                }
                for (var d = this.fieldHeight - 1; d > h; d--) {
                    if (this.field[f][d] == null) {
                        e = true;
                        var g = d;
                        this.field[f][h].shiftDown(g, this.getYPosByYIndex(g));
                        this.field[f][g] = this.field[f][h];
                        this.field[f][h] = null;
                        break
                    }
                }
            }
        }
        if (e) {
            this.setInpunState(b.INPUT_STATE_SHIFT)
        } else {
            this.spawnNewChips()
        }
    };
    b.prototype.spawnNewChips = function() {
        var e = 0;
        for (var c = 0; c < this.fieldWidth; c++) {
            var d = -1;
            for (var f = this.fieldHeight - 1; f >= 0; f--) {
                if (this.field[c][f] == null) {
                    if (d == -1) {
                        d = f
                    }
                    e++;
                    this.createChip(c, f, (d - f) * 0.13)
                }
            }
        }
        if (e > 0) {
            this.setInpunState(b.INPUT_STATE_WAIT_SPAWN)
        } else {
            this.setInpunState(b.INPUT_STATE_WAIT_SELECTION);
            this.onStartNextMove()
        }
    };
    b.prototype.spawnDefinedChips = function(d) {
        for (var c = 0; c < this.fieldWidth; c++) {
            for (var e = 0; e < this.fieldHeight; e++) {
                this.createChipWithColorID(c, e, (7 - e) * 0.13 + c * 0.11, d[e][c])
            }
        }
        this.setInpunState(b.INPUT_STATE_WAIT_SPAWN)
    };
    b.prototype.checkChipSelection = function(d, g) {
        for (var e = 0; e < this.fieldWidth; e++) {
            for (var f = 0; f < this.fieldHeight; f++) {
                var c = this.field[e][f];
                if (c && c.movable()) {
                    if ((Math.abs(c.x - d) < Constants.CELL_SIZE / 2) && (c.y > g && c.y < g + Constants.CELL_SIZE)) {
                        return c
                    }
                }
            }
        }
        return null
    };
    b.prototype.findChipAt = function(d, g) {
        for (var e = 0; e < this.fieldWidth; e++) {
            for (var f = 0; f < this.fieldHeight; f++) {
                var c = this.field[e][f];
                if (c) {
                    if ((Math.abs(c.x - d) < Constants.CELL_SIZE / 2) && (c.y > g && c.y < g + Constants.CELL_SIZE)) {
                        return c
                    }
                }
            }
        }
        return null
    };
    b.prototype.setNegateInpunStateTime = function() {
        this.inputStateTime = -0.2
    };
    b.prototype.setInpunState = function(g) {
        this.inputState = g;
        this.inputStateTime = 0;
        if (this.inputState == b.INPUT_STATE_WAIT_SELECTION) {
            this.matchInARow = 0;
            if (this.findMoves()) {
                if (this.showHint) {
                    var e = this.field[this.findedMatchPos1.x][this.findedMatchPos1.y];
                    var d = this.field[this.findedMatchPos2.x][this.findedMatchPos2.y];
                    this.moveHint = new MoveHint(this.findedMatchPos1.y != this.findedMatchPos2.y);
                    this.moveHint.x = (e.x + d.x) / 2;
                    this.moveHint.y = (e.y + d.y) / 2 - Constants.CELL_SIZE / 2;
                    this.showHint = false
                }
            } else {
                if (this.moveHint) {
                    if (this.moveHint.isDead()) {
                        this.moveHint = null
                    } else {
                        this.moveHint.hide()
                    }
                }
                for (var f = 0; f < 100; f++) {
                    var c = this.field[Utils.RandomRangeInt(0, this.fieldWidth - 1)][Utils.RandomRangeInt(0, this.fieldHeight - 1)];
                    if (c.isChip() && !c.haveCage()) {
                        c.convertToBonus([Chip.BONUS_BOMB, Chip.BONUS_4, Chip.BONUS_5][Utils.RandomRangeInt(0, 2)]);
                        break
                    }
                }
            } if (this.loseType == b.LOSE_TYPE_MOVES) {
                if (this.moves <= 0) {
                    this.lose(b.LOSE_REASON_MOVES)
                }
            }
        }
    };
    b.prototype.takeStockMatch = function(d) {
        var c = d.getIndexX();
        var e = d.getIndexY();
        if (this.field[c][e] == d) {
            if (this.goal == b.GOAL_COUNT) {
                if (d.getColorID() == this.goalChipID) {
                    this.chipGoalCount--;
                    if (this.chipGoalCount <= 0) {
                        this.chipGoalCount = 0;
                        this.win()
                    }
                    this.goalLabel.setText(this.chipGoalCount.toString())
                }
            }
        }
    };
    b.prototype.clearCell = function(d) {
        var c = d.getIndexX();
        var e = d.getIndexY();
        if (this.field[c][e] == d) {
            if (this.goal == b.GOAL_COUNT) {
                if (d.getColorID() == this.goalChipID) {
                    this.chipGoalCount--;
                    if (this.chipGoalCount <= 0) {
                        this.chipGoalCount = 0;
                        this.win()
                    }
                    this.goalLabel.setText(this.chipGoalCount.toString())
                }
            }
            if (d.getMatchReason() == Chip.MATCH_REASON_BONUS_EFFECT_5 || d.getMatchReason() == Chip.MATCH_REASON_BONUS_EFFECT_4_HOR || d.getMatchReason() == Chip.MATCH_REASON_BONUS_EFFECT_4_VERT) {
                this.runParticleEffect(d.x, d.y - Constants.CELL_SIZE / 2)
            }
            this.field[c][e] = null
        }
        this.tryClearDirt(c, e);
        if (!d.isStoneHeart()) {
            this.tryClearStoneHeart(c, e)
        }
        if (!d.isChocolate()) {
            this.tryClearChocolate(c, e)
        }
    };
    b.prototype.tryClearDirt = function(d, f) {
        var e = this.fieldDirt[d][f];
        if (e) {
            if (e.name == Images.DIRT_1) {
                this.fieldDirt[d][f] = null;
                if (--this.dirtCount == 0) {
                    this.win()
                }
                createjs.Tween.get(e).to({
                    alpha: 0
                }, 300, createjs.Ease.linear)
            } else {
                e.visible = false;
                var c = DNAssetsManager.g_instance.getCenteredImageWithProxy(Images.DIRT_1);
                c.name = Images.DIRT_1;
                c.x = this.getXPosByXIndex(d);
                c.y = this.getYPosByYIndex(f) - Constants.CELL_SIZE / 2;
                this.dirtLayer.addChild(c);
                this.fieldDirt[d][f] = c
            }
        }
        if (this.goal == b.GOAL_DIRT) {
            this.goalLabel.setText(this.dirtCount.toString())
        }
    };
    b.prototype.tryClearStoneHeart = function(d, e) {
        var c;
        c = this.getChipAt(d + 1, e);
        if (c && c.isStoneHeart()) {
            c.fallDown()
        }
        c = this.getChipAt(d - 1, e);
        if (c && c.isStoneHeart()) {
            c.fallDown()
        }
        c = this.getChipAt(d, e + 1);
        if (c && c.isStoneHeart()) {
            c.fallDown()
        }
        c = this.getChipAt(d, e - 1);
        if (c && c.isStoneHeart()) {
            c.fallDown()
        }
    };
    b.prototype.tryClearChocolate = function(d, e) {
        var c;
        c = this.getChipAt(d + 1, e);
        if (c && c.isChocolate()) {
            c.fallDown();
            this.wasChocolateClear = true
        }
        c = this.getChipAt(d - 1, e);
        if (c && c.isChocolate()) {
            c.fallDown();
            this.wasChocolateClear = true
        }
        c = this.getChipAt(d, e + 1);
        if (c && c.isChocolate()) {
            c.fallDown();
            this.wasChocolateClear = true
        }
        c = this.getChipAt(d, e - 1);
        if (c && c.isChocolate()) {
            c.fallDown();
            this.wasChocolateClear = true
        }
    };
    b.prototype.finishLevel = function() {
        for (var c = 0; c < this.fieldWidth; c++) {
            for (var d = 0; d < this.fieldHeight; d++) {
                if (this.field[c][d] != null && this.field[c][d].isNormal()) {
                    this.field[c][d].fallDown()
                }
            }
        }
    };
    b.prototype.lose = function(c) {
        if (!this.waitWin && !this.waitLose) {
            this.loseReason = c;
            this.waitLose = true;
            switch (c) {
                case b.LOSE_REASON_MOVES:
                    this.addGameObjectAt(new TimeIsUpEffect(Images.LOSE_MOVES), this);
                    break;
                case b.LOSE_REASON_BOMB:
                    this.addGameObjectAt(new TimeIsUpEffect(Images.LOSE_BOMB), this);
                    break;
                case b.LOSE_REASON_TIME:
                    this.addGameObjectAt(new TimeIsUpEffect(Images.LOSE_TIME), this);
                    break
            }
            DNSoundManager.g_instance.play(DNSoundManager.SOUND_LOSE)
        }
    };
    b.prototype.win = function() {
        if (!this.waitWin && !this.waitLose) {
            this.waitWin = true;
            this.stars = this.calcStarsCount();
            DNSoundManager.g_instance.play(DNSoundManager.SOUND_WIN)
        }
    };
    b.prototype.addPointsAt = function(c, e) {
        if (c.getBonusType() == null) {
            var h = 40;
            switch (e) {
                case Chip.MATCH_REASON_EXCHANGE_WIHT_BONUS:
                    h = 40;
                    break;
                case Chip.MATCH_REASON_BONUS_EFFECT_5:
                    h = 100;
                    break;
                case Chip.MATCH_REASON_BONUS_EFFECT_4_HOR:
                    h = 90;
                    break;
                case Chip.MATCH_REASON_BONUS_EFFECT_4_VERT:
                    h = 120;
                    break;
                case Chip.MATCH_REASON_I_AM_BONUS:
                    h = 150;
                    break;
                default:
                    h = 40 + this.matchInARow * 20;
                    break
            }
            var g = new FlyingPoints(h);
            this.score += h;
            var f = c.x;
            var d = c.y - Constants.CELL_SIZE / 2;
            if (this.tryShowAwesome(f, d)) {
                return
            }
            if (this.tryShowSuperb(f, d)) {
                return
            }
            this.addGameObjectAtPos(g, this.effectsLayer, f, d);
            if (this.goal == b.GOAL_SCORE) {
                if (this.score >= this.scoreGoalCount) {
                    this.win()
                }
            }
        }
    };
    b.prototype.tryShowSuperb = function(d, e) {
        if (this.matchInARow >= 3 && this.superbEffectTime != this.liveTime) {
            this.superbEffectTime = this.liveTime;
            var c = new SuperbEffect();
            this.addGameObjectAtPos(c, this, d, e);
            DNSoundManager.g_instance.play(DNSoundManager.SOUND_AWESOME);
            if (c.x < 120) {
                c.x = 120
            }
            if (c.x > Constants.ASSETS_WIDTH - 120) {
                c.x = Constants.ASSETS_WIDTH - 120
            }
            this.score += 500;
            return true
        }
        return false
    };
    b.prototype.tryShowAwesome = function(c, e) {
        if (this.matchInARow == 2 && this.awesomeEffectTime != this.liveTime) {
            this.awesomeEffectTime = this.liveTime;
            var d = new ShowAwesomeEffect();
            this.addGameObjectAtPos(d, this, c, e);
            DNSoundManager.g_instance.play(DNSoundManager.SOUND_AWESOME);
            if (d.x < 120) {
                d.x = 120
            }
            if (d.x > Constants.ASSETS_WIDTH - 120) {
                d.x = Constants.ASSETS_WIDTH - 120
            }
            this.score += 200;
            return true
        }
        return false
    };
    b.prototype.findMoves = function() {
        var e = [
            [2, -1],
            [3, 0],
            [2, 1]
        ];
        var g = [
            [-1, -1],
            [-2, 0],
            [-1, 1]
        ];
        var j = [
            [1, -1],
            [1, 1]
        ];
        for (var i = 0; i < this.fieldHeight; i++) {
            for (var c = 0; c < this.fieldWidth - 1; c++) {
                if (this.field[c][i].getColorID() == this.field[c + 1][i].getColorID()) {
                    if (this.findPattern(c, i, this.field[c][i].getColorID(), e, c + 2, i)) {
                        this.showHint = true;
                        return true
                    }
                    if (this.findPattern(c, i, this.field[c][i].getColorID(), g, c - 1, i)) {
                        this.showHint = true;
                        return true
                    }
                }
            }
        }
        for (var i = 0; i < this.fieldHeight; i++) {
            for (var c = 0; c < this.fieldWidth - 2; c++) {
                if (this.field[c][i].getColorID() == this.field[c + 2][i].getColorID()) {
                    if (this.findPattern(c, i, this.field[c][i].getColorID(), j, c + 1, i)) {
                        this.showHint = true;
                        return true
                    }
                }
            }
        }
        var d = [
            [-1, 2],
            [0, 3],
            [1, 2]
        ];
        var h = [
            [-1, -1],
            [0, -2],
            [1, -1]
        ];
        var f = [
            [-1, 1],
            [1, 1]
        ];
        for (var i = 0; i < this.fieldHeight - 1; i++) {
            for (var c = 0; c < this.fieldWidth; c++) {
                if (this.field[c][i].getColorID() == this.field[c][i + 1].getColorID()) {
                    if (this.findPattern(c, i, this.field[c][i].getColorID(), d, c, i + 2)) {
                        this.showHint = true;
                        return true
                    }
                    if (this.findPattern(c, i, this.field[c][i].getColorID(), h, c, i - 1)) {
                        this.showHint = true;
                        return true
                    }
                }
            }
        }
        for (var i = 0; i < this.fieldHeight - 2; i++) {
            for (var c = 0; c < this.fieldWidth; c++) {
                if (this.field[c][i].getColorID() == this.field[c][i + 2].getColorID()) {
                    if (this.findPattern(c, i, this.field[c][i].getColorID(), f, c, i + 1)) {
                        this.showHint = true;
                        return true
                    }
                }
            }
        }
        for (var i = 0; i < this.fieldHeight; i++) {
            for (var c = 0; c < this.fieldWidth; c++) {
                if (this.field[c][i].isBonus()) {
                    if (this.validCoords(c - 1, i) && (this.field[c - 1][i].isChip() || this.field[c - 1][i].isBonus())) {
                        return true
                    }
                    if (this.validCoords(c + 1, i) && (this.field[c + 1][i].isChip() || this.field[c + 1][i].isBonus())) {
                        return true
                    }
                    if (this.validCoords(c, i + 1) && (this.field[c][i + 1].isChip() || this.field[c][i + 1].isBonus())) {
                        return true
                    }
                    if (this.validCoords(c, i - 1) && (this.field[c][i - 1].isChip() || this.field[c][i - 1].isBonus())) {
                        return true
                    }
                }
            }
        }
        return false
    };
    b.prototype.findPattern = function(c, k, d, h, g, f) {
        if (d <= 0) {
            return false
        }
        if (g < 0 || g >= this.fieldWidth || f < 0 || f >= this.fieldHeight) {
            return false
        }
        if (this.field[g][f] && !this.field[g][f].movable()) {
            return false
        }
        for (var e = 0; e < h.length; e++) {
            var j = this.getColorAt(c + h[e][0], k + h[e][1]);
            if (j <= 0) {
                continue
            }
            if (j == d) {
                if (this.field[g][f].haveCage()) {
                    continue
                }
                if (this.field[c + h[e][0]][k + h[e][1]].haveCage()) {
                    continue
                }
                this.findedMatchPos1 = new createjs.Point(g, f);
                this.findedMatchPos2 = new createjs.Point(c + h[e][0], k + h[e][1]);
                return true
            }
        }
        return false
    };
    b.prototype.setHintIndeces = function(d, f, c, e) {
        this.findedMatchPos1 = new createjs.Point(d, f);
        this.findedMatchPos2 = new createjs.Point(c, e)
    };
    b.prototype.getChipAt = function(c, d) {
        if (c < 0 || d < 0 || c >= this.fieldWidth || d >= this.fieldHeight || !this.field[c][d] || this.field[c][d].isHole()) {
            return null
        }
        return this.field[c][d]
    };
    b.prototype.getColorAt = function(c, d) {
        if (c < 0 || d < 0 || c >= this.fieldWidth || d >= this.fieldHeight || !this.field[c][d] == null) {
            return -1
        }
        return this.field[c][d].getColorID()
    };
    b.prototype.onShiftEnded = function(c) {
        if (this.liveTime > this.lastDropSoundTime + 0.06) {
            this.lastDropSoundTime = this.liveTime;
            var e = Utils.RandomRangeInt(0, 2);
            for (var d = 0; e == this.lastDropID && d < 10; d++) {
                e = Utils.RandomRangeInt(0, 2)
            }
            this.lastDropID = e;
            switch (e) {
                case 0:
                    DNSoundManager.g_instance.play(DNSoundManager.SOUND_DROP_1);
                    break;
                case 1:
                    DNSoundManager.g_instance.play(DNSoundManager.SOUND_DROP_2);
                    break;
                case 2:
                    DNSoundManager.g_instance.play(DNSoundManager.SOUND_DROP_3);
                    break
            }
        }
        this.checkStrawberryLand(c)
    };
    b.prototype.checkStrawberryLand = function(c) {
        if (c && c.isStrawberry()) {
            var d = c.getIndexX();
            for (var e = c.getIndexY() + 1; e < this.fieldHeight; e++) {
                if (!this.field[d][e].isHole()) {
                    return
                }
            }
            c.flyAway();
            this.addChild(c)
        }
    };
    b.prototype.runParticleEffect = function(d, c) {
        var h = 80;
        var g = Utils.RandomRangeInt(3, 4);
        for (var e = 0; e < g; e++) {
            var j = Utils.RadToGrad(Utils.RandomRange(0, 360));
            var f = new HeartParticle(Math.cos(j) * h, Math.sin(j) * h);
            this.addGameObject(f);
            this.addChild(f);
            f.x = d + Utils.RandomRange(-Constants.CELL_SIZE / 3, Constants.CELL_SIZE / 3);
            f.y = c + Utils.RandomRange(-Constants.CELL_SIZE / 3, Constants.CELL_SIZE / 3)
        }
    };
    b.prototype.onStrawberrySaveQuick = function() {
        if (this.goal == b.GOAL_STRAWBERRY) {
            var c = this.calcStrawberryCount();
            if (c <= 0) {
                this.win()
            }
        }
    };
    b.prototype.onStrawberrySave = function() {
        if (this.goal == b.GOAL_STRAWBERRY) {
            this.goalLabel.setText(this.calcStrawberryCount().toString())
        }
    };
    b.prototype.checkChocolateMultiply = function() {
        if (!this.wasChocolateClear) {
            var h = [];
            var l = [{
                x: 0,
                y: +1
            }, {
                x: 0,
                y: -1
            }, {
                x: +1,
                y: 0
            }, {
                x: -1,
                y: 0
            }];
            for (var e = 0; e < this.fieldWidth; e++) {
                for (var k = 0; k < this.fieldHeight; k++) {
                    if (this.field[e][k] && this.field[e][k].isChocolate()) {
                        h.push(this.field[e][k])
                    }
                }
            }
            if (h.length != 0) {
                Utils.shuffle(h);
                for (var g = 0; g < h.length; g++) {
                    var f = h[g];
                    Utils.shuffle(l);
                    for (var j = 0; j < l.length; j++) {
                        var e = l[j]["x"];
                        var k = l[j]["y"];
                        if (this.validCoords(e + f.getIndexX(), k + f.getIndexY())) {
                            var c = this.field[e + f.getIndexX()][k + f.getIndexY()];
                            if (c.isChip() && !c.haveCage()) {
                                c.convertToChocolateWithAnim();
                                this.setInpunState(b.INPUT_STATE_WAIT_SELECTION);
                                return
                            }
                        }
                    }
                }
            }
        }
    };
    b.prototype.onStartNextMove = function() {
        this.checkChocolateMultiply();
        this.wasChocolateClear = false;
        if (this.waitWin) {
            if (this.needRunSplashTime) {
                this.needRunSplashTime = false;
                this.runSplashTime();
                this.waitWinTime = -10000000
            } else {
                if (this.killAllBonuses()) {
                    this.setInpunState(b.INPUT_STATE_MATCHING)
                } else {
                    this.waitWinTime = 0
                }
            }
        } else {
            for (var c = 0; c < this.fieldWidth; c++) {
                for (var d = 0; d < this.fieldHeight; d++) {
                    if (this.field[c][d] && this.field[c][d].isBomb()) {
                        this.field[c][d].onDecreseMoves()
                    }
                }
            }
        }
    };
    b.prototype.killAllBonuses = function() {
        var d = 0;
        for (var c = 0; c < this.fieldWidth; c++) {
            for (var e = 0; e < this.fieldHeight; e++) {
                if (this.field[c][e] && this.field[c][e].isBonus()) {
                    this.forcedMatchBonus(this.field[c][e]);
                    d++
                }
            }
        }
        return d != 0
    };
    b.prototype.convertRandomChipToBonus = function() {
        for (var e = 0; e < 100; e++) {
            var d = Utils.RandomRangeInt(1, this.fieldWidth - 2);
            var f = Utils.RandomRangeInt(0, this.fieldHeight - 1);
            var c = this.field[d][f];
            if (c && c.isChip() && !c.haveCage()) {
                c.convertToSplashTimeBonus();
                DNSoundManager.g_instance.play(DNSoundManager.SOUND_MATCH_5);
                break
            }
        }
        this.onCreateBonusDuringSplashTime()
    };
    b.prototype.runAllBonuses = function() {
        var e = [];
        var d = 1;
        for (var c = 0; c < this.fieldWidth; c++) {
            for (var f = this.fieldHeight - 1; f >= 0; f--) {
                if (this.field[c][f] && this.field[c][f].isBonus()) {
                    e.push(this.field[c][f])
                }
            }
        }
        this.addGameObject(new BonusSplasher(e))
    };
    b.prototype.onCreateBonusDuringSplashTime = function() {
        if (this.loseType == b.LOSE_TYPE_MOVES) {
            this.moves -= 3;
            if (this.moves <= 0) {
                this.moves = 0
            }
            this.movesLabel.setText(this.moves.toString())
        }
    };
    b.prototype.saveByBooster = function(c) {
        this.waitLose = false;
        this.waitLoseTime = 0;
        switch (c) {
            case b.LOSE_REASON_MOVES:
                this.activateBooster(GameData.BOOSTER_MOVES);
                break;
            case b.LOSE_REASON_TIME:
                this.activateBooster(GameData.BOOSTER_TIME);
                break;
            case b.LOSE_REASON_BOMB:
                this.activateBooster(GameData.BOOSTER_BOMB);
                break
        }
    };
    b.prototype.activateBooster = function(c) {
        GameData.getInstance().spendBooster(c);
        switch (c) {
            case GameData.BOOSTER_MOVES:
                this.moves += 5;
                this.movesLabel.setText(this.moves.toString());
                break;
            case GameData.BOOSTER_TIME:
                this.time += 30;
                this.timeLabel.setText(Utils.IntToTimeString(Math.round(this.time)));
                break;
            case GameData.BOOSTER_BOMB:
                this.increseAllBombsCounters();
                break;
            case GameData.BOOSTER_4:
                this.convertRandomChipToBonus4();
                break;
            case GameData.BOOSTER_5:
                this.convertRandomChipToBonus5();
                break;
            case GameData.BOOSTER_LOLIPOP:
                this.runLolipopBooster();
                break
        }
    };
    b.prototype.increseAllBombsCounters = function() {
        for (var c = 0; c < this.fieldWidth; c++) {
            for (var d = 0; d < this.fieldHeight; d++) {
                if (this.field[c][d] && this.field[c][d].isBomb()) {
                    this.field[c][d].increaseBombCounter()
                }
            }
        }
    };
    b.prototype.convertRandomChipToBonus4 = function() {
        for (var e = 0; e < 100; e++) {
            var d = Utils.RandomRangeInt(1, this.fieldWidth - 2);
            var f = Utils.RandomRangeInt(0, this.fieldHeight - 1);
            var c = this.field[d][f];
            if (c && c.isChip() && !c.haveCage()) {
                c.convertToStartBonus4();
                break
            }
        }
    };
    b.prototype.convertRandomChipToBonus5 = function() {
        for (var e = 0; e < 100; e++) {
            var d = Utils.RandomRangeInt(1, this.fieldWidth - 2);
            var f = Utils.RandomRangeInt(0, this.fieldHeight - 1);
            var c = this.field[d][f];
            if (c && c.isChip() && !c.haveCage()) {
                c.convertToStartBonus5();
                break
            }
        }
    };
    b.prototype.runLolipopBooster = function() {
        this.lolipop = true;
        this.lolipopEffect = new RunLolipopEffect();
        this.addGameObjectAt(this.lolipopEffect, this)
    };
    b.prototype.isLolipop = function() {
        return this.lolipop
    };
    b.prototype.stopLolipop = function() {
        if (this.lolipopEffect) {
            this.lolipopEffect.hide();
            this.lolipopEffect = null
        }
        this.lolipop = false
    };
    b.prototype.calcStarsCount = function() {
        if (this.loseType == b.LOSE_TYPE_MOVES) {
            if (this.moves >= 7) {
                return 3
            }
            if (this.moves >= 4) {
                return 2
            }
        } else {
            if (this.time >= 45) {
                return 3
            }
            if (this.time >= 30) {
                return 2
            }
        }
        return 1
    };
    b.prototype.resume = function() {
        this.booster1.updateCaption();
        this.booster2.updateCaption()
    };
    b.g_curLevel = -1;
    b.LOSE_REASON_TIME = "LOSE_REASON_TIME";
    b.LOSE_REASON_MOVES = "LOSE_REASON_MOVES";
    b.LOSE_REASON_BOMB = "LOSE_REASON_BOMB";
    b.INPUT_STATE_WAIT_SELECTION = "INPUT_STATE_WAIT_SELECTION";
    b.INPUT_STATE_LOCK = "INPUT_STATE_LOCK";
    b.INPUT_STATE_WAIT_SPAWN = "INPUT_STATE_WAIT_SPAWN";
    b.INPUT_STATE_SHIFT = "INPUT_STATE_SHIFT";
    b.INPUT_STATE_MATCHING = "INPUT_STATE_MATCHING";
    b.GOAL_DIRT = "GOAL_DIRT";
    b.GOAL_COUNT = "GOAL_COUNT";
    b.GOAL_STRAWBERRY = "GOAL_STRAWBERRY";
    b.GOAL_SCORE = "GOAL_SCORE";
    b.LOSE_TYPE_MOVES = "LOSE_TYPE_MOVES";
    b.LOSE_TYPE_TIME = "LOSE_TYPE_TIME";
    return b
})(DNGameState);
var PortraitLockState = (function(b) {
    __extends(a, b);

    function a() {
        b.call(this);
        var d = new createjs.Shape();
        d.graphics.beginFill("#4aa4c2");
        d.graphics.drawRect(0, 0, Constants.ASSETS_WIDTH, Constants.ASSETS_HEIGHT);
        d.graphics.endFill();
        this.addChild(d);
        var c = DNAssetsManager.g_instance.getCenteredImageWithProxy(Images.ROTATE);
        this.addChild(c);
        c.x = Constants.ASSETS_WIDTH / 2;
        c.y = Constants.ASSETS_HEIGHT / 2
    }
    a.prototype.onOrientationChanged = function(c) {
        if (!c) {
            DNStateManager.g_instance.popState()
        }
    };
    return a
})(DNGameState);
var PreloaderState = (function(b) {
    __extends(a, b);

    function a(d, g, e, c) {
        var f = this;
        b.call(this);
        this.loadingBar = new DNLoadingBar("#000000", "#ffffff", "#666666", "#ffffff");
        new DNAssetsManager(d, g, e, c, function(h) {
            return f.handleProgress(h)
        });
        this.addChild(this.loadingBar);
        this.loadingBar.x = Constants.ASSETS_WIDTH / 2;
        this.loadingBar.y = Constants.ASSETS_HEIGHT / 2
    }
    a.prototype.handleProgress = function(c) {
        this.loadingBar.setProgress(c.loaded)
    };
    a.prototype.onOrientationChanged = function(c) {};
    return a
})(DNGameState);
var RunLolipopEffect = (function(a) {
    __extends(b, a);

    function b() {
        a.call(this);
        this.text = new createjs.Text(DNStringManager.getInstance().getString(DNStringManager.POWERUP_CELL), "bold 33px Times New Roman", "#ffffff");
        this.shaderShape = new createjs.Shape();
        this.shaderShape.graphics.beginFill("#000000");
        this.shaderShape.graphics.drawRect(0, 0, Constants.ASSETS_WIDTH, 115);
        this.shaderShape.graphics.endFill();
        this.addChild(this.shaderShape);
        this.shaderShape.alpha = 0;
        createjs.Tween.get(this.shaderShape).to({
            alpha: 0.75
        }, 500, createjs.Ease.linear);
        this.text.textAlign = "center";
        this.text.lineWidth = 400;
        this.text.x = Constants.ASSETS_WIDTH / 2;
        this.text.y = 30;
        this.addChild(this.text);
        createjs.Tween.get(this.text).to({
            alpha: 1
        }, 500, createjs.Ease.linear)
    }
    b.prototype.update = function(c) {
        a.prototype.update.call(this, c);
        this.text.scaleX = this.text.scaleY = 1 + Math.sin(this.liveTime * 7) * 0.03
    };
    b.prototype.hide = function() {
        var c = this;
        createjs.Tween.get(this.text).to({
            alpha: 0
        }, 300, createjs.Ease.linear);
        createjs.Tween.get(this.shaderShape).to({
            alpha: 0
        }, 400, createjs.Ease.linear).call(function() {
            return c.kill()
        })
    };
    return b
})(DNGameObject);
var SaveBoosterButton = (function(a) {
    __extends(b, a);

    function b(d, c, e) {
        a.call(this, d, c, e)
    }
    return b
})(BoosterButtonBase);
var SelectBoosterButton = (function(b) {
    __extends(a, b);

    function a(d, c) {
        var e = this;
        b.call(this, d, c);
        this.checked = false;
        this.setHandler(function() {
            return e.onTouch()
        })
    }
    a.prototype.onTouch = function() {
        if (this.count > 0) {
            this.checked = !this.checked;
            this.selectedPic.visible = this.checked
        } else {
            DNStateManager.g_instance.pushState(new BuyMoreBoostersState(this))
        }
    };
    return a
})(BoosterButtonBase);
var SelectBoosterState = (function(a) {
    __extends(b, a);

    function b(j) {
        var i = this;
        a.call(this);
        this.level = j;
        var c = new DNJellyButton(Images.BUTTON_CLOSE, function() {
            return i.hide()
        });
        this.panel.addChild(c);
        this.addGuiObject(c);
        c.x = +230;
        c.y = -190;
        var g = new DNJellyButton(Images.BUTTON_PLAY, function() {
            return i.onPlayTouch()
        });
        this.panel.addChild(g);
        this.addGuiObject(g);
        g.x = 0;
        g.y = 130;
        var h = new createjs.Text(DNStringManager.getInstance().getString(DNStringManager.SELECT_BOOSTER), "bold 33px Times New Roman", "#6f6aa4");
        h.textAlign = "center";
        h.lineWidth = 400;
        h.y = -180;
        this.panel.addChild(h);
        if (GameData.getInstance().getLevelDef(j).moves != 0) {
            var f = new SelectBoosterButton(Images.BOOSTER_MOVES, GameData.BOOSTER_MOVES);
            this.panel.addChild(f);
            this.addGuiObject(f);
            f.x = -130;
            f.y = -30
        }
        if (GameData.getInstance().getLevelDef(j).time != 0) {
            var f = new SelectBoosterButton(Images.BOOSTER_TIME, GameData.BOOSTER_TIME);
            this.panel.addChild(f);
            this.addGuiObject(f);
            f.x = -130;
            f.y = -30
        }
        var e = new SelectBoosterButton(Images.BOOSTER_4, GameData.BOOSTER_4);
        this.panel.addChild(e);
        this.addGuiObject(e);
        e.x = 0;
        e.y = -30;
        var d = new SelectBoosterButton(Images.BOOSTER_5, GameData.BOOSTER_5);
        this.panel.addChild(d);
        this.addGuiObject(d);
        d.x = +130;
        d.y = -30;
        this.boosters = [f, e, d]
    }
    b.prototype.onPlayTouch = function() {
        var c = [];
        for (var d = 0; d < this.boosters.length; d++) {
            if (this.boosters[d].checked) {
                c.push(this.boosters[d].boosterName)
            }
        }
        DNStateManager.g_instance.pushState(new CoolTransitionInState(new PlayState(this.level, true, c)))
    };
    return b
})(PopupState);
var SelectLevelButton = (function(b) {
    __extends(a, b);

    function a(e, d) {
        var k = this;
        b.call(this, e, null);
        this.locked = false;
        this.levelNum = d;
        this.setHandler(function() {
            return k.onTouch()
        });
        if (d < GameData.getInstance().levelsAvailable()) {
            var j = new DNTextField((d + 1).toString(), DNFontDef.MAP_FONT);
            this.getPicture().addChild(j);
            j.x = -j.getBounds().width / 2 - 5;
            j.y = -j.getBounds().height / 2 - 9;
            var c = GameData.getInstance().getStarsInLevel(d);
            if (c != 0) {
                var h = [0.82, 1, 0.82];
                for (var f = 0; f < 3; f++) {
                    var g = DNAssetsManager.g_instance.getCenteredImageWithProxy((f < c) ? Images.STAR_MINI_EMPTY : Images.STAR_MINI);
                    g.x = -33 + f * 30;
                    g.y = 26;
                    g.scaleX = g.scaleY = h[f];
                    this.getPicture().addChild(g)
                }
            }
        } else {
            this.visible = false
        }
    }
    a.prototype.onTouch = function() {
        var c = new SelectBoosterState(this.levelNum);
        c.shader.visible = false;
        DNStateManager.g_instance.pushState(c)
    };
    a.prototype.onMouseDown = function(c, d) {
        if (this.locked) {
            return
        }
        b.prototype.onMouseDown.call(this, c, d);
        this.touchY = d
    };
    a.prototype.onMouseUp = function(c, d) {
        if (Math.abs(d - this.touchY) > 30) {
            this.deselect();
            return
        }
        b.prototype.onMouseUp.call(this, c, d)
    };
    a.prototype.hitTestSmart = function(c, g) {
        if (!this.enabled) {
            return
        }
        if (!this.parent || !this.visible) {
            return false
        }
        var f = this.picture.localToGlobal(0, 0);
        f.x /= Constants.SCREEN_SCALE;
        f.y /= Constants.SCREEN_SCALE;
        var d = this.picture.getBounds().width * 0.5 * this.scaleX;
        var e = this.picture.getBounds().height * 0.5 * this.scaleY;
        return f.x < c + d && f.x > c - d && f.y < g + e && f.y > g - e
    };
    a.prototype.shine = function() {
        this.shining = DNAssetsManager.g_instance.getCenteredImageWithProxy(Images.LEVEL_SHINING);
        this.addChildAt(this.shining, 0);
        this.shining.x = -5;
        this.shining.y = -2
    };
    a.prototype.update = function(c) {
        b.prototype.update.call(this, c);
        if (this.shining) {
            this.shining.rotation += c * 50;
            this.shining.scaleX = this.shining.scaleY = 1 + Math.sin(this.liveTime * 7) * 0.06
        }
    };
    return a
})(DNJellyButton);
var SelectLevelState = (function(a) {
    __extends(b, a);

    function b(g) {
        if (typeof g === "undefined") {
            g = -1
        }
        var f = this;
        a.call(this);
        this.touchPointY = 0;
        this.layer = new createjs.Container();
        this.tween = null;
        this.ySpeed = 0;
        this.yAcc = 1000;
        this.calcSpeedCache = 0;
        this.slidePositions = new Array();
        this.levelsPositions = [84, 3515, 106, 3394, 220, 3314, 375, 3335, 535, 3341, 639, 3239, 652, 3108, 623, 2973, 522, 2888, 377, 2918, 247, 2984, 112, 2923, 71, 2789, 70, 2629, 109, 2509, 214, 2419, 362, 2481, 531, 2461, 603, 2349, 634, 2211, 603, 2083, 509, 1987, 377, 2014, 243, 2041, 133, 1984, 97, 1874, 82, 1714, 117, 1596, 223, 1514, 366, 1537, 514, 1559, 625, 1483, 649, 1364, 632, 1246, 564, 1136, 439, 1109, 334, 1175, 196, 1209, 98, 1125, 85, 982, 122, 824, 230, 776, 351, 781, 472, 808, 589, 786, 636, 690, 630, 587, 567, 491, 442, 476, 332, 512, 218, 536, 120, 487, 82, 392, 104, 301, 178, 226, 304, 202, 417, 228, 535, 233, 602, 160, 576, 69];
        this.addChild(this.layer);
        for (var d = 0; d < 4; d++) {
            var e = DNAssetsManager.g_instance.getImage("map_" + (d + 1));
            this.layer.addChild(e);
            e.y = 900 * d
        }
        this.mapH = 900 * 4;
        this.layer.y = -1000;
        if (g == -1) {
            g = GameData.getInstance().levelsAvailable() - 1
        }
        this.loadLayout(CurLayouts.SELECT_LEVEL_LAYOUT, this);
        for (var d = 0; d < this.levelsPositions.length / 2; d++) {
            var c = new SelectLevelButton(Images.LEVEL_BUTTON, d);
            this.addGuiObject(c);
            this.layer.addChild(c);
            c.x = (this.levelsPositions[d * 2]);
            c.y = this.levelsPositions[d * 2 + 1];
            if (d == g) {
                c.shine();
                this.layer.y = +Constants.ASSETS_HEIGHT / 2 - c.y
            }
        }
        this.checkConstrains();
        this.findGUIObject(Layouts.NAME_STARS).setText(GameData.getInstance().totalStars().toString());
        this.findGUIObject(Layouts.NAME_SCORE).setText(GameData.getInstance().getTotalScore().toString());
        this.findGUIObject(Layouts.NAME_BUTTON_BACK).setHandler(function() {
            return f.onExitTouch()
        });
        this.findGUIObject(Layouts.NAME_GOLD).setText(GameData.getInstance().getGold().toString())
    }
    b.prototype.resume = function() {
        this.findGUIObject(Layouts.NAME_GOLD).setText(GameData.getInstance().getGold().toString())
    };
    b.prototype.onExitTouch = function() {
        DNStateManager.g_instance.pushState(new CoolTransitionInState(new MainMenuState()))
    };
    b.prototype.onMouseDown = function(c, d) {
        a.prototype.onMouseDown.call(this, c, d);
        this.touchPointY = this.layer.y - d;
        this.slidePositions.length = 0;
        this.slidePositions.push({
            liveTime: this.liveTime,
            y: d
        })
    };
    b.prototype.update = function(c) {
        a.prototype.update.call(this, c);
        if (!DNStateManager.g_instance.isMouseDownNow()) {
            if (this.ySpeed != 0) {
                this.layer.y += this.ySpeed * c;
                if (this.ySpeed > 0) {
                    this.ySpeed -= c * this.yAcc;
                    if (this.ySpeed < 0) {
                        this.ySpeed = 0
                    }
                } else {
                    this.ySpeed += c * this.yAcc;
                    if (this.ySpeed > 0) {
                        this.ySpeed = 0
                    }
                }
            }
        }
        this.checkConstrains()
    };
    b.prototype.onMouseMove = function(c, d) {
        a.prototype.onMouseMove.call(this, c, d);
        this.layer.y = d + this.touchPointY;
        this.checkConstrains();
        this.slidePositions.push({
            liveTime: this.liveTime,
            y: d
        });
        if (this.slidePositions.length > 100) {
            this.calcSpeedCache = this.calcYSpeed();
            this.slidePositions.length = 0
        }
    };
    b.prototype.checkConstrains = function() {
        var c = 170 - 40;
        if (this.layer.y > c) {
            this.layer.y = c;
            this.ySpeed = 0
        }
        if (Constants.g_isPC) {
            if (this.layer.y < Constants.ASSETS_HEIGHT - this.mapH) {
                this.layer.y = Constants.ASSETS_HEIGHT - this.mapH;
                this.ySpeed = 0
            }
        } else {
            if (this.layer.y < Constants.SCREEN_HEIGHT - this.mapH) {
                this.layer.y = Constants.SCREEN_HEIGHT - this.mapH;
                this.ySpeed = 0
            }
        }
    };
    b.prototype.onMouseUp = function(c, d) {
        a.prototype.onMouseUp.call(this, c, d);
        this.slidePositions.push({
            liveTime: this.liveTime,
            y: d
        });
        this.ySpeed = this.calcYSpeed()
    };
    b.prototype.calcYSpeed = function() {
        if (this.slidePositions.length < 2) {
            return this.calcSpeedCache
        }
        var e = 0.2;
        var d;
        for (d = this.slidePositions.length - 2; d > 0; --d) {
            if (this.liveTime - this.slidePositions[d]["liveTime"] >= e) {
                break
            }
        }
        var c = this.liveTime - this.slidePositions[d]["liveTime"];
        if (c < 0.00001) {
            return 0
        }
        return (this.slidePositions[this.slidePositions.length - 1]["y"] - this.slidePositions[d]["y"]) / c
    };
    b.prototype.alignByCenter = function(c) {};
    return b
})(DNGameState);
var ShadeInState = (function(b) {
    __extends(a, b);

    function a(c) {
        var d = this;
        b.call(this);
        this.nextState = null;
        this.nextState = c;
        this.shader = new createjs.Shape();
        this.shader.graphics.beginFill("#ffffff");
        this.shader.graphics.drawRect(0, 0, Constants.ASSETS_WIDTH, Constants.SCREEN_HEIGHT);
        this.shader.graphics.endFill();
        this.addChild(this.shader);
        this.shader.alpha = 0;
        createjs.Tween.get(this.shader, {
            loop: false
        }).to({
            alpha: 1
        }, 400, createjs.Ease.linear).call(function() {
            return d.onFinishShade()
        })
    }
    a.prototype.onFinishShade = function() {
        DNStateManager.g_instance.changeState(this.nextState);
        DNStateManager.g_instance.pushState(new ShadeOutState())
    };
    a.prototype.setNextState = function(c) {
        this.nextState = c
    };
    return a
})(DNGameState);
var ShadeOutState = (function(b) {
    __extends(a, b);

    function a() {
        var c = this;
        b.call(this);
        this.shader = new createjs.Shape();
        this.shader.graphics.beginFill("#ffffff");
        this.shader.graphics.drawRect(0, 0, Constants.ASSETS_WIDTH, Constants.SCREEN_HEIGHT);
        this.shader.graphics.endFill();
        this.addChild(this.shader);
        createjs.Tween.get(this.shader, {
            loop: false
        }).to({
            alpha: 0
        }, 400, createjs.Ease.linear).call(function() {
            return c.onFinishShade()
        })
    }
    a.prototype.onFinishShade = function() {
        DNStateManager.g_instance.popState()
    };
    return a
})(DNGameState);
var ShowAwesomeEffect = (function(b) {
    __extends(a, b);

    function a() {
        b.call(this);
        this.addChild(DNAssetsManager.g_instance.getCenteredImageWithProxy(Images.AWESOME));
        this.alpha = 0;
        createjs.Tween.get(this, {
            loop: false
        }).to({
            alpha: 1
        }, 300, createjs.Ease.linear);
        this.scaleX = this.scaleY = 0.5;
        createjs.Tween.get(this, {
            loop: false
        }).to({
            scaleX: 1,
            scaleY: 1
        }, 500, createjs.Ease.backOut)
    }
    a.prototype.update = function(c) {
        b.prototype.update.call(this, c);
        if (this.liveTime > 0.7) {
            this.alpha -= c * 3;
            this.scaleX += c;
            this.scaleY += c;
            if (this.alpha <= 0) {
                this.kill()
            }
        }
    };
    return a
})(DNGameObject);
var Skewer = (function(b) {
    __extends(a, b);

    function a(d) {
        b.call(this);
        this.proxy = new createjs.Container();
        this.addChild(this.proxy);
        var c = DNAssetsManager.g_instance.getImage(d);
        c.x = -c.getBounds().width / 2;
        c.y = -c.getBounds().height;
        this.proxy.addChild(c);
        this.proxy.y = c.getBounds().height * 0.5
    }
    a.prototype.forceUpdate = function(c) {
        b.prototype.forceUpdate.call(this, c);
        this.proxy.skewX = Math.sin(this.forceLiveTime * 4) * 6 / 4;
        this.proxy.scaleY = 1 + Math.sin(this.forceLiveTime * 8) * 0.05 / 4
    };
    return a
})(DNGUIObject);
var SplashTimeEffect = (function(a) {
    __extends(b, a);

    function b(c) {
        a.call(this);
        this.counter = c;
        this.liveTime = -2
    }
    b.prototype.update = function(c) {
        a.prototype.update.call(this, c);
        if (this.liveTime > 0.3) {
            PlayState.g_instance.convertRandomChipToBonus();
            this.liveTime = 0;
            if (--this.counter <= 0) {
                this.kill();
                PlayState.g_instance.runAllBonuses()
            }
        }
    };
    return b
})(DNGameObject);
var SplashTimeMessage = (function(a) {
    __extends(b, a);

    function b() {
        var e = this;
        a.call(this);
        var c = DNAssetsManager.g_instance.getCenteredImageWithProxy(Images.TASK_PANEL);
        this.addChild(c);
        this.addChild(c);
        var d = new createjs.Text(DNStringManager.getInstance().getString(DNStringManager.SPLASH_TIME), "bold 33px Times New Roman", "#6f6aa4");
        d.textAlign = "center";
        d.y = -23;
        c.addChild(d);
        this.y = -200;
        this.x = Constants.ASSETS_WIDTH * 0.5;
        this.alpha = 0;
        createjs.Tween.get(this).wait(200).to({
            y: Constants.ASSETS_HEIGHT * 0.5,
            alpha: 1
        }, 650, createjs.Ease.backOut).wait(800).to({
            y: Constants.ASSETS_HEIGHT + 200,
            alpha: 0
        }, 550, createjs.Ease.backIn).call(function() {
            return e.kill()
        })
    }
    return b
})(DNGameObject);
var SuperbEffect = (function(b) {
    __extends(a, b);

    function a() {
        b.call(this);
        this.addChild(DNAssetsManager.g_instance.getCenteredImageWithProxy(Images.SUPERB));
        this.alpha = 0;
        createjs.Tween.get(this, {
            loop: false
        }).to({
            alpha: 1
        }, 300, createjs.Ease.linear);
        this.scaleX = this.scaleY = 0.5;
        createjs.Tween.get(this, {
            loop: false
        }).to({
            scaleX: 1,
            scaleY: 1
        }, 500, createjs.Ease.backOut)
    }
    a.prototype.update = function(c) {
        b.prototype.update.call(this, c);
        if (this.liveTime > 0.7) {
            this.alpha -= c * 3;
            this.scaleX += c;
            this.scaleY += c;
            if (this.alpha <= 0) {
                this.kill()
            }
        }
    };
    return a
})(DNGameObject);
var TaskEffect = (function(b) {
    __extends(a, b);

    function a(d) {
        var f = this;
        b.call(this);
        var c = DNAssetsManager.g_instance.getCenteredImageWithProxy(Images.TASK_PANEL);
        this.addChild(c);
        var e;
        switch (d.goal) {
            case PlayState.GOAL_DIRT:
                e = new createjs.Text(DNStringManager.getInstance().getString(DNStringManager.TASK_CLEAR_DIRT), "bold 33px Times New Roman", "#6f6aa4");
                break;
            case PlayState.GOAL_STRAWBERRY:
                e = new createjs.Text(DNStringManager.getInstance().getString(DNStringManager.TASK_SAVE_STRAWBERRY), "bold 33px Times New Roman", "#6f6aa4");
                break;
            case PlayState.GOAL_SCORE:
                e = new createjs.Text(DNStringManager.getInstance().getString(DNStringManager.TASK_SCORE), "bold 33px Times New Roman", "#6f6aa4");
                break;
            case PlayState.GOAL_COUNT:
                e = new createjs.Text(DNStringManager.getInstance().getString(DNStringManager.TASK_REMOVE_CANDIES), "bold 33px Times New Roman", "#6f6aa4");
                break
        }
        e.textAlign = "center";
        e.y = -23;
        c.addChild(e);
        if (e.getBounds().width > 550) {
            e.scaleX = e.scaleY = 550 / e.getBounds().width
        }
        this.y = -200;
        this.x = Constants.ASSETS_WIDTH * 0.5;
        this.alpha = 0;
        createjs.Tween.get(this).wait(1300).to({
            y: Constants.ASSETS_HEIGHT * 0.5,
            alpha: 1
        }, 650, createjs.Ease.backOut).wait(2200).to({
            y: Constants.ASSETS_HEIGHT + 200,
            alpha: 0
        }, 400, createjs.Ease.backIn).call(function() {
            return f.kill()
        })
    }
    return a
})(DNGameObject);
var TimeIsUpEffect = (function(b) {
    __extends(a, b);

    function a(c) {
        b.call(this);
        this.stage = 0;
        this.addChild(DNAssetsManager.g_instance.getCenteredImageWithProxy(c));
        this.x = 350;
        this.y = 400;
        this.setScale(0);
        this.alpha = -1
    }
    a.prototype.update = function(c) {
        b.prototype.update.call(this, c);
        switch (this.stage) {
            case 0:
                this.alpha += c * 4;
                this.setScale(this.scaleX + c * 2);
                if (this.scaleX > 1) {
                    this.setScale(1);
                    this.alpha = 1;
                    this.liveTime = 0;
                    this.stage = 1;
                    createjs.Tween.get(this, {
                        loop: false
                    }).wait(1400).to({
                        alpha: 0
                    }, 500, createjs.Ease.linear)
                }
                break;
            case 1:
                this.setScale(1 + Math.sin(this.liveTime * 5) * 0.07);
                break
        }
    };
    a.prototype.setScale = function(c) {
        this.scaleX = this.scaleY = c
    };
    return a
})(DNGameObject);
var Utils = (function() {
    function a() {}
    a.RandomRange = function(c, b) {
        return c + (b - c) * Math.random()
    };
    a.RandomRangeInt = function(c, b) {
        return Math.floor(Math.random() * (b - c + 1)) + c
    };
    a.IntToTimeString = function(d) {
        var b = Math.floor(d / 60);
        var f = b.toString();
        var e = d % 60;
        var c;
        if (e < 10) {
            c = "0" + e
        } else {
            c = e.toString()
        }
        return f + "d" + c
    };
    a.RadToGrad = function(b) {
        return b * 180 / Math.PI
    };
    a.GradToRad = function(b) {
        return b * Math.PI / 180
    };
    a.IsMobileBrowser = function() {
        if (window.orientation != undefined) {
            return true
        }
        var b = false;
        (function(c) {
            if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(c) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(c.substr(0, 4))) {
                b = true
            }
        })(navigator.userAgent || navigator.vendor || window.opera);
        return b;
        return false
    };
    a.ScaledOffset = function(b) {
        return (window.devicePixelRatio ? window.devicePixelRatio : 1) * b / Constants.SCREEN_SCALE
    };
    a.GetScoreString = function(c) {
        var b = c.toString();
        switch (b.length) {
            case 1:
                b = "00000" + b;
                break;
            case 2:
                b = "0000" + b;
                break;
            case 3:
                b = "000" + b;
                break;
            case 4:
                b = "00" + b;
                break;
            case 5:
                b = "0" + b;
                break
        }
        return b
    };
    a.shuffle = function(e) {
        for (var c, b, d = e.length; d; c = Math.floor(Math.random() * d), b = e[--d], e[d] = e[c], e[c] = b) {}
    };
    return a
})();
var WinState = (function(b) {
    __extends(a, b);

    function a(g, h, d) {
        var q = this;
        b.call(this);
        this.needAddGold = false;
        GameData.getInstance().onWinLevel(g, h, d);
        var j = DNAssetsManager.g_instance.getCenteredImageWithProxy(Images.MAIN_MENU_RAINBOW);
        this.addChild(j);
        j.x = Constants.ASSETS_WIDTH / 2;
        j.y = 260;
        j.alpha = 0;
        createjs.Tween.get(j).wait(1700).to({
            alpha: 1
        }, 2200, createjs.Ease.linear);
        this.addChild(this.panel);
        var c = new DNJellyButton(Images.BUTTON_PLAY, function() {
            return q.onNextTouch()
        });
        this.panel.addChild(c);
        this.addGuiObject(c);
        c.x = 0;
        c.y = 130;
        var l = DNAssetsManager.g_instance.getImage(Images.GOLD_ICON);
        this.panel.addChild(l);
        l.x = -100;
        l.y = 0 - 20;
        this.goldLabel = new DNTextField(GameData.getInstance().getGold().toString(), DNFontDef.FONT);
        this.panel.addChild(this.goldLabel);
        this.goldLabel.x = -35;
        this.goldLabel.y = 10 - 20;
        var m = DNAssetsManager.g_instance.getImage(Images.SCORE_ICON);
        this.panel.addChild(m);
        m.x = -100;
        m.y = 0 - 70 - 20;
        var t = new DNTextField(h.toString(), DNFontDef.FONT);
        this.panel.addChild(t);
        t.x = -35;
        t.y = 10 - 70 - 20;
        var f = d * 15;
        var k = new DNTextField("p" + f, DNFontDef.FLYING_POINTS);
        this.panel.addChild(k);
        k.x = this.goldLabel.x + this.goldLabel.getBounds().width + 10;
        k.y = 10 - 2 - 20;
        k.alpha = 0;
        k.scaleX = k.scaleY = 0.5;
        createjs.Tween.get(k).wait(1200).to({
            scaleX: 1,
            scaleY: 1,
            alpha: 1
        }, 350, createjs.Ease.backOut).wait(800).call(function() {
            return q.runAddGold()
        }).to({
            alpha: 0
        }, 350, createjs.Ease.linear);
        this.oldGold = GameData.getInstance().getGold();
        GameData.getInstance().addGold(f);
        this.newGold = GameData.getInstance().getGold();
        var s = [0.8, 1.1, 0.8];
        for (var o = 0; o < 3; o++) {
            var p = DNAssetsManager.g_instance.getCenteredImageWithProxy(o < d ? Images.PERFECT_STAR_ON : Images.PERFECT_STAR_OFF);
            this.panel.addChild(p);
            p.x = -95 + o * 95;
            p.y = -210;
            var n = 200 * o + 600;
            p.scaleX = p.scaleY = 0.1;
            createjs.Tween.get(p).wait(n).to({
                scaleX: s[o],
                scaleY: s[o]
            }, 350, createjs.Ease.backOut);
            p.alpha = 0;
            createjs.Tween.get(p).wait(n).to({
                alpha: 1
            }, 300, createjs.Ease.linear).call(function() {
                return DNSoundManager.g_instance.play(DNSoundManager.SOUND_MATCH_5)
            })
        }
        try {
            SG_Hooks.levelUp(g, h)
        } catch (r) {
            console.log("error SG_Hooks.levelUp(level, score);")
        }
    }
    a.prototype.runAddGold = function() {
        this.needAddGold = true
    };
    a.prototype.update = function(c) {
        b.prototype.update.call(this, c);
        if (this.needAddGold) {
            this.oldGold += c * 16;
            if (this.oldGold >= this.newGold) {
                this.oldGold = this.newGold
            }
            this.goldLabel.setText(Math.round(this.oldGold).toString())
        }
    };
    a.prototype.onNextTouch = function() {
        DNStateManager.g_instance.pushState(new CoolTransitionInState(new SelectLevelState()))
    };
    return a
})(PopupState);